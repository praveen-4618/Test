/**@generated
 * WARNING Â– Changes you make to this file may be lost.
 *           File is generated and may be re-generated without warning.
 * @RPT-Core-generated Version 8.6
 */
/******************************************************************
* Licensed Materials - Property of IBM
* IBM Rational Web UI Test
* Copyright IBM Corporation 2013. All Rights Reserved.
* 
* U.S. Government Users Restricted Rights - Use, duplication or 
* disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
******************************************************************/
/* TestScript.template - Suitable for collaborative code generation */
package test;

import com.ibm.rational.test.lt.datacorrelation.execution.action.VariableAction;
import com.ibm.rational.test.lt.datacorrelation.execution.harvest.DataCorrelationVar;
import com.ibm.rational.test.lt.datacorrelation.execution.harvest.DataHarvester;
import com.ibm.rational.test.lt.datacorrelation.execution.harvest.DataVar;
import com.ibm.rational.test.lt.datacorrelation.execution.harvest.IDCArray;
import com.ibm.rational.test.lt.datacorrelation.execution.harvest.IDCCoreVar;
import com.ibm.rational.test.lt.datacorrelation.execution.harvest.IDataCorrelationVar;
import com.ibm.rational.test.lt.datacorrelation.execution.harvest.IDataHarvester;
import com.ibm.rational.test.lt.datacorrelation.execution.proto.ProtoAdapterHandler;
import com.ibm.rational.test.lt.datacorrelation.execution.sub.DataSub;
import com.ibm.rational.test.lt.datacorrelation.execution.sub.IDataSub;
import com.ibm.rational.test.lt.datacorrelation.execution.sub.ISubRule;
import com.ibm.rational.test.lt.datacorrelation.execution.sub.SubRule;
import com.ibm.rational.test.lt.datatransform.adapters.DataTransformAction;
import com.ibm.rational.test.lt.datatransform.adapters.IDataTransform;
import com.ibm.rational.test.lt.execution.core.impl.LTTestScript;
import com.ibm.rational.test.lt.execution.core.impl.MetaString;
import com.ibm.rational.test.lt.execution.core.impl.ZipEntryProxy;
import com.ibm.rational.test.lt.execution.http.IBasicAuthentication;
import com.ibm.rational.test.lt.execution.http.IConnectionRecord;
import com.ibm.rational.test.lt.execution.http.IHTTPRequest;
import com.ibm.rational.test.lt.execution.http.IHTTPSessionTypes;
import com.ibm.rational.test.lt.execution.http.INtlmAuthenticationContext;
import com.ibm.rational.test.lt.execution.http.ISSLInfo;
import com.ibm.rational.test.lt.execution.http.connection.IConnectionLimitsAlgorithm;
import com.ibm.rational.test.lt.execution.http.impl.ConfigConnection;
import com.ibm.rational.test.lt.execution.http.impl.DynamicHTTPRequestsContainer;
import com.ibm.rational.test.lt.execution.http.impl.DynamicRequestContainer;
import com.ibm.rational.test.lt.execution.http.impl.HTTPAction;
import com.ibm.rational.test.lt.execution.http.impl.HTTPPage;
import com.ibm.rational.test.lt.execution.http.impl.HTTPParallel;
import com.ibm.rational.test.lt.execution.http.impl.HTTPPostData;
import com.ibm.rational.test.lt.execution.http.impl.HTTPPostDataChunk;
import com.ibm.rational.test.lt.execution.http.impl.HTTPRequest;
import com.ibm.rational.test.lt.execution.http.impl.HTTPThink;
import com.ibm.rational.test.lt.execution.http.impl.INextActionGenerator;
import com.ibm.rational.test.lt.execution.http.impl.PerHostPortConnectionAlgorithm;
import com.ibm.rational.test.lt.execution.http.impl.RequestHeaderData;
import com.ibm.rational.test.lt.execution.http.impl.SSLInfo;
import com.ibm.rational.test.lt.execution.http.tes.*;
import com.ibm.rational.test.lt.execution.http.util.ConnectionRecordFactory;
import com.ibm.rational.test.lt.execution.http.util.CookieCacheUtil;
import com.ibm.rational.test.lt.execution.http.util.HTTPDataArea;
import com.ibm.rational.test.lt.execution.http.util.PageCacheUtil;
import com.ibm.rational.test.lt.execution.protocol.IProxyServerInfo;
import com.ibm.rational.test.lt.execution.protocol.impl.HTTPTestScriptHelper;
import com.ibm.rational.test.lt.execution.websocket.internal.actions.WebSocketRequestCloseAction;
import com.ibm.rational.test.lt.execution.websocket.internal.actions.WebSocketRequestMessageAction;
import com.ibm.rational.test.lt.execution.websocket.internal.actions.WebSocketResponseMessageAction;
import com.ibm.rational.test.lt.kernel.IDataArea;
import com.ibm.rational.test.lt.kernel.action.IContainer;
import com.ibm.rational.test.lt.kernel.action.IKAction;
import com.ibm.rational.test.lt.kernel.action.IKTimeoutControl;
import com.ibm.rational.test.lt.kernel.action.impl.KAction;
import com.ibm.rational.test.lt.kernel.action.impl.KThrow;
import com.ibm.rational.test.lt.kernel.impl.DataArea;
import com.ibm.rational.test.lt.kernel.services.*;
import com.ibm.rational.test.lt.kernel.services.ITestExecutionServices;
import com.ibm.rational.test.lt.kernel.services.RPTEventStructure;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

@SuppressWarnings("all")
public class Tbtest_Test_A1E9452E6BF91950DFEAE23864643438 extends LTTestScript  {

    static ProtoAdapterHandler pa = new ProtoAdapterHandler();
    static {           
        pa.addPA("com.ibm.rational.test.lt.datacorrelation.execution.protocol.core.CoreProtoAdapter", "coreAdapter");
pa.addPA("com.ibm.rational.test.lt.datacorrelation.execution.http.HTTPActionAdapter", "com.ibm.rational.test.lt.execution.http.impl.HTTPPostDataChunk");
pa.addPA("com.ibm.rational.test.lt.datacorrelation.execution.http.HTTPActionAdapter", "com.ibm.rational.test.lt.execution.http.impl.HTTPAction");
pa.addPA("com.ibm.rational.test.lt.execution.websocket.internal.actions.WebSocketDataAdapter", "com.ibm.rational.test.lt.execution.websocket.internal.actions.WebSocketResponsePongAction");
pa.addPA("com.ibm.rational.test.lt.execution.websocket.internal.actions.WebSocketDataAdapter", "com.ibm.rational.test.lt.execution.websocket.internal.actions.WebSocketRequestPongAction");
pa.addPA("com.ibm.rational.test.lt.execution.websocket.internal.actions.WebSocketDataAdapter", "com.ibm.rational.test.lt.execution.websocket.internal.actions.WebSocketResponsePingAction");
pa.addPA("com.ibm.rational.test.lt.execution.websocket.internal.actions.WebSocketDataAdapter", "com.ibm.rational.test.lt.execution.websocket.internal.actions.WebSocketRequestPingAction");
pa.addPA("com.ibm.rational.test.lt.execution.websocket.internal.actions.WebSocketDataAdapter", "com.ibm.rational.test.lt.execution.websocket.internal.actions.WebSocketResponseCloseAction");
pa.addPA("com.ibm.rational.test.lt.execution.websocket.internal.actions.WebSocketDataAdapter", "com.ibm.rational.test.lt.execution.websocket.internal.actions.WebSocketRequestCloseAction");
pa.addPA("com.ibm.rational.test.lt.execution.websocket.internal.actions.WebSocketDataAdapter", "com.ibm.rational.test.lt.execution.websocket.internal.actions.WebSocketResponseMessageAction");
pa.addPA("com.ibm.rational.test.lt.execution.websocket.internal.actions.WebSocketDataAdapter", "com.ibm.rational.test.lt.execution.websocket.internal.actions.WebSocketRequestMessageAction");
    }
	private IDataCorrelationVar[] dcVars = DataCorrelationVar.getArrayDCVars(124);
	private DataVar[] vars = new DataVar[118];
	
    
    
private HTTPTestScriptHelper httpTestScriptHelper;

	private HTTPTestScriptHelper getHTTPTest() {
		return httpTestScriptHelper;
	}

	// Declaration_websocket.template
	IDataArea connectionMap;

	
	
	public Tbtest_Test_A1E9452E6BF91950DFEAE23864643438(IContainer container, String invocationId) {
		super(container, "tbtest", invocationId, "A1E9452E6BF91950DFEAE23864643438");
		setArmEnabled(false);
		stopAtYourConvenience=false;
		this.httpTestScriptHelper = new HTTPTestScriptHelper(this);
        setTimeoutDuration(240000);
        setTimeoutScheme(IKTimeoutControl.CONTINUE);

		// Constructor_websocket.template
		this.connectionMap = new DataArea("WebSocket");
		addDataArea(connectionMap);

	}

    public void execute() {
    	try {
				CookieCacheUtil.clearCookieCache((ITestExecutionServices)this);
	PageCacheUtil.clearPageCache((ITestExecutionServices)this);
	PageCacheUtil.setCacheEmulation((ITestExecutionServices)this, true);

	    		if (!isScheduleRun()) setThinkMax(2000);
	
	if (!isScheduleRun()){
this.addEventBehavior(new RPTEventStructure(new HTTPPageTitleVPEvent(), new RPTContinueEvent("Page title verification failed"), 1, "Page title verification failed"));
	this.addEventBehavior(new RPTEventStructure(new HTTPResponseCodeVPEvent(), new RPTContinueEvent("Response code verification failed"), 1, "Response code verification failed"));
	this.addEventBehavior(new RPTEventStructure(new HTTPResponseSizeVPEvent(), new RPTContinueEvent("Response size verification failed"), 1, "Response size verification failed"));
	this.addEventBehavior(new RPTEventStructure(new RPTFailVPEvent(), new RPTContinueEvent("Content Verification Point failed"), 1, "Content Verification Point failed"));
	this.addEventBehavior(new RPTEventStructure(new RPTConnectEvent(), new RPTContinueEvent("Connection failed"), 1, "Connection failed"));
	this.addEventBehavior(new RPTEventStructure(new RPTAuthenticationEvent(), new RPTContinueEvent("Authentication failed"), 1, "Authentication failed"));
	this.addEventBehavior(new RPTEventStructure(new RPTDataPoolEOFEvent(), new RPTStopUserEvent("End of dataset reached"), 1, "End of dataset reached"));
	this.addEventBehavior(new RPTEventStructure(new RPTReferenceEvent(), new RPTContinueEvent("Failed to extract reference"), 1, "Failed to extract reference"));
	this.addEventBehavior(new RPTEventStructure(new RPTSubstitutionEvent(), new RPTContinueEvent("Substitution failed"), 1, "Substitution failed"));
	this.addEventBehavior(new RPTEventStructure(new RPTServerTimeoutEvent(), new RPTContinueEvent("Timeout"), 1, "Timeout"));
	this.addEventBehavior(new RPTEventStructure(new RPTCustomCodeVPFailureEvent(), new RPTContinueEvent("Custom Verification Point failed"), 1, "Custom Verification Point failed"));
	this.addEventBehavior(new RPTEventStructure(new RPTCustomCodeAlertEvent(), new RPTContinueEvent("Custom Code reported an Alert"), 0, "Custom Code reported an Alert"));
	this.addEventBehavior(new RPTEventStructure(new RPTCustomCodeExceptionEvent(), new RPTStopUserEvent("Custom Code reported an unhandled exception"), 1, "Custom Code reported an unhandled exception"));
	}
	
	
	        	this.add(dataTransform(this));
	this.add(varAction_1(this));
	this.add(confCon_1(this));
	this.add(confCon_2(this));
	this.add(confCon_3(this));
	this.add(confCon_4(this));
	this.add(confCon_5(this));
	this.add(confCon_6(this));
	this.add(confCon_7(this));
	this.add(confCon_8(this));
	this.add(confCon_9(this));
	this.add(confCon_10(this));
	this.add(confCon_11(this));
	this.add(confCon_12(this));
	this.add(confCon_13(this));
	this.add(confCon_14(this));
	this.add(confCon_15(this));
	this.add(confCon_16(this));
	this.add(confCon_17(this));
	this.add(confCon_18(this));
	this.add(confCon_19(this));
	this.add(confCon_20(this));
	this.add(confCon_21(this));
	this.add(confCon_22(this));
	this.add(confCon_23(this));
	this.add(confCon_24(this));
	this.add(confCon_25(this));
	this.add(confCon_26(this));
	this.add(confCon_27(this));
	this.add(confCon_28(this));
	this.add(confCon_29(this));
	this.add(confCon_30(this));
	this.add(confCon_31(this));
	this.add(confCon_32(this));
	this.add(confCon_33(this));
	this.add(confCon_34(this));
	this.add(confCon_35(this));
	this.add(confCon_36(this));
	this.add(confCon_37(this));
	this.add(confCon_38(this));
	this.add(confCon_39(this));
	this.add(confCon_40(this));
	this.add(confCon_41(this));
	this.add(confCon_42(this));
	this.add(confCon_43(this));
	this.add(confCon_44(this));
	this.add(confCon_45(this));
	this.add(confCon_46(this));
	this.add(confCon_47(this));
	this.add(confCon_48(this));
	this.add(confCon_49(this));
	this.add(confCon_50(this));
	this.add(confCon_51(this));
	this.add(confCon_52(this));
	this.add(confCon_53(this));
	this.add(confCon_54(this));
	this.add(confCon_55(this));
	this.add(confCon_56(this));
	this.add(confCon_57(this));
	this.add(confCon_58(this));
	this.add(confCon_59(this));
	this.add(page_1(this));
	this.add(page_2(this));
	this.add(page_3(this));
	this.add(page_4(this));
			this.httpTestScriptHelper.executeHelper();

	    } catch (Throwable e) {
		     log("Test Execution: Tbtest_Test_A1E9452E6BF91950DFEAE23864643438 ",e);
	    } finally {
	        super.execute();
		}	    
    }
    
	public void preFinish() {
		this.httpTestScriptHelper.preFinishHelper();

		super.preFinish();
	}
	
	public void stop() {
		
		super.stop();
	}	
	
	private KAction dataTransform(IContainer parent) {
		DataTransformAction action = 
			new DataTransformAction(parent, "Data Transform Action");

		action.setMapFile("A1E9452E6BF91950DFEAE23864643438");

		// Control file contains transforms 
		// com.ibm.rational.test.lt.datatransform.adapters.impl.XMLAdapterVERSION_0

		return action;
	}
private VariableAction varAction_1(final IContainer parent) {

	VariableAction vc = new VariableAction(parent, "", "A1E9452E6BF9196EDFEAE23864643438");	
			vars[0] = new DataVar("tbtest_Host", "36a3fec2.akstat.io", IDataArea.TEST, "IGNORE", false, false);

	
		vars[1] = new DataVar("tbtest_Host_1", "px.ads.linkedin.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[2] = new DataVar("tbtest_Host_2", "www.linkedin.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[3] = new DataVar("tbtest_Host_3", "analytics.twitter.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[4] = new DataVar("tbtest_Host_4", "127.0.0.1", IDataArea.TEST, "IGNORE", false, false);

	
		vars[5] = new DataVar("tbtest_Host_4_Port", "7878", IDataArea.TEST, "IGNORE", false, false);

	
		vars[6] = new DataVar("tbtest_Host_5", "js.adsrvr.org", IDataArea.TEST, "IGNORE", false, false);

	
		vars[7] = new DataVar("tbtest_Host_6", "www.facebook.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[8] = new DataVar("tbtest_Host_7", "insight.adsrvr.org", IDataArea.TEST, "IGNORE", false, false);

	
		vars[9] = new DataVar("tbtest_Host_8", "20797417p.rfihub.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[10] = new DataVar("tbtest_Host_9", "a.rfihub.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[11] = new DataVar("tbtest_Host_10", "t.co", IDataArea.TEST, "IGNORE", false, false);

	
		vars[12] = new DataVar("tbtest_Host_11", "connect.facebook.net", IDataArea.TEST, "IGNORE", false, false);

	
		vars[13] = new DataVar("tbtest_Host_12", "c1.rfihub.net", IDataArea.TEST, "IGNORE", false, false);

	
		vars[14] = new DataVar("tbtest_Host_13", "adservice.google.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[15] = new DataVar("tbtest_Host_14", "snap.licdn.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[16] = new DataVar("tbtest_Host_15", "static.ads-twitter.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[17] = new DataVar("tbtest_Host_16", "tags.w55c.net", IDataArea.TEST, "IGNORE", false, false);

	
		vars[18] = new DataVar("tbtest_Host_17", "1106306.fls.doubleclick.net", IDataArea.TEST, "IGNORE", false, false);

	
		vars[19] = new DataVar("tbtest_Host_18", "3573292.fls.doubleclick.net", IDataArea.TEST, "IGNORE", false, false);

	
		vars[20] = new DataVar("tbtest_Host_19", "3573286.fls.doubleclick.net", IDataArea.TEST, "IGNORE", false, false);

	
		vars[21] = new DataVar("tbtest_Host_20", "www.google.com.my", IDataArea.TEST, "IGNORE", false, false);

	
		vars[22] = new DataVar("tbtest_Host_21", "www.google.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[23] = new DataVar("tbtest_Host_22", "googleads.g.doubleclick.net", IDataArea.TEST, "IGNORE", false, false);

	
		vars[24] = new DataVar("tbtest_Host_23", "www.googletagmanager.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[25] = new DataVar("tbtest_Host_24", "cti.w55c.net", IDataArea.TEST, "IGNORE", false, false);

	
		vars[26] = new DataVar("tbtest_Host_25", "3573281.fls.doubleclick.net", IDataArea.TEST, "IGNORE", false, false);

	
		vars[27] = new DataVar("tbtest_Host_26", "www.googleadservices.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[28] = new DataVar("tbtest_Host_27", "ds-aksb-a.akamaihd.net", IDataArea.TEST, "IGNORE", false, false);

	
		vars[29] = new DataVar("tbtest_Host_28", "assets.adobedtm.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[30] = new DataVar("tbtest_Host_29", "public.cobrowse.oraclecloud.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[31] = new DataVar("tbtest_Host_30", "stags.bluekai.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[32] = new DataVar("tbtest_Host_31", "s1973398186.t.eloqua.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[33] = new DataVar("tbtest_Host_32", "img03.en25.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[34] = new DataVar("tbtest_Host_33", "tags.bluekai.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[35] = new DataVar("tbtest_Host_34", "sc60032181us1.cobrowse.oraclecloud.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[36] = new DataVar("tbtest_Host_35", "oracle.112.2o7.net", IDataArea.TEST, "IGNORE", false, false);

	
		vars[37] = new DataVar("tbtest_Host_36", "www.oracleimg.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[38] = new DataVar("tbtest_Host_37", "c.go-mpulse.net", IDataArea.TEST, "IGNORE", false, false);

	
		vars[39] = new DataVar("tbtest_Host_38", "www.oracle.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[40] = new DataVar("tbtest_Host_39", "consent.truste.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[41] = new DataVar("tbtest_Host_40", "go.oracle.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[42] = new DataVar("tbtest_Host_41", "tags.bkrtx.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[43] = new DataVar("tbtest_Host_42", "s.go-mpulse.net", IDataArea.TEST, "IGNORE", false, false);

	
		vars[44] = new DataVar("tbtest_Host_43", "consent.trustarc.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[45] = new DataVar("tbtest_Host_44", "service.maxymiser.net", IDataArea.TEST, "IGNORE", false, false);

	
		vars[46] = new DataVar("tbtest_Host_45", "www.bing.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[47] = new DataVar("tbtest_Host_46", "dev.virtualearth.net", IDataArea.TEST, "IGNORE", false, false);

	
		vars[48] = new DataVar("tbtest_Host_47", "t1.ssl.ak.dynamic.tiles.virtualearth.net", IDataArea.TEST, "IGNORE", false, false);

	
		vars[49] = new DataVar("tbtest_Host_48", "t0.ssl.ak.dynamic.tiles.virtualearth.net", IDataArea.TEST, "IGNORE", false, false);

	
		vars[50] = new DataVar("tbtest_Host_49", "tse1.mm.bing.net", IDataArea.TEST, "IGNORE", false, false);

	
		vars[51] = new DataVar("tbtest_Host_50", "browser.pipe.aria.microsoft.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[52] = new DataVar("tbtest_Host_51", "business.bing.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[53] = new DataVar("tbtest_Host_52", "safebrowsing.googleapis.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[54] = new DataVar("tbtest_Host_53", "www2.bing.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[55] = new DataVar("tbtest_Host_54", "shavar.services.mozilla.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[56] = new DataVar("tbtest_Host_55", "push.services.mozilla.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[57] = new DataVar("tbtest_Host_56", "tiles.services.mozilla.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[58] = new DataVar("tbtest_Host_57", "snippets.cdn.mozilla.net", IDataArea.TEST, "IGNORE", false, false);

	
		vars[59] = new DataVar("tbtest_Host_58", "detectportal.firefox.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[60] = new DataVar("tbtest_Host_2_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[61] = new DataVar("tbtest_Host_3_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[62] = new DataVar("tbtest_Host_1_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[63] = new DataVar("tbtest_Host_7_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[64] = new DataVar("tbtest_Host_8_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[65] = new DataVar("tbtest_Host_9_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[66] = new DataVar("tbtest_Host_6_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[67] = new DataVar("tbtest_Host_10_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[68] = new DataVar("tbtest_Host_11_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[69] = new DataVar("tbtest_Host_12_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[70] = new DataVar("tbtest_Host_14_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[71] = new DataVar("tbtest_Host_15_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[72] = new DataVar("tbtest_Host_16_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[73] = new DataVar("tbtest_Host_13_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[74] = new DataVar("tbtest_Host_17_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[75] = new DataVar("tbtest_Host_18_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[76] = new DataVar("tbtest_Host_19_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[77] = new DataVar("tbtest_Host_24_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[78] = new DataVar("tbtest_Host_5_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[79] = new DataVar("tbtest_Host_20_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[80] = new DataVar("tbtest_Host_25_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[81] = new DataVar("tbtest_Host_22_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[82] = new DataVar("tbtest_Host_26_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[83] = new DataVar("tbtest_Host_23_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[84] = new DataVar("tbtest_Host_27_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[85] = new DataVar("tbtest_Host_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[86] = new DataVar("tbtest_Host_40_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[87] = new DataVar("tbtest_Host_30_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[88] = new DataVar("tbtest_Host_31_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[89] = new DataVar("tbtest_Host_33_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[90] = new DataVar("tbtest_Host_41_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[91] = new DataVar("tbtest_Host_29_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[92] = new DataVar("tbtest_Host_37_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[93] = new DataVar("tbtest_Host_35_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[94] = new DataVar("tbtest_Host_32_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[95] = new DataVar("tbtest_Host_34_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[96] = new DataVar("tbtest_Host_42_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[97] = new DataVar("tbtest_Host_36_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[98] = new DataVar("tbtest_Host_43_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[99] = new DataVar("tbtest_Host_44_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[100] = new DataVar("tbtest_Host_39_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[101] = new DataVar("tbtest_Host_28_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[102] = new DataVar("tbtest_Host_38_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[103] = new DataVar("tbtest_Host_46_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[104] = new DataVar("tbtest_Host_48_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[105] = new DataVar("tbtest_Host_47_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[106] = new DataVar("tbtest_Host_49_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[107] = new DataVar("tbtest_Host_51_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[108] = new DataVar("tbtest_Host_50_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[109] = new DataVar("tbtest_Host_53_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[110] = new DataVar("tbtest_Host_45_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[111] = new DataVar("tbtest_Host_21_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[112] = new DataVar("tbtest_Host_54_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[113] = new DataVar("tbtest_Host_52_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[114] = new DataVar("tbtest_Host_55_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[115] = new DataVar("tbtest_Host_56_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[116] = new DataVar("tbtest_Host_57_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[117] = new DataVar("tbtest_Host_58_Port", "80", IDataArea.TEST, "IGNORE", false, false);

		
	vc.add(vars);
	return vc;
	
}

	private IKAction confCon_1(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = null;
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_1",
					(String)(vars[59].getValue()== null?"detectportal.firefox.com": (String)vars[59].getValue()),  // host name
					Integer.parseInt((String)(vars[117].getValue()== null?"80": (String)vars[117].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_2(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = null;
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_2",
					(String)(vars[4].getValue()== null?"127.0.0.1": (String)vars[4].getValue()),  // host name
					Integer.parseInt((String)(vars[5].getValue()== null?"7878": (String)vars[5].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_3(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_3",
					(String)(vars[58].getValue()== null?"snippets.cdn.mozilla.net": (String)vars[58].getValue()),  // host name
					Integer.parseInt((String)(vars[116].getValue()== null?"443": (String)vars[116].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_4(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_4",
					(String)(vars[57].getValue()== null?"tiles.services.mozilla.com": (String)vars[57].getValue()),  // host name
					Integer.parseInt((String)(vars[115].getValue()== null?"443": (String)vars[115].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_5(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_5",
					(String)(vars[56].getValue()== null?"push.services.mozilla.com": (String)vars[56].getValue()),  // host name
					Integer.parseInt((String)(vars[114].getValue()== null?"443": (String)vars[114].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_6(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_6",
					(String)(vars[53].getValue()== null?"safebrowsing.googleapis.com": (String)vars[53].getValue()),  // host name
					Integer.parseInt((String)(vars[113].getValue()== null?"443": (String)vars[113].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_7(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_7",
					(String)(vars[55].getValue()== null?"shavar.services.mozilla.com": (String)vars[55].getValue()),  // host name
					Integer.parseInt((String)(vars[112].getValue()== null?"443": (String)vars[112].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_8(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_8",
					(String)(vars[22].getValue()== null?"www.google.com": (String)vars[22].getValue()),  // host name
					Integer.parseInt((String)(vars[111].getValue()== null?"443": (String)vars[111].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_9(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_9",
					(String)(vars[46].getValue()== null?"www.bing.com": (String)vars[46].getValue()),  // host name
					Integer.parseInt((String)(vars[110].getValue()== null?"443": (String)vars[110].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_10(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_10",
					(String)(vars[54].getValue()== null?"www2.bing.com": (String)vars[54].getValue()),  // host name
					Integer.parseInt((String)(vars[109].getValue()== null?"443": (String)vars[109].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_11(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_11",
					(String)(vars[51].getValue()== null?"browser.pipe.aria.microsoft.com": (String)vars[51].getValue()),  // host name
					Integer.parseInt((String)(vars[108].getValue()== null?"443": (String)vars[108].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_12(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_12",
					(String)(vars[52].getValue()== null?"business.bing.com": (String)vars[52].getValue()),  // host name
					Integer.parseInt((String)(vars[107].getValue()== null?"443": (String)vars[107].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_13(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_13",
					(String)(vars[50].getValue()== null?"tse1.mm.bing.net": (String)vars[50].getValue()),  // host name
					Integer.parseInt((String)(vars[106].getValue()== null?"443": (String)vars[106].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_14(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_14",
					(String)(vars[48].getValue()== null?"t1.ssl.ak.dynamic.tiles.virtualearth.net": (String)vars[48].getValue()),  // host name
					Integer.parseInt((String)(vars[105].getValue()== null?"443": (String)vars[105].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_15(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_15",
					(String)(vars[49].getValue()== null?"t0.ssl.ak.dynamic.tiles.virtualearth.net": (String)vars[49].getValue()),  // host name
					Integer.parseInt((String)(vars[104].getValue()== null?"443": (String)vars[104].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_16(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_16",
					(String)(vars[47].getValue()== null?"dev.virtualearth.net": (String)vars[47].getValue()),  // host name
					Integer.parseInt((String)(vars[103].getValue()== null?"443": (String)vars[103].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_17(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_17",
					(String)(vars[39].getValue()== null?"www.oracle.com": (String)vars[39].getValue()),  // host name
					Integer.parseInt((String)(vars[102].getValue()== null?"443": (String)vars[102].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_18(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_18",
					(String)(vars[29].getValue()== null?"assets.adobedtm.com": (String)vars[29].getValue()),  // host name
					Integer.parseInt((String)(vars[101].getValue()== null?"443": (String)vars[101].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_19(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_19",
					(String)(vars[40].getValue()== null?"consent.truste.com": (String)vars[40].getValue()),  // host name
					Integer.parseInt((String)(vars[100].getValue()== null?"443": (String)vars[100].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_20(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_20",
					(String)(vars[45].getValue()== null?"service.maxymiser.net": (String)vars[45].getValue()),  // host name
					Integer.parseInt((String)(vars[99].getValue()== null?"443": (String)vars[99].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_21(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_21",
					(String)(vars[44].getValue()== null?"consent.trustarc.com": (String)vars[44].getValue()),  // host name
					Integer.parseInt((String)(vars[98].getValue()== null?"443": (String)vars[98].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_22(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_22",
					(String)(vars[37].getValue()== null?"www.oracleimg.com": (String)vars[37].getValue()),  // host name
					Integer.parseInt((String)(vars[97].getValue()== null?"443": (String)vars[97].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_23(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_23",
					(String)(vars[43].getValue()== null?"s.go-mpulse.net": (String)vars[43].getValue()),  // host name
					Integer.parseInt((String)(vars[96].getValue()== null?"443": (String)vars[96].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_24(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_24",
					(String)(vars[35].getValue()== null?"sc60032181us1.cobrowse.oraclecloud.com": (String)vars[35].getValue()),  // host name
					Integer.parseInt((String)(vars[95].getValue()== null?"443": (String)vars[95].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_25(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_25",
					(String)(vars[33].getValue()== null?"img03.en25.com": (String)vars[33].getValue()),  // host name
					Integer.parseInt((String)(vars[94].getValue()== null?"443": (String)vars[94].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_26(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_26",
					(String)(vars[36].getValue()== null?"oracle.112.2o7.net": (String)vars[36].getValue()),  // host name
					Integer.parseInt((String)(vars[93].getValue()== null?"443": (String)vars[93].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_27(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_27",
					(String)(vars[38].getValue()== null?"c.go-mpulse.net": (String)vars[38].getValue()),  // host name
					Integer.parseInt((String)(vars[92].getValue()== null?"443": (String)vars[92].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_28(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_28",
					(String)(vars[30].getValue()== null?"public.cobrowse.oraclecloud.com": (String)vars[30].getValue()),  // host name
					Integer.parseInt((String)(vars[91].getValue()== null?"443": (String)vars[91].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_29(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_29",
					(String)(vars[42].getValue()== null?"tags.bkrtx.com": (String)vars[42].getValue()),  // host name
					Integer.parseInt((String)(vars[90].getValue()== null?"443": (String)vars[90].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_30(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_30",
					(String)(vars[34].getValue()== null?"tags.bluekai.com": (String)vars[34].getValue()),  // host name
					Integer.parseInt((String)(vars[89].getValue()== null?"443": (String)vars[89].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_31(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_31",
					(String)(vars[32].getValue()== null?"s1973398186.t.eloqua.com": (String)vars[32].getValue()),  // host name
					Integer.parseInt((String)(vars[88].getValue()== null?"443": (String)vars[88].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_32(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_32",
					(String)(vars[31].getValue()== null?"stags.bluekai.com": (String)vars[31].getValue()),  // host name
					Integer.parseInt((String)(vars[87].getValue()== null?"443": (String)vars[87].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_33(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_33",
					(String)(vars[41].getValue()== null?"go.oracle.com": (String)vars[41].getValue()),  // host name
					Integer.parseInt((String)(vars[86].getValue()== null?"443": (String)vars[86].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_34(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_34",
					(String)(vars[0].getValue()== null?"36a3fec2.akstat.io": (String)vars[0].getValue()),  // host name
					Integer.parseInt((String)(vars[85].getValue()== null?"443": (String)vars[85].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_35(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_35",
					(String)(vars[28].getValue()== null?"ds-aksb-a.akamaihd.net": (String)vars[28].getValue()),  // host name
					Integer.parseInt((String)(vars[84].getValue()== null?"443": (String)vars[84].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_36(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_36",
					(String)(vars[24].getValue()== null?"www.googletagmanager.com": (String)vars[24].getValue()),  // host name
					Integer.parseInt((String)(vars[83].getValue()== null?"443": (String)vars[83].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_37(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_37",
					(String)(vars[27].getValue()== null?"www.googleadservices.com": (String)vars[27].getValue()),  // host name
					Integer.parseInt((String)(vars[82].getValue()== null?"443": (String)vars[82].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_38(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_38",
					(String)(vars[23].getValue()== null?"googleads.g.doubleclick.net": (String)vars[23].getValue()),  // host name
					Integer.parseInt((String)(vars[81].getValue()== null?"443": (String)vars[81].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_39(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_39",
					(String)(vars[26].getValue()== null?"3573281.fls.doubleclick.net": (String)vars[26].getValue()),  // host name
					Integer.parseInt((String)(vars[80].getValue()== null?"443": (String)vars[80].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_40(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_40",
					(String)(vars[21].getValue()== null?"www.google.com.my": (String)vars[21].getValue()),  // host name
					Integer.parseInt((String)(vars[79].getValue()== null?"443": (String)vars[79].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_41(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_41",
					(String)(vars[6].getValue()== null?"js.adsrvr.org": (String)vars[6].getValue()),  // host name
					Integer.parseInt((String)(vars[78].getValue()== null?"443": (String)vars[78].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_42(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_42",
					(String)(vars[25].getValue()== null?"cti.w55c.net": (String)vars[25].getValue()),  // host name
					Integer.parseInt((String)(vars[77].getValue()== null?"443": (String)vars[77].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_43(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_43",
					(String)(vars[20].getValue()== null?"3573286.fls.doubleclick.net": (String)vars[20].getValue()),  // host name
					Integer.parseInt((String)(vars[76].getValue()== null?"443": (String)vars[76].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_44(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_44",
					(String)(vars[19].getValue()== null?"3573292.fls.doubleclick.net": (String)vars[19].getValue()),  // host name
					Integer.parseInt((String)(vars[75].getValue()== null?"443": (String)vars[75].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_45(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_45",
					(String)(vars[18].getValue()== null?"1106306.fls.doubleclick.net": (String)vars[18].getValue()),  // host name
					Integer.parseInt((String)(vars[74].getValue()== null?"443": (String)vars[74].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_46(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_46",
					(String)(vars[14].getValue()== null?"adservice.google.com": (String)vars[14].getValue()),  // host name
					Integer.parseInt((String)(vars[73].getValue()== null?"443": (String)vars[73].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_47(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_47",
					(String)(vars[17].getValue()== null?"tags.w55c.net": (String)vars[17].getValue()),  // host name
					Integer.parseInt((String)(vars[72].getValue()== null?"443": (String)vars[72].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_48(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_48",
					(String)(vars[16].getValue()== null?"static.ads-twitter.com": (String)vars[16].getValue()),  // host name
					Integer.parseInt((String)(vars[71].getValue()== null?"443": (String)vars[71].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_49(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_49",
					(String)(vars[15].getValue()== null?"snap.licdn.com": (String)vars[15].getValue()),  // host name
					Integer.parseInt((String)(vars[70].getValue()== null?"443": (String)vars[70].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_50(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_50",
					(String)(vars[13].getValue()== null?"c1.rfihub.net": (String)vars[13].getValue()),  // host name
					Integer.parseInt((String)(vars[69].getValue()== null?"443": (String)vars[69].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_51(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_51",
					(String)(vars[12].getValue()== null?"connect.facebook.net": (String)vars[12].getValue()),  // host name
					Integer.parseInt((String)(vars[68].getValue()== null?"443": (String)vars[68].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_52(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_52",
					(String)(vars[11].getValue()== null?"t.co": (String)vars[11].getValue()),  // host name
					Integer.parseInt((String)(vars[67].getValue()== null?"443": (String)vars[67].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_53(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_53",
					(String)(vars[7].getValue()== null?"www.facebook.com": (String)vars[7].getValue()),  // host name
					Integer.parseInt((String)(vars[66].getValue()== null?"443": (String)vars[66].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_54(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_RSA_WITH_AES_256_CBC_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_54",
					(String)(vars[10].getValue()== null?"a.rfihub.com": (String)vars[10].getValue()),  // host name
					Integer.parseInt((String)(vars[65].getValue()== null?"443": (String)vars[65].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_55(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_RSA_WITH_AES_256_CBC_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_55",
					(String)(vars[9].getValue()== null?"20797417p.rfihub.com": (String)vars[9].getValue()),  // host name
					Integer.parseInt((String)(vars[64].getValue()== null?"443": (String)vars[64].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_56(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_56",
					(String)(vars[8].getValue()== null?"insight.adsrvr.org": (String)vars[8].getValue()),  // host name
					Integer.parseInt((String)(vars[63].getValue()== null?"443": (String)vars[63].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_57(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_57",
					(String)(vars[1].getValue()== null?"px.ads.linkedin.com": (String)vars[1].getValue()),  // host name
					Integer.parseInt((String)(vars[62].getValue()== null?"443": (String)vars[62].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_58(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_58",
					(String)(vars[3].getValue()== null?"analytics.twitter.com": (String)vars[3].getValue()),  // host name
					Integer.parseInt((String)(vars[61].getValue()== null?"443": (String)vars[61].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_59(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_59",
					(String)(vars[2].getValue()== null?"www.linkedin.com": (String)vars[2].getValue()),  // host name
					Integer.parseInt((String)(vars[60].getValue()== null?"443": (String)vars[60].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo  // proxy server info
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}

private HTTPPage page_1(final IContainer parent) {
			HTTPThink think = new HTTPThink(0, 1, parent, parent, "A1E9452E6C384538DFEAE23864643438");
	parent.add(think);
	
		HTTPPage page = new HTTPPage(parent, "links_activity-stream", "A1E9452E6C384538DFEAE23864643438") {
			
			public void execute() {   
				
	
	
	
	
			             
			{ // Parallal Block Start
				HTTPParallel httpParallel = new HTTPParallel(7, this);
				this.add(httpParallel);

				// httpParallel.addRequest(int serial, HTTPAction action, int actionDelay, String firstCharSemID) 
				httpParallel.addRequest(0, request_1(this, true, "A1E9452E6C384530DFEAE23864643438", true, false,
						"Config_1", "detectportal.firefox.com/success.txt",	"/success.txt", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(1, request_2(this, false, "A1E9452E6C389350DFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 620, 100, "A1E9452E6C384546DFEAE23864643438", 3);
				httpParallel.addRequest(2, request_3(this, false, "A1E9452E6C38E170DFEAE23864643438", true, false,
						"Config_3", "snippets.cdn.mozilla.net:443/6/Firefox/65.0.1/20190211233335/Linux_x86_64-gcc3/en-US/release/Linux%203.10.0-514.el7.x86_64%20(GTK%203.14.13%2Clibpulse%206.0.0)/default/default/",	"/6/Firefox/65.0.1/20190211233335/Linux_x86_64-gcc3/en-US/release/Linux%203.10.0-514.el7.x86_64%20(GTK%203.14.13%2Clibpulse%206.0.0)/default/default/", true, false), 135, 100, "A1E9452E6C389358DFEAE23864643438", 3);
				httpParallel.addRequest(3, request_4(this, false, "A1E9452E6C3956A0DFEAE23864643438", true, true,
						"Config_4", "tiles.services.mozilla.com:443/v4/links/activity-stream",	"/v4/links/activity-stream", true, false), 553, 100, "A1E9452E6C384546DFEAE23864643438", 3);
				httpParallel.addRequest(4, request_5(this, false, "A1E9452E6C395719DFEAE23864643438", true, false,
						"Config_4", "tiles.services.mozilla.com:443/v4/links/activity-stream",	"/v4/links/activity-stream", true, false), 553, 100, "A1E9452E6C384546DFEAE23864643438", 3);
				httpParallel.addRequest(5, request_6(this, false, "A1E9452E6C397E10DFEAE23864643438", true, false,
						"Config_4", "tiles.services.mozilla.com:443/v3/links/ping-centre",	"/v3/links/ping-centre", true, false), 553, 100, "A1E9452E6C384546DFEAE23864643438", 3);
				httpParallel.addRequest(6, request_7(this, false, "A1E9452E6C39A4E4DFEAE23864643438", true, false,
						"Config_5", "push.services.mozilla.com:443/",	"/", true, false), 2, 100, "A1E9452E6C389358DFEAE23864643438", 3);
			} // Parallal Block End 

	this.add(websocketRequestMessage_1(this));
	this.add(websocketResponseMessage_1(this));
{ // Parallal Block Start
				HTTPParallel httpParallel = new HTTPParallel(3, this);
				this.add(httpParallel);

				// httpParallel.addRequest(int serial, HTTPAction action, int actionDelay, String firstCharSemID) 
				httpParallel.addRequest(0, request_8(this, true, "A1E9452E6C3CD910DFEAE23864643438", false, false,
						"Config_6", "safebrowsing.googleapis.com:443/v4/threatListUpdates:fetch?$ct=application/x-protobuf&key=AIzaSyB2h2OuRcUgy5N-5hsZqiPW6sH3n_rptiQ&$httpMethod=POST&$req=ChUKE25hdmNsaWVudC1hdXRvLWZmb3gaJwgFEAIaGwoNCAUQBhgBIgMwMDEwARDfiwYaAhgI2U2YBSICIAIoARonCAEQAhobCg0IARAGGAEiAzAwMTABEMnWBRoCGAjxsggnIgIgAigBGicIAxACGhsKDQgDEAYYASIDMDAxMAEQleIFGgIYCF6iaPUiAiACKAEaJwgHEAIaGwoNCAcQBhgBIgMwMDEwARD69QQaAhgIEm2smiICIAIoARolCAkQAhoZCg0ICRAGGAEiAzAwMTABEBIaAhgIlL8SjCICIAIoAQ==",	"/v4/threatListUpdates:fetch?$ct=application/x-protobuf&key=AIzaSyB2h2OuRcUgy5N-5hsZqiPW6sH3n_rptiQ&$httpMethod=POST&$req=ChUKE25hdmNsaWVudC1hdXRvLWZmb3gaJwgFEAIaGwoNCAUQBhgBIgMwMDEwARDfiwYaAhgI2U2YBSICIAIoARonCAEQAhobCg0IARAGGAEiAzAwMTABEMnWBRoCGAjxsggnIgIgAigBGicIAxACGhsKDQgDEAYYASIDMDAxMAEQleIFGgIYCF6iaPUiAiACKAEaJwgHEAIaGwoNCAcQBhgBIgMwMDEwARD69QQaAhgIEm2smiICIAIoARolCAkQAhoZCg0ICRAGGAEiAzAwMTABEBIaAhgIlL8SjCICIAIoAQ==", true, false), 504, 100, "A1E9452E6C39A4F2DFEAE23864643438", 3);
				httpParallel.addRequest(1, request_9(this, false, "A1E9452E6C3D0057DFEAE23864643438", true, false,
						"Config_7", "shavar.services.mozilla.com:443/downloads?client=navclient-auto-ffox&appver=65.0&pver=2.2",	"/downloads?client=navclient-auto-ffox&appver=65.0&pver=2.2", true, false), 1255, 100, "A1E9452E6C3CD91EDFEAE23864643438", 3);
				httpParallel.addRequest(2, request_10(this, false, "A1E9452E6C3D2756DFEAE23864643438", true, false,
						"Config_8", "www.google.com:443/complete/search?client=firefox&q=bing",	"/complete/search?client=firefox&q=bing", true, false), 426, 100, "A1E9452E6C3D0065DFEAE23864643438", 3);
			} // Parallal Block End 

			
				super.execute();
			}
		};
		
		
		page.setRemoveDelaysFromPageResponseTimes(false);
		page.setArmEnabled(false);  
		return page;
	}

	public HTTPAction request_1(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C384546DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "detectportal.firefox.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cache-Control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Pragma", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_1 = new DataSub();
	reqAction.addDataSub(subContainer_1);

		ISubRule sub_0 = new SubRule("req_hdr_Host_1", 0, 24, false, (IDCCoreVar)vars[59], false, "Host_397", null, 0, false);
	subContainer_1.addSubInstruction(sub_0);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C384549DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/plain");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_2(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C389358DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_2 = new DataSub();
	reqAction.addDataSub(subContainer_2);

		ISubRule sub_1 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_396", null, 0, false);
	subContainer_2.addSubInstruction(sub_1);
		ISubRule sub_2 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_395", null, 0, false);
	subContainer_2.addSubInstruction(sub_2);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C38935BDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_3(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C38E17EDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(6);
					
		headers.add(new RequestHeaderData("Host", "snippets.cdn.mozilla.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_3 = new DataSub();
	reqAction.addDataSub(subContainer_3);

		ISubRule sub_3 = new SubRule("req_hdr_Host_1", 0, 24, false, (IDCCoreVar)vars[58], false, "Host_394", null, 0, false);
	subContainer_3.addSubInstruction(sub_3);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C38E181DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(302);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_4(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3956AEDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "tiles.services.mozilla.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("content-type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "null", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "349", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_1(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_4 = new DataSub();
	reqAction.addDataSub(subContainer_4);

		ISubRule sub_4 = new SubRule("req_hdr_Host_1", 0, 26, false, (IDCCoreVar)vars[57], false, "Host_393", null, 0, false);
	subContainer_4.addSubInstruction(sub_4);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C3956B1DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_1(HTTPPostData postData) {
				StringBuffer strBuf_1 = new StringBuffer();
strBuf_1.append("{\"locale\":\"en-US\",\"topic\":\"activity-stream\",\"client_id\":\"23a");
strBuf_1.append("99f39-163e-49d2-9f22-93db71817196\",\"version\":\"65.0.1\",\"relea");
strBuf_1.append("se_channel\":\"release\",\"addon_version\":\"20190211233335\",\"user");
strBuf_1.append("_prefs\":63,\"event\":\"PERSONALIZATION_V1_ITEM_RELEVANCE_SCORE_");
strBuf_1.append("DURATION\",\"value\":0,\"action\":\"activity_stream_performance_ev");
strBuf_1.append("ent\",\"profile_creation_date\":17535,\"region\":\"US\"}");
String requestData_1 = strBuf_1.toString();
			
	HTTPPostDataChunk pdc_0 = new HTTPPostDataChunk("A1E9452E6C3956EFDFEAE23864643438", postData, requestData_1, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_0);

	}

	public HTTPAction request_5(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C395727DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "tiles.services.mozilla.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("content-type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "null", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "349", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_2(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_5 = new DataSub();
	reqAction.addDataSub(subContainer_5);

		ISubRule sub_5 = new SubRule("req_hdr_Host_1", 0, 26, false, (IDCCoreVar)vars[57], false, "Host_392", null, 0, false);
	subContainer_5.addSubInstruction(sub_5);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C397DB0DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_2(HTTPPostData postData) {
				StringBuffer strBuf_2 = new StringBuffer();
strBuf_2.append("{\"locale\":\"en-US\",\"topic\":\"activity-stream\",\"client_id\":\"23a");
strBuf_2.append("99f39-163e-49d2-9f22-93db71817196\",\"version\":\"65.0.1\",\"relea");
strBuf_2.append("se_channel\":\"release\",\"addon_version\":\"20190211233335\",\"user");
strBuf_2.append("_prefs\":63,\"event\":\"PERSONALIZATION_V1_ITEM_RELEVANCE_SCORE_");
strBuf_2.append("DURATION\",\"value\":1,\"action\":\"activity_stream_performance_ev");
strBuf_2.append("ent\",\"profile_creation_date\":17535,\"region\":\"US\"}");
String requestData_2 = strBuf_2.toString();
			
	HTTPPostDataChunk pdc_1 = new HTTPPostDataChunk("A1E9452E6C397DE9DFEAE23864643438", postData, requestData_2, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_1);

	}

	public HTTPAction request_6(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C397E1EDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "tiles.services.mozilla.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("content-type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "null", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "282", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_3(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_6 = new DataSub();
	reqAction.addDataSub(subContainer_6);

		ISubRule sub_6 = new SubRule("req_hdr_Host_1", 0, 26, false, (IDCCoreVar)vars[57], false, "Host_391", null, 0, false);
	subContainer_6.addSubInstruction(sub_6);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C397E21DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_3(HTTPPostData postData) {
				StringBuffer strBuf_3 = new StringBuffer();
strBuf_3.append("{\"locale\":\"en-US\",\"topic\":\"main\",\"client_id\":\"23a99f39-163e-");
strBuf_3.append("49d2-9f22-93db71817196\",\"version\":\"65.0.1\",\"release_channel\"");
strBuf_3.append(":\"release\",\"event\":\"AS_ENABLED\",\"value\":0,\"shield_id\":\"pref-");
strBuf_3.append("rollout-activity-stream-search-shortucts-1495577:active;\",\"p");
strBuf_3.append("rofile_creation_date\":17535,\"region\":\"US\"}");
String requestData_3 = strBuf_3.toString();
			
	HTTPPostDataChunk pdc_2 = new HTTPPostDataChunk("A1E9452E6C397E5ADFEAE23864643438", postData, requestData_3, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_2);

	}

	public HTTPAction request_7(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C39A4F2DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "push.services.mozilla.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-WebSocket-Version", "13", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "wss://push.services.mozilla.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-WebSocket-Protocol", "push-notification", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-WebSocket-Extensions", "permessage-deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-WebSocket-Key", "NRKuVcgCgezNi3BdjDwJkQ==", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive, Upgrade", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Pragma", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cache-Control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade", "websocket", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_7 = new DataSub();
	reqAction.addDataSub(subContainer_7);

		ISubRule sub_7 = new SubRule("req_hdr_Host_1", 0, 25, false, (IDCCoreVar)vars[56], false, "Host_390", null, 0, false);
	subContainer_7.addSubInstruction(sub_7);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C39A4F5DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(101);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	public WebSocketRequestMessageAction websocketRequestMessage_1(IContainer parent) {
		byte[] binaryData = new byte[0];
		String textData = "{\"messageType\":\"hello\",\"broadcasts\":{\"remote-settings/monitor_changes\":\"\\\"1552410977528\\\"\"},\"use_webpush\":true,\"uaid\":\"7dc3d85ec40a4c1fb1a96e6bd20ff686\"}";
		WebSocketRequestMessageAction websocketAction = new WebSocketRequestMessageAction(parent, "Text Request on connection Conn_6 (1)", "A1E9452E6C39CBEFDFEAE23864643438", "A1E9452E6C39A4E4DFEAE23864643438", false, false, false, true, true, textData, binaryData, false, "");
		/* no children */
		
		return websocketAction;
	}
	
	public WebSocketResponseMessageAction websocketResponseMessage_1(IContainer parent) {
		byte[] binaryData = new byte[0];
		String textData = "{\"messageType\":\"hello\",\"uaid\":\"7dc3d85ec40a4c1fb1a96e6bd20ff686\",\"status\":200,\"use_webpush\":true,\"broadcasts\":{}}";
		WebSocketResponseMessageAction websocketAction = new WebSocketResponseMessageAction(parent, "Text Response on connection Conn_6 (1)", "A1E9452E6C39CC0ADFEAE23864643438", "A1E9452E6C39A4E4DFEAE23864643438", false, false, false, true, true, textData, binaryData, false, "", -1);
		/* no children */
		
		return websocketAction;
	}
	

	public HTTPAction request_8(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3CD91EDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "safebrowsing.googleapis.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-HTTP-Method-Override", "POST", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Pragma", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cache-Control", "no-cache", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_8 = new DataSub();
	reqAction.addDataSub(subContainer_8);

		ISubRule sub_8 = new SubRule("req_hdr_Host_1", 0, 27, false, (IDCCoreVar)vars[53], false, "Host_389", null, 0, false);
	subContainer_8.addSubInstruction(sub_8);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C3CD921DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-protobuf");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_9(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3D0065DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "shavar.services.mozilla.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "349", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Pragma", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cache-Control", "no-cache", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_4(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_9 = new DataSub();
	reqAction.addDataSub(subContainer_9);

		ISubRule sub_9 = new SubRule("req_hdr_Host_1", 0, 27, false, (IDCCoreVar)vars[55], false, "Host_388", null, 0, false);
	subContainer_9.addSubInstruction(sub_9);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C3D0068DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/octet-stream");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_4(HTTPPostData postData) {
				StringBuffer strBuf_4 = new StringBuffer();
strBuf_4.append("except-flashallow-digest256;a:1490633678\nallow-flashallow-di");
strBuf_4.append("gest256;a:1490633678\nexcept-flash-digest256;a:1494877265\nexc");
strBuf_4.append("ept-flashsubdoc-digest256;a:1517935265\nmozstd-trackwhite-dig");
strBuf_4.append("est256;a:1550682665\nblock-flashsubdoc-digest256;a:1512160865");
strBuf_4.append("\nbase-track-digest256;a:1550682665\nmozplugin-block-digest256");
strBuf_4.append(";a:1471849627\nblock-flash-digest256;a:1496263270\n");
String requestData_4 = strBuf_4.toString();
			
	HTTPPostDataChunk pdc_3 = new HTTPPostDataChunk("A1E9452E6C3D2733DFEAE23864643438", postData, requestData_4, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_3);

	}

	public HTTPAction request_10(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3D2764DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(6);
					
		headers.add(new RequestHeaderData("Host", "www.google.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_10 = new DataSub();
	reqAction.addDataSub(subContainer_10);

		ISubRule sub_10 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[22], false, "Host_387", null, 0, false);
	subContainer_10.addSubInstruction(sub_10);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C3D2767DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/javascript; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
private HTTPPage page_2(final IContainer parent) {
			HTTPThink think = new HTTPThink(1059, 1, parent, parent, "A1E9452E6C3D4E59DFEAE23864643438");
	parent.add(think);
	
		HTTPPage page = new HTTPPage(parent, "rewardsapp_ncheader", "A1E9452E6C3D4E59DFEAE23864643438") {
			
			public void execute() {   
				
	
	
	
	
			             
			{ // Parallal Block Start
				HTTPParallel httpParallel = new HTTPParallel(21, this);
				this.add(httpParallel);

				// httpParallel.addRequest(int serial, HTTPAction action, int actionDelay, String firstCharSemID) 
				httpParallel.addRequest(0, request_11(this, true, "A1E9452E6C3D4E4BDFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373",	"/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(0, request_12(this, false, "A1E9452E6C3D4E4BDFEAE23864643438", true, false,
						"Config_9", "www.bing.com:443/rs/z/g/cj,nj/92ab0027/0c3a2f0b.js",	"/rs/z/g/cj,nj/92ab0027/0c3a2f0b.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(1, request_13(this, false, "A1E9452E6C389350DFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 107, 100, "A1E9452E6C3D9C63DFEAE23864643438", 3);
				httpParallel.addRequest(2, request_14(this, false, "A1E9452E6C3DEA83DFEAE23864643438", true, false,
						"Config_9", "www.bing.com:443/fd/ls/l?IG=82B4606677674CB69316BA598CA7F43D&Type=Event.CPT&DATA={%22pp%22:{%22S%22:%22L%22,%22FC%22:-1,%22BC%22:-1,%22SE%22:-1,%22TC%22:-1,%22H%22:127,%22BP%22:143,%22CT%22:152,%22IL%22:3},%22ad%22:[-1,-1,1195,806,1195,806,0]}&P=SERP&DA=BN2B&MN=SERP",	"/fd/ls/l?IG=82B4606677674CB69316BA598CA7F43D&Type=Event.CPT&DATA={%22pp%22:{%22S%22:%22L%22,%22FC%22:-1,%22BC%22:-1,%22SE%22:-1,%22TC%22:-1,%22H%22:127,%22BP%22:143,%22CT%22:152,%22IL%22:3},%22ad%22:[-1,-1,1195,806,1195,806,0]}&P=SERP&DA=BN2B&MN=SERP", true, false), 193, 100, "A1E9452E6C3D4E5DDFEAE23864643438", 2);
				httpParallel.addRequest(3, request_15(this, false, "A1E9452E6C3DEAE4DFEAE23864643438", true, false,
						"Config_9", "www.bing.com:443/rms/BingCore.Bundle/cj,nj/dd9cbb9f/3a65a05f.js?bu=rms+answers+Shared+BingCore%24ClientInstV2%24DuplicateXlsDefaultConfig*BingCore%24ClientInstV2%24SharedLocalStorageConfigDefault*BingCore%24shared*BingCore%24env.override*Empty*BingCore%24event.custom.nodep*BingCore%24event.native*BingCore%24onHTML*BingCore%24dom*BingCore%24cookies*BingCore%24rmsajax*BingCore%24ClientInstV2%24LogUploadCapFeatureDisabled*BingCore%24ClientInstV2%24ClientInstConfigSeparateOfflineQueue*BingCore%24ClientInstV2%24clientinst_xls*BingCore%24replay*BingCore%24CoreUtilities*BingCore%24Animation*BingCore%24fadeAnimation*BingCore%24framework*BingCore%24ClientInstV2%24DataSourceLayoutManager*BingCore%24ClientInstV2%24ClientInstConfigFlushInterval",	"/rms/BingCore.Bundle/cj,nj/dd9cbb9f/3a65a05f.js?bu=rms+answers+Shared+BingCore%24ClientInstV2%24DuplicateXlsDefaultConfig*BingCore%24ClientInstV2%24SharedLocalStorageConfigDefault*BingCore%24shared*BingCore%24env.override*Empty*BingCore%24event.custom.nodep*BingCore%24event.native*BingCore%24onHTML*BingCore%24dom*BingCore%24cookies*BingCore%24rmsajax*BingCore%24ClientInstV2%24LogUploadCapFeatureDisabled*BingCore%24ClientInstV2%24ClientInstConfigSeparateOfflineQueue*BingCore%24ClientInstV2%24clientinst_xls*BingCore%24replay*BingCore%24CoreUtilities*BingCore%24Animation*BingCore%24fadeAnimation*BingCore%24framework*BingCore%24ClientInstV2%24DataSourceLayoutManager*BingCore%24ClientInstV2%24ClientInstConfigFlushInterval", true, false), 199, 100, "A1E9452E6C3D4E5DDFEAE23864643438", 2);
				httpParallel.addRequest(4, request_16(this, false, "A1E9452E6C3E38A3DFEAE23864643438", true, false,
						"Config_9", "www.bing.com:443/fd/ls/lsp.aspx?",	"/fd/ls/lsp.aspx?", true, false), 199, 100, "A1E9452E6C3D4E5DDFEAE23864643438", 2);
				httpParallel.addRequest(5, request_17(this, false, "A1E9452E6C3E3910DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/fd/ls/lsp.aspx?",	"/fd/ls/lsp.aspx?", true, false), 199, 100, "A1E9452E6C3D4E5DDFEAE23864643438", 2);
				httpParallel.addRequest(5, request_18(this, false, "A1E9452E6C3E3910DFEAE23864643438", true, false,
						"Config_9", "www.bing.com:443/rs/3S/hb/cj,nj/1beceeda/3baa9af7.js",	"/rs/3S/hb/cj,nj/1beceeda/3baa9af7.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(6, request_19(this, false, "A1E9452E6C3CD910DFEAE23864643438", false, false,
						"Config_6", "safebrowsing.googleapis.com:443/v4/fullHashes:find?$ct=application/x-protobuf&key=AIzaSyB2h2OuRcUgy5N-5hsZqiPW6sH3n_rptiQ&$httpMethod=POST&$req=ChUKE25hdmNsaWVudC1hdXRvLWZmb3gSGwoNCAUQBhgBIgMwMDEwARDqiwYaAhgIL1YjORouCAUQAhoGCgTo3kTTGgYKBPO3ot4aBgoEHpZF0xoGCgR6SfusGgYKBMe1aGogAQ==",	"/v4/fullHashes:find?$ct=application/x-protobuf&key=AIzaSyB2h2OuRcUgy5N-5hsZqiPW6sH3n_rptiQ&$httpMethod=POST&$req=ChUKE25hdmNsaWVudC1hdXRvLWZmb3gSGwoNCAUQBhgBIgMwMDEwARDqiwYaAhgIL1YjORouCAUQAhoGCgTo3kTTGgYKBPO3ot4aBgoEHpZF0xoGCgR6SfusGgYKBMe1aGogAQ==", true, false), 30, 100, "A1E9452E6C3E391EDFEAE23864643438", 3);
				httpParallel.addRequest(1, request_20(this, false, "A1E9452E6C389350DFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 43, 100, "A1E9452E6C3E86F5DFEAE23864643438", 3);
				httpParallel.addRequest(1, request_21(this, false, "A1E9452E6C389350DFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 59, 100, "A1E9452E6C3EADF4DFEAE23864643438", 3);
				httpParallel.addRequest(7, request_22(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 60, 100, "A1E9452E6C3EADF4DFEAE23864643438", 3);
				httpParallel.addRequest(8, request_23(this, false, "A1E9452E6C3ED53EDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 60, 100, "A1E9452E6C3EADF4DFEAE23864643438", 3);
				httpParallel.addRequest(9, request_24(this, false, "A1E9452E6C3EFBF3DFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 2, 100, "A1E9452E6C3ED546DFEAE23864643438", 3);
				httpParallel.addRequest(10, request_25(this, false, "A1E9452E6C3EFC46DFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 3, 100, "A1E9452E6C3EFBFBDFEAE23864643438", 3);
				httpParallel.addRequest(11, request_26(this, false, "A1E9452E6C3EFC99DFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 5, 100, "A1E9452E6C3EFBFBDFEAE23864643438", 3);
				httpParallel.addRequest(12, request_27(this, false, "A1E9452E6C3F234DDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 2, 100, "A1E9452E6C3F2301DFEAE23864643438", 3);
				httpParallel.addRequest(13, request_28(this, false, "A1E9452E6C3F23A0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/notifications/render?bnptrigger=%7B%22PartnerId%22%3A%22HomePage%22%2C%22IID%22%3A%22SERP.2000%22%2C%22Attributes%22%3A%7B%22RawRequestURL%22%3A%22%2F%3FtoWww%3D1%26redig%3D9D91A578CC134FFBB3C8E6C37F8D0373%22%7D%7D&IG=82B4606677674CB69316BA598CA7F43D&IID=SERP.2000",	"/notifications/render?bnptrigger=%7B%22PartnerId%22%3A%22HomePage%22%2C%22IID%22%3A%22SERP.2000%22%2C%22Attributes%22%3A%7B%22RawRequestURL%22%3A%22%2F%3FtoWww%3D1%26redig%3D9D91A578CC134FFBB3C8E6C37F8D0373%22%7D%7D&IG=82B4606677674CB69316BA598CA7F43D&IID=SERP.2000", true, false), 355, 100, "A1E9452E6C3D4E5DDFEAE23864643438", 2);
				httpParallel.addRequest(14, request_29(this, false, "A1E9452E6C3F4A78DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/HPImageArchive.aspx?format=hp&idx=0&n=1&nc=1552440095483&pid=hp&toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373&quiz=1&fav=1&og=1&IG=82B4606677674CB69316BA598CA7F43D&IID=SERP.1050",	"/HPImageArchive.aspx?format=hp&idx=0&n=1&nc=1552440095483&pid=hp&toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373&quiz=1&fav=1&og=1&IG=82B4606677674CB69316BA598CA7F43D&IID=SERP.1050", true, false), 374, 100, "A1E9452E6C3D4E5DDFEAE23864643438", 2);
				httpParallel.addRequest(15, request_30(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/hpm?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373&IID=SERP.1000&IG=82B4606677674CB69316BA598CA7F43D",	"/hpm?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373&IID=SERP.1000&IG=82B4606677674CB69316BA598CA7F43D", true, false), 375, 100, "A1E9452E6C3D4E5DDFEAE23864643438", 2);
				httpParallel.addRequest(14, request_31(this, false, "A1E9452E6C3F4A78DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rb/G/cj,nj/45216c98/b4c5c39b.js?bu=GbQBkwWWBZkFxwMqvQO_AyqcBY4E6wIqKtsD6gPtA4QEKiqHBCq5A6YF8AM",	"/rb/G/cj,nj/45216c98/b4c5c39b.js?bu=GbQBkwWWBZkFxwMqvQO_AyqcBY4E6wIqKtsD6gPtA4QEKiqHBCq5A6YF8AM", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(16, request_32(this, false, "A1E9452E6C3FBF43DFEAE23864643438", false, true,
						"Config_9", "www.bing.com:443/rewardsapp/ncheader?ver=8_1_2_6218997&IID=SERP.5065&IG=82B4606677674CB69316BA598CA7F43D",	"/rewardsapp/ncheader?ver=8_1_2_6218997&IID=SERP.5065&IG=82B4606677674CB69316BA598CA7F43D", true, false), 529, 100, "A1E9452E6C3D4E5DDFEAE23864643438", 2);
				httpParallel.addRequest(17, request_33(this, false, "A1E9452E6C3FE68BDFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rewardsapp/reportActivity?IG=82B4606677674CB69316BA598CA7F43D&IID=SERP.5107&toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373&src=hp",	"/rewardsapp/reportActivity?IG=82B4606677674CB69316BA598CA7F43D&IID=SERP.5107&toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373&src=hp", true, false), 534, 100, "A1E9452E6C3D4E5DDFEAE23864643438", 2);
				httpParallel.addRequest(13, request_34(this, false, "A1E9452E6C3F23A0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=OPN.RTNews_6Itq8K-dO0hHfIBWNMnZ7Q&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow",	"/th?id=OPN.RTNews_6Itq8K-dO0hHfIBWNMnZ7Q&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow", true, false), 641, 100, "A1E9452E6C3D4E5DDFEAE23864643438", 2);
				httpParallel.addRequest(15, request_35(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=OPN.RTNews_C-bsfAo1_SQW-ajELh16bw&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow",	"/th?id=OPN.RTNews_C-bsfAo1_SQW-ajELh16bw&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(14, request_36(this, false, "A1E9452E6C3F4A78DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=OPN.RTNews_p551MQOTSmiTu_mYcr4d7Q&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow",	"/th?id=OPN.RTNews_p551MQOTSmiTu_mYcr4d7Q&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(18, request_37(this, false, "A1E9452E6C405BD0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/web/xls.aspx",	"/web/xls.aspx", true, false), 541, 100, "A1E9452E6C3D4E5DDFEAE23864643438", 2);
				httpParallel.addRequest(16, request_38(this, false, "A1E9452E6C3FBF43DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/ipv6test/test?FORM=MONITR",	"/ipv6test/test?FORM=MONITR", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(17, request_39(this, false, "A1E9452E6C3FE68BDFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=OPN.RTNews_qmZ1BVEfx2MwQ3T6eNnfeQ&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow",	"/th?id=OPN.RTNews_qmZ1BVEfx2MwQ3T6eNnfeQ&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(18, request_40(this, false, "A1E9452E6C405BD0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=OPN.RTNews_r4vuirk2lWp6tXD1fps-0Q&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow",	"/th?id=OPN.RTNews_r4vuirk2lWp6tXD1fps-0Q&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(15, request_41(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=OPN.RTNews_a364UBRbw10kyaO9j2p6YA&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow",	"/th?id=OPN.RTNews_a364UBRbw10kyaO9j2p6YA&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(13, request_42(this, false, "A1E9452E6C3F23A0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=OPN.RTNews_uAxtGm7fNlKRvt-wIez0og&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow",	"/th?id=OPN.RTNews_uAxtGm7fNlKRvt-wIez0og&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(14, request_43(this, false, "A1E9452E6C3F4A78DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=OPN.RTNews_u1sGI6MmUqxbkRru4XVgxQ&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow",	"/th?id=OPN.RTNews_u1sGI6MmUqxbkRru4XVgxQ&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(17, request_44(this, false, "A1E9452E6C3FE68BDFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=OPN.RTNews_X2vAHp_ulNH-JURD5jS-Qg&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow",	"/th?id=OPN.RTNews_X2vAHp_ulNH-JURD5jS-Qg&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(18, request_45(this, false, "A1E9452E6C405BD0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=OPN.RTNews_TwuRMlc1ZnprsqkdPGJsLQ&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow",	"/th?id=OPN.RTNews_TwuRMlc1ZnprsqkdPGJsLQ&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(16, request_46(this, false, "A1E9452E6C3FBF43DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=OPN.RTNews_c_1Ja8OEpViVuA8tgsoq8w&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow",	"/th?id=OPN.RTNews_c_1Ja8OEpViVuA8tgsoq8w&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(15, request_47(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=OPN.RTNews_hUQkbS-yueXt3KP72-Q2og&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow",	"/th?id=OPN.RTNews_hUQkbS-yueXt3KP72-Q2og&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(13, request_48(this, false, "A1E9452E6C3F23A0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=OPN.RTNews_lUHZ_7x9t3cNJ7cb7S5uzw&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow",	"/th?id=OPN.RTNews_lUHZ_7x9t3cNJ7cb7S5uzw&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(14, request_49(this, false, "A1E9452E6C3F4A78DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=OPN.RTNews_l_DPlLZToP1DKP9aejV5vw&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow",	"/th?id=OPN.RTNews_l_DPlLZToP1DKP9aejV5vw&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(17, request_50(this, false, "A1E9452E6C3FE68BDFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/images/sbi?mmasync=1&ig=82B4606677674CB69316BA598CA7F43D&iid=SERP.5104&ptn=Homepage",	"/images/sbi?mmasync=1&ig=82B4606677674CB69316BA598CA7F43D&iid=SERP.5104&ptn=Homepage", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(18, request_51(this, false, "A1E9452E6C405BD0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=OPN.RTNews_5v9IEFxb5a7sbAnk-0YpBQ&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow",	"/th?id=OPN.RTNews_5v9IEFxb5a7sbAnk-0YpBQ&w=186&h=88&c=7&rs=2&qlt=80&cdv=1&pid=PopNow", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(16, request_52(this, false, "A1E9452E6C3FBF43DFEAE23864643438", true, false,
						"Config_9", "www.bing.com:443/hptr/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373&IG=82B4606677674CB69316BA598CA7F43D&IID=SERP.1300",	"/hptr/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373&IG=82B4606677674CB69316BA598CA7F43D&IID=SERP.1300", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(15, request_53(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/fd/ls/l?IG=82B4606677674CB69316BA598CA7F43D&Type=Event.PPT&DATA={%22S%22:27,%22E%22:639,%22T%22:0,%22I%22:0,%22N%22:{%22H%22:{%22S%22:634,%22E%22:635,%22T%22:1}},%22M%22:{}}&P=SERP&DA=BN2B",	"/fd/ls/l?IG=82B4606677674CB69316BA598CA7F43D&Type=Event.PPT&DATA={%22S%22:27,%22E%22:639,%22T%22:0,%22I%22:0,%22N%22:{%22H%22:{%22S%22:634,%22E%22:635,%22T%22:1}},%22M%22:{}}&P=SERP&DA=BN2B", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(14, request_54(this, false, "A1E9452E6C3F4A78DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/3S/ef/ic/0a56bd4f/0f4e52be.svg",	"/rs/3S/ef/ic/0a56bd4f/0f4e52be.svg", true, false), 842, 100, "A1E9452E6C3D4E5DDFEAE23864643438", 2);
				httpParallel.addRequest(15, request_55(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/3S/el/ic/c4a64003/64c27dd3.svg",	"/rs/3S/el/ic/c4a64003/64c27dd3.svg", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(13, request_56(this, false, "A1E9452E6C3F23A0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/3S/er/ic/e243f498/7f7111bf.svg",	"/rs/3S/er/ic/e243f498/7f7111bf.svg", true, false), 843, 100, "A1E9452E6C3D4E5DDFEAE23864643438", 2);
				httpParallel.addRequest(18, request_57(this, false, "A1E9452E6C405BD0DFEAE23864643438", true, false,
						"Config_9", "www.bing.com:443/rs/3S/eu/ic/878ca0cd/b83d57c0.svg",	"/rs/3S/eu/ic/878ca0cd/b83d57c0.svg", true, false), 844, 100, "A1E9452E6C3D4E5DDFEAE23864643438", 2);
				httpParallel.addRequest(17, request_58(this, false, "A1E9452E6C3FE68BDFEAE23864643438", true, false,
						"Config_9", "www.bing.com:443/rs/3S/eo/ic/b7460a1a/cb3dd66f.svg",	"/rs/3S/eo/ic/b7460a1a/cb3dd66f.svg", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(13, request_59(this, false, "A1E9452E6C3F23A0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/3S/ex/ic/207638d1/7650a3a8.svg",	"/rs/3S/ex/ic/207638d1/7650a3a8.svg", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(14, request_60(this, false, "A1E9452E6C3F4A78DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/3S/eA/ic/616df52f/976cbfb8.svg",	"/rs/3S/eA/ic/616df52f/976cbfb8.svg", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(19, request_61(this, false, "A1E9452E6C431ADCDFEAE23864643438", true, false,
						"Config_10", "www2.bing.com:443/ipv6test/test",	"/ipv6test/test", true, false), 784, 100, "A1E9452E6C3D4E5DDFEAE23864643438", 2);
				httpParallel.addRequest(14, request_62(this, false, "A1E9452E6C3F4A78DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/fd/ls/ls.gif?IG=82B4606677674CB69316BA598CA7F43D&Type=Event.ClientInst&DATA={%22T%22:%22CI.Init%22,%22Component%22:%22SearchByImage%22,%22Name%22:%22SBIWebCam%22,%22Txt%22:%22Unsupported%22,%22TS%22:1552440096693}&log=UserEvent",	"/fd/ls/ls.gif?IG=82B4606677674CB69316BA598CA7F43D&Type=Event.ClientInst&DATA={%22T%22:%22CI.Init%22,%22Component%22:%22SearchByImage%22,%22Name%22:%22SBIWebCam%22,%22Txt%22:%22Unsupported%22,%22TS%22:1552440096693}&log=UserEvent", true, false), 1574, 100, "A1E9452E6C3D4E5DDFEAE23864643438", 2);
				httpParallel.addRequest(14, request_63(this, false, "A1E9452E6C3F4A78DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/web/xls.aspx",	"/web/xls.aspx", true, false), 2647, 100, "A1E9452E6C3D4E5DDFEAE23864643438", 2);
				httpParallel.addRequest(20, request_64(this, false, "A1E9452E6C436927DFEAE23864643438", false, false,
						"Config_11", "browser.pipe.aria.microsoft.com:443/Collector/3.0/?qsp=true&content-type=application%2Fbond-compact-binary&client-id=NO_AUTH&sdk-version=AWT-Web-CJS-1.2.0&x-apikey=fcd159465f4e485999709a9bdc06df2f-f8afad8d-abb3-4281-9d86-d0ba5712a207-7461",	"/Collector/3.0/?qsp=true&content-type=application%2Fbond-compact-binary&client-id=NO_AUTH&sdk-version=AWT-Web-CJS-1.2.0&x-apikey=fcd159465f4e485999709a9bdc06df2f-f8afad8d-abb3-4281-9d86-d0ba5712a207-7461", true, false), 2044, 100, "A1E9452E6C3D4E5DDFEAE23864643438", 2);
				httpParallel.addRequest(14, request_65(this, false, "A1E9452E6C3F4A78DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/web/xls.aspx",	"/web/xls.aspx", true, false), 4939, 100, "A1E9452E6C3D4E5DDFEAE23864643438", 2);
				httpParallel.addRequest(14, request_66(this, false, "A1E9452E6C3F4A78DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/AS/Suggestions?pt=page.home&mkt=en-us&qry=o&cp=1&css=1&cvid=82B4606677674CB69316BA598CA7F43D",	"/AS/Suggestions?pt=page.home&mkt=en-us&qry=o&cp=1&css=1&cvid=82B4606677674CB69316BA598CA7F43D", true, false), 0, 100, "null", 3);
			} // Parallal Block End 

			
				super.execute();
			}
		};
		
		
		page.setRemoveDelaysFromPageResponseTimes(false);
		page.setArmEnabled(false);  
		return page;
	}

	public HTTPAction request_11(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3D4E5DDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=79F3|1:1&H=79F3|1:1&T=79F3|1:1;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_1 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_1);

	harvestContainer_1.addHarvestInstruction ("resp_hdr_Referer-RPT-Generated (read-only)_1", dcVars[0], ".*", 1, 0, 0, 0, false, "Referer-RPT-Generated (read-only)", null, 0, false);
	IDataSub subContainer_11 = new DataSub();
	reqAction.addDataSub(subContainer_11);

		ISubRule sub_11 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_386", null, 0, false);
	subContainer_11.addSubInstruction(sub_11);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C3D4E60DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_12(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3D9C63DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=79F3|1:1&H=79F3|1:1&T=79F3|1:1;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_12 = new DataSub();
	reqAction.addDataSub(subContainer_12);

		ISubRule sub_12 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_242", null, 0, false);
	subContainer_12.addSubInstruction(sub_12);
		ISubRule sub_13 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_385", null, 0, false);
	subContainer_12.addSubInstruction(sub_13);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C3D9C66DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_13(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3DC3ADDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_13 = new DataSub();
	reqAction.addDataSub(subContainer_13);

		ISubRule sub_14 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_384", null, 0, false);
	subContainer_13.addSubInstruction(sub_14);
		ISubRule sub_15 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_383", null, 0, false);
	subContainer_13.addSubInstruction(sub_15);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C3DC3B0DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_14(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3DEA91DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=79F3|1:1&H=79F3|1:1&T=79F3|1:1;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_14 = new DataSub();
	reqAction.addDataSub(subContainer_14);

		ISubRule sub_16 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_241", null, 0, false);
	subContainer_14.addSubInstruction(sub_16);
		ISubRule sub_17 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_382", null, 0, false);
	subContainer_14.addSubInstruction(sub_17);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C3DEA94DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_15(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3DEAF2DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=79F3|1:1&H=79F3|1:1&T=79F3|1:1;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_15 = new DataSub();
	reqAction.addDataSub(subContainer_15);

		ISubRule sub_18 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_240", null, 0, false);
	subContainer_15.addSubInstruction(sub_18);
		ISubRule sub_19 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_381", null, 0, false);
	subContainer_15.addSubInstruction(sub_19);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C3DEAF5DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_16(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3E38B1DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/xml", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "315", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=79F3|1:1&H=79F3|1:1&T=79F3|1:1;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_5(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_16 = new DataSub();
	reqAction.addDataSub(subContainer_16);

		ISubRule sub_20 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_239", null, 0, false);
	subContainer_16.addSubInstruction(sub_20);
		ISubRule sub_21 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_380", null, 0, false);
	subContainer_16.addSubInstruction(sub_21);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C3E38B4DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_5(HTTPPostData postData) {
				StringBuffer strBuf_5 = new StringBuffer();
strBuf_5.append("<ClientInstRequest><Events><E><T>Event.ClientInst</T><IG>82B");
strBuf_5.append("4606677674CB69316BA598CA7F43D</IG><TS>1552440095310</TS><D><");
strBuf_5.append("![CDATA[[{\"T\":\"CI.Error\",\"FID\":\"CI\",\"Name\":\"JSError\",\"Text\":");
strBuf_5.append("\"expected%20expression%2C%20got%20%27%3C%27\",\"Meta\":\"self\",\"");
strBuf_5.append("Line\":\"1\"}]]]></D></E></Events><STS>1552440095310</STS></Cli");
strBuf_5.append("entInstRequest>");
String requestData_5 = strBuf_5.toString();
			
	HTTPPostDataChunk pdc_4 = new HTTPPostDataChunk("A1E9452E6C3E38F5DFEAE23864643438", postData, requestData_5, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_4);

	}

	public HTTPAction request_17(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3E391EDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "343", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=79F3|1:1&H=79F3|1:1&T=79F3|1:1;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_6(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_17 = new DataSub();
	reqAction.addDataSub(subContainer_17);

		ISubRule sub_22 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_238", null, 0, false);
	subContainer_17.addSubInstruction(sub_22);
		ISubRule sub_23 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_379", null, 0, false);
	subContainer_17.addSubInstruction(sub_23);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C3E3921DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_6(HTTPPostData postData) {
				StringBuffer strBuf_6 = new StringBuffer();
strBuf_6.append("<ClientInstRequest><Events><E><T>Event.ClientInst</T><IG>82B");
strBuf_6.append("4606677674CB69316BA598CA7F43D</IG><TS>1552440095306</TS><D><");
strBuf_6.append("![CDATA[{id:4028,P:\"2:24,3:27,4:27,5:27,7:27,6:0,8:27,9:3m,1");
strBuf_6.append("0:3m,11:eu,12:il,13:il,14:j1,15:j1,16:j1,17:j3\",S:\"nav:0\",v:");
strBuf_6.append("1.1,T:\"CI.Perf\",FID:\"CI\",Name:\"PerfV2\"}]]></D></E></Events><");
strBuf_6.append("STS>1552440095306</STS></ClientInstRequest>");
String requestData_6 = strBuf_6.toString();
			
	HTTPPostDataChunk pdc_5 = new HTTPPostDataChunk("A1E9452E6C3E5FE0DFEAE23864643438", postData, requestData_6, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_5);

	}

	public HTTPAction request_18(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3E5FFDDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=79F3|1:1&H=79F3|1:1&T=79F3|1:1;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_18 = new DataSub();
	reqAction.addDataSub(subContainer_18);

		ISubRule sub_24 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_237", null, 0, false);
	subContainer_18.addSubInstruction(sub_24);
		ISubRule sub_25 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_378", null, 0, false);
	subContainer_18.addSubInstruction(sub_25);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C3E6000DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_19(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3E86F5DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "safebrowsing.googleapis.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-HTTP-Method-Override", "POST", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Pragma", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cache-Control", "no-cache", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_19 = new DataSub();
	reqAction.addDataSub(subContainer_19);

		ISubRule sub_26 = new SubRule("req_hdr_Host_1", 0, 27, false, (IDCCoreVar)vars[53], false, "Host_377", null, 0, false);
	subContainer_19.addSubInstruction(sub_26);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C3E86F8DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-protobuf");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_20(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3EADF4DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_20 = new DataSub();
	reqAction.addDataSub(subContainer_20);

		ISubRule sub_27 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_376", null, 0, false);
	subContainer_20.addSubInstruction(sub_27);
		ISubRule sub_28 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_375", null, 0, false);
	subContainer_20.addSubInstruction(sub_28);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C3EADF7DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_21(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3EAE3FDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_21 = new DataSub();
	reqAction.addDataSub(subContainer_21);

		ISubRule sub_29 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_374", null, 0, false);
	subContainer_21.addSubInstruction(sub_29);
		ISubRule sub_30 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_373", null, 0, false);
	subContainer_21.addSubInstruction(sub_30);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C3EAE42DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_22(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3ED4F3DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_22 = new DataSub();
	reqAction.addDataSub(subContainer_22);

		ISubRule sub_31 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_372", null, 0, false);
	subContainer_22.addSubInstruction(sub_31);
		ISubRule sub_32 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_371", null, 0, false);
	subContainer_22.addSubInstruction(sub_32);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C3ED4F6DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_23(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3ED546DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_23 = new DataSub();
	reqAction.addDataSub(subContainer_23);

		ISubRule sub_33 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_370", null, 0, false);
	subContainer_23.addSubInstruction(sub_33);
		ISubRule sub_34 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_369", null, 0, false);
	subContainer_23.addSubInstruction(sub_34);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C3ED549DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_24(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3EFBFBDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_24 = new DataSub();
	reqAction.addDataSub(subContainer_24);

		ISubRule sub_35 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_368", null, 0, false);
	subContainer_24.addSubInstruction(sub_35);
		ISubRule sub_36 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_367", null, 0, false);
	subContainer_24.addSubInstruction(sub_36);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C3EFBFEDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_25(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3EFC4EDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_25 = new DataSub();
	reqAction.addDataSub(subContainer_25);

		ISubRule sub_37 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_366", null, 0, false);
	subContainer_25.addSubInstruction(sub_37);
		ISubRule sub_38 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_365", null, 0, false);
	subContainer_25.addSubInstruction(sub_38);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C3EFC51DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_26(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3F2301DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_26 = new DataSub();
	reqAction.addDataSub(subContainer_26);

		ISubRule sub_39 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_364", null, 0, false);
	subContainer_26.addSubInstruction(sub_39);
		ISubRule sub_40 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_363", null, 0, false);
	subContainer_26.addSubInstruction(sub_40);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C3F2304DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_27(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3F2355DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_27 = new DataSub();
	reqAction.addDataSub(subContainer_27);

		ISubRule sub_41 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_362", null, 0, false);
	subContainer_27.addSubInstruction(sub_41);
		ISubRule sub_42 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_361", null, 0, false);
	subContainer_27.addSubInstruction(sub_42);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C3F2358DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_28(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3F23AEDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=79F3|1:1&H=79F3|1:1&T=79F3|1:1;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_28 = new DataSub();
	reqAction.addDataSub(subContainer_28);

		ISubRule sub_43 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_236", null, 0, false);
	subContainer_28.addSubInstruction(sub_43);
		ISubRule sub_44 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_360", null, 0, false);
	subContainer_28.addSubInstruction(sub_44);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C3F4A10DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_29(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3F4A86DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=79F3|1:1&H=79F3|1:1&T=79F3|1:1;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_29 = new DataSub();
	reqAction.addDataSub(subContainer_29);

		ISubRule sub_45 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_235", null, 0, false);
	subContainer_29.addSubInstruction(sub_45);
		ISubRule sub_46 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_359", null, 0, false);
	subContainer_29.addSubInstruction(sub_46);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C3F4A89DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_30(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3F7172DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=79F3|1:1&H=79F3|1:1&T=79F3|1:1;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_30 = new DataSub();
	reqAction.addDataSub(subContainer_30);

		ISubRule sub_47 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_234", null, 0, false);
	subContainer_30.addSubInstruction(sub_47);
		ISubRule sub_48 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_358", null, 0, false);
	subContainer_30.addSubInstruction(sub_48);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C3F7175DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_31(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3F985CDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_31 = new DataSub();
	reqAction.addDataSub(subContainer_31);

		ISubRule sub_49 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_233", null, 0, false);
	subContainer_31.addSubInstruction(sub_49);
		ISubRule sub_50 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_357", null, 0, false);
	subContainer_31.addSubInstruction(sub_50);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C3F985FDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_32(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3FBF51DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-type", "application/x-www-form-urlencoded", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "4", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=79F3|1:1&H=79F3|1:1&T=79F3|1:1;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_7(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_32 = new DataSub();
	reqAction.addDataSub(subContainer_32);

		ISubRule sub_51 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_232", null, 0, false);
	subContainer_32.addSubInstruction(sub_51);
		ISubRule sub_52 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_356", null, 0, false);
	subContainer_32.addSubInstruction(sub_52);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C3FBF54DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_7(HTTPPostData postData) {
				StringBuffer strBuf_7 = new StringBuffer();
strBuf_7.append("wb=1");
String requestData_7 = strBuf_7.toString();
			
	HTTPPostDataChunk pdc_6 = new HTTPPostDataChunk("A1E9452E6C3FE650DFEAE23864643438", postData, requestData_7, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_6);

	}

	public HTTPAction request_33(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C3FE699DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-type", "application/x-www-form-urlencoded", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "88", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=79F3|1:1&H=79F3|1:1&T=79F3|1:1;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_8(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_33 = new DataSub();
	reqAction.addDataSub(subContainer_33);

		ISubRule sub_53 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_231", null, 0, false);
	subContainer_33.addSubInstruction(sub_53);
		ISubRule sub_54 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_355", null, 0, false);
	subContainer_33.addSubInstruction(sub_54);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C3FE69CDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_8(HTTPPostData postData) {
				StringBuffer strBuf_8 = new StringBuffer();
strBuf_8.append("url=https%3A//www.bing.com/%3FtoWww%3D1%26redig%3D9D91A578CC");
strBuf_8.append("134FFBB3C8E6C37F8D0373&V=web");
String requestData_8 = strBuf_8.toString();
			
	HTTPPostDataChunk pdc_7 = new HTTPPostDataChunk("A1E9452E6C400D60DFEAE23864643438", postData, requestData_8, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_7);

	}

	public HTTPAction request_34(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C400D98DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_34 = new DataSub();
	reqAction.addDataSub(subContainer_34);

		ISubRule sub_55 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_230", null, 0, false);
	subContainer_34.addSubInstruction(sub_55);
		ISubRule sub_56 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_354", null, 0, false);
	subContainer_34.addSubInstruction(sub_56);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C400D9BDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_35(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C403483DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_35 = new DataSub();
	reqAction.addDataSub(subContainer_35);

		ISubRule sub_57 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_229", null, 0, false);
	subContainer_35.addSubInstruction(sub_57);
		ISubRule sub_58 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_353", null, 0, false);
	subContainer_35.addSubInstruction(sub_58);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C403486DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_36(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4034E2DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_36 = new DataSub();
	reqAction.addDataSub(subContainer_36);

		ISubRule sub_59 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_228", null, 0, false);
	subContainer_36.addSubInstruction(sub_59);
		ISubRule sub_60 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_352", null, 0, false);
	subContainer_36.addSubInstruction(sub_60);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4034E5DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_37(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C405BDEDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(12);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-type", "text/xml", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-MSEdge-ExternalExpType", "JointCoord", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-MSEdge-ExternalExp", "null", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "2180", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=79F3|1:1&H=79F3|1:1&T=79F3|1:1;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_9(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_37 = new DataSub();
	reqAction.addDataSub(subContainer_37);

		ISubRule sub_61 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_227", null, 0, false);
	subContainer_37.addSubInstruction(sub_61);
		ISubRule sub_62 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_351", null, 0, false);
	subContainer_37.addSubInstruction(sub_62);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C405BE1DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_9(HTTPPostData postData) {
				StringBuffer strBuf_9 = new StringBuffer();
strBuf_9.append("<ClientInstRequest><CID>053785F69437609637E389B19037634E</CI");
strBuf_9.append("D><Events><E><T>Event.ClientInst</T><IG>82B4606677674CB69316");
strBuf_9.append("BA598CA7F43D</IG><D><![CDATA[{\"T\":\"CI.Init\",\"TS\":15524400954");
strBuf_9.append("70,\"RTS\":337,\"SEQ\":0,\"Name\":\"Base\",\"FID\":\"CI\",\"CurUrl\":\"http");
strBuf_9.append("s://www.bing.com/\",\"UTS\":1552440095657}]]></D><TS>1552440095");
strBuf_9.append("133</TS></E><E><T>Event.ClientInst</T><IG>82B4606677674CB693");
strBuf_9.append("16BA598CA7F43D</IG><D><![CDATA[{\"T\":\"CI.Show\",\"TS\":155244009");
strBuf_9.append("5471,\"RTS\":338,\"SEQ\":1,\"Name\":\"init\",\"FID\":\"ULC\",\"CurUrl\":\"h");
strBuf_9.append("ttps://www.bing.com/\",\"UTS\":1552440095657}]]></D><TS>1552440");
strBuf_9.append("095133</TS></E><E><T>Event.ClientInst</T><IG>82B4606677674CB");
strBuf_9.append("69316BA598CA7F43D</IG><D><![CDATA[{\"Time\":570,\"T\":\"CI.Latenc");
strBuf_9.append("y\",\"TS\":1552440095471,\"RTS\":338,\"SEQ\":2,\"Name\":\"W3C_ImageSta");
strBuf_9.append("rt\",\"FID\":\"HP\",\"CurUrl\":\"https://www.bing.com/\",\"UTS\":155244");
strBuf_9.append("0095657}]]></D><TS>1552440095133</TS></E><E><T>Event.ClientI");
strBuf_9.append("nst</T><IG>82B4606677674CB69316BA598CA7F43D</IG><D><![CDATA[");
strBuf_9.append("{\"Time\":603,\"T\":\"CI.Latency\",\"TS\":1552440095471,\"RTS\":338,\"S");
strBuf_9.append("EQ\":3,\"Name\":\"W3C_ImageLoaded\",\"FID\":\"HP\",\"CurUrl\":\"https://");
strBuf_9.append("www.bing.com/\",\"UTS\":1552440095657}]]></D><TS>1552440095133<");
strBuf_9.append("/TS></E><E><T>Event.ClientInst</T><IG>82B4606677674CB69316BA");
strBuf_9.append("598CA7F43D</IG><D><![CDATA[{\"RTT\":\"130\",\"T\":\"CI.Init\",\"TS\":1");
strBuf_9.append("552440095474,\"RTS\":341,\"SEQ\":4,\"Name\":\"ClientPerf\",\"FID\":\"HP");
strBuf_9.append("\",\"CurUrl\":\"https://www.bing.com/\",\"UTS\":1552440095657}]]></");
strBuf_9.append("D><TS>1552440095133</TS></E><E><T>Event.ClientInst</T><IG>82");
strBuf_9.append("B4606677674CB69316BA598CA7F43D</IG><D><![CDATA[{\"w\":\"1920\",\"");
strBuf_9.append("h\":\"1080\",\"dpr\":\"1\",\"T\":\"CI.Init\",\"TS\":1552440095474,\"RTS\":3");
strBuf_9.append("41,\"SEQ\":5,\"Name\":\"ClientScreen\",\"FID\":\"HP\",\"CurUrl\":\"https:");
strBuf_9.append("//www.bing.com/\",\"UTS\":1552440095657}]]></D><TS>155244009513");
strBuf_9.append("3</TS></E><E><T>Event.ClientInst</T><IG>82B4606677674CB69316");
strBuf_9.append("BA598CA7F43D</IG><D><![CDATA[{\"Time\":754,\"T\":\"CI.Latency\",\"T");
strBuf_9.append("S\":1552440095475,\"RTS\":342,\"SEQ\":6,\"Name\":\"sBoxTime\",\"FID\":\"");
strBuf_9.append("HP\",\"CurUrl\":\"https://www.bing.com/\",\"UTS\":1552440095657}]]>");
strBuf_9.append("</D><TS>1552440095133</TS></E><E><T>Event.ClientInst</T><IG>");
strBuf_9.append("82B4606677674CB69316BA598CA7F43D</IG><D><![CDATA[{\"Time\":900");
strBuf_9.append(",\"T\":\"CI.Latency\",\"TS\":1552440095491,\"RTS\":358,\"SEQ\":7,\"Name");
strBuf_9.append("\":\"CaroStart\",\"FID\":\"HP\",\"CurUrl\":\"https://www.bing.com/\",\"U");
strBuf_9.append("TS\":1552440095657}]]></D><TS>1552440095133</TS></E></Events>");
strBuf_9.append("</ClientInstRequest>");
String requestData_9 = strBuf_9.toString();
			
	HTTPPostDataChunk pdc_8 = new HTTPPostDataChunk("A1E9452E6C4082A4DFEAE23864643438", postData, requestData_9, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_8);

	}

	public HTTPAction request_38(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4082BFDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;ipv6=hit=1552443695777", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_38 = new DataSub();
	reqAction.addDataSub(subContainer_38);

		ISubRule sub_63 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_226", null, 0, false);
	subContainer_38.addSubInstruction(sub_63);
		ISubRule sub_64 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_350", null, 0, false);
	subContainer_38.addSubInstruction(sub_64);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4082C2DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_39(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C40A9C3DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_39 = new DataSub();
	reqAction.addDataSub(subContainer_39);

		ISubRule sub_65 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_225", null, 0, false);
	subContainer_39.addSubInstruction(sub_65);
		ISubRule sub_66 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_349", null, 0, false);
	subContainer_39.addSubInstruction(sub_66);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C40A9C6DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_40(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C40D0B3DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_40 = new DataSub();
	reqAction.addDataSub(subContainer_40);

		ISubRule sub_67 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_224", null, 0, false);
	subContainer_40.addSubInstruction(sub_67);
		ISubRule sub_68 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_348", null, 0, false);
	subContainer_40.addSubInstruction(sub_68);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C40D0B6DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_41(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C40D112DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_41 = new DataSub();
	reqAction.addDataSub(subContainer_41);

		ISubRule sub_69 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_223", null, 0, false);
	subContainer_41.addSubInstruction(sub_69);
		ISubRule sub_70 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_347", null, 0, false);
	subContainer_41.addSubInstruction(sub_70);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C40D115DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_42(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C40F7FFDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_42 = new DataSub();
	reqAction.addDataSub(subContainer_42);

		ISubRule sub_71 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_222", null, 0, false);
	subContainer_42.addSubInstruction(sub_71);
		ISubRule sub_72 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_346", null, 0, false);
	subContainer_42.addSubInstruction(sub_72);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C40F802DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_43(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C411EF7DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_43 = new DataSub();
	reqAction.addDataSub(subContainer_43);

		ISubRule sub_73 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_221", null, 0, false);
	subContainer_43.addSubInstruction(sub_73);
		ISubRule sub_74 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_345", null, 0, false);
	subContainer_43.addSubInstruction(sub_74);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C411EFADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_44(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4145FBDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_44 = new DataSub();
	reqAction.addDataSub(subContainer_44);

		ISubRule sub_75 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_220", null, 0, false);
	subContainer_44.addSubInstruction(sub_75);
		ISubRule sub_76 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_344", null, 0, false);
	subContainer_44.addSubInstruction(sub_76);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4145FEDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_45(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C416CF2DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_45 = new DataSub();
	reqAction.addDataSub(subContainer_45);

		ISubRule sub_77 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_219", null, 0, false);
	subContainer_45.addSubInstruction(sub_77);
		ISubRule sub_78 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_343", null, 0, false);
	subContainer_45.addSubInstruction(sub_78);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C416CF5DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_46(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C416D51DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_46 = new DataSub();
	reqAction.addDataSub(subContainer_46);

		ISubRule sub_79 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_218", null, 0, false);
	subContainer_46.addSubInstruction(sub_79);
		ISubRule sub_80 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_342", null, 0, false);
	subContainer_46.addSubInstruction(sub_80);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C416D54DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_47(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C419437DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_47 = new DataSub();
	reqAction.addDataSub(subContainer_47);

		ISubRule sub_81 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_217", null, 0, false);
	subContainer_47.addSubInstruction(sub_81);
		ISubRule sub_82 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_341", null, 0, false);
	subContainer_47.addSubInstruction(sub_82);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C41943ADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_48(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C41BB33DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_48 = new DataSub();
	reqAction.addDataSub(subContainer_48);

		ISubRule sub_83 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_216", null, 0, false);
	subContainer_48.addSubInstruction(sub_83);
		ISubRule sub_84 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_340", null, 0, false);
	subContainer_48.addSubInstruction(sub_84);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C41BB36DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_49(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C41E223DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_49 = new DataSub();
	reqAction.addDataSub(subContainer_49);

		ISubRule sub_85 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_215", null, 0, false);
	subContainer_49.addSubInstruction(sub_85);
		ISubRule sub_86 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_339", null, 0, false);
	subContainer_49.addSubInstruction(sub_86);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C41E226DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_50(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C41E282DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0;ipv6=hit=1552443695777", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_50 = new DataSub();
	reqAction.addDataSub(subContainer_50);

		ISubRule sub_87 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_214", null, 0, false);
	subContainer_50.addSubInstruction(sub_87);
		ISubRule sub_88 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_338", null, 0, false);
	subContainer_50.addSubInstruction(sub_88);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C41E285DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_51(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C420984DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_51 = new DataSub();
	reqAction.addDataSub(subContainer_51);

		ISubRule sub_89 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_213", null, 0, false);
	subContainer_51.addSubInstruction(sub_89);
		ISubRule sub_90 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_337", null, 0, false);
	subContainer_51.addSubInstruction(sub_90);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C420987DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_52(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C42307EDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0;ipv6=hit=1552443695777", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_52 = new DataSub();
	reqAction.addDataSub(subContainer_52);

		ISubRule sub_91 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_212", null, 0, false);
	subContainer_52.addSubInstruction(sub_91);
		ISubRule sub_92 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_336", null, 0, false);
	subContainer_52.addSubInstruction(sub_92);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C423081DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_53(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C425778DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_53 = new DataSub();
	reqAction.addDataSub(subContainer_53);

		ISubRule sub_93 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_211", null, 0, false);
	subContainer_53.addSubInstruction(sub_93);
		ISubRule sub_94 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_335", null, 0, false);
	subContainer_53.addSubInstruction(sub_94);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C42577BDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_54(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C427E61DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0;ipv6=hit=1552443695777", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_54 = new DataSub();
	reqAction.addDataSub(subContainer_54);

		ISubRule sub_95 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_210", null, 0, false);
	subContainer_54.addSubInstruction(sub_95);
		ISubRule sub_96 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_334", null, 0, false);
	subContainer_54.addSubInstruction(sub_96);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C427E64DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/svg+xml");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_55(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C427EC4DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0;ipv6=hit=1552443695777", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_55 = new DataSub();
	reqAction.addDataSub(subContainer_55);

		ISubRule sub_97 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_209", null, 0, false);
	subContainer_55.addSubInstruction(sub_97);
		ISubRule sub_98 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_333", null, 0, false);
	subContainer_55.addSubInstruction(sub_98);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C427EC7DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/svg+xml");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_56(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C42A59DDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0;ipv6=hit=1552443695777", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_56 = new DataSub();
	reqAction.addDataSub(subContainer_56);

		ISubRule sub_99 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_208", null, 0, false);
	subContainer_56.addSubInstruction(sub_99);
		ISubRule sub_100 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_332", null, 0, false);
	subContainer_56.addSubInstruction(sub_100);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C42A5A0DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/svg+xml");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_57(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C42A600DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0;ipv6=hit=1552443695777", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_57 = new DataSub();
	reqAction.addDataSub(subContainer_57);

		ISubRule sub_101 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_207", null, 0, false);
	subContainer_57.addSubInstruction(sub_101);
		ISubRule sub_102 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_331", null, 0, false);
	subContainer_57.addSubInstruction(sub_102);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C42A603DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/svg+xml");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_58(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C42CCDADFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0;ipv6=hit=1552443695777", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_58 = new DataSub();
	reqAction.addDataSub(subContainer_58);

		ISubRule sub_103 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_206", null, 0, false);
	subContainer_58.addSubInstruction(sub_103);
		ISubRule sub_104 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_330", null, 0, false);
	subContainer_58.addSubInstruction(sub_104);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C42CCDDDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/svg+xml");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_59(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C42F3B7DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0;ipv6=hit=1552443695777", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_59 = new DataSub();
	reqAction.addDataSub(subContainer_59);

		ISubRule sub_105 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_205", null, 0, false);
	subContainer_59.addSubInstruction(sub_105);
		ISubRule sub_106 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_329", null, 0, false);
	subContainer_59.addSubInstruction(sub_106);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C42F3BADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/svg+xml");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_60(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C42F41ADFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0;ipv6=hit=1552443695777", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_60 = new DataSub();
	reqAction.addDataSub(subContainer_60);

		ISubRule sub_107 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_204", null, 0, false);
	subContainer_60.addSubInstruction(sub_107);
		ISubRule sub_108 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_328", null, 0, false);
	subContainer_60.addSubInstruction(sub_108);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C42F41DDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/svg+xml");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_61(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C431AEADFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www2.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;MUIDB=053785F69437609637E389B19037634E;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;ipv6=hit=1552443695777", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_61 = new DataSub();
	reqAction.addDataSub(subContainer_61);

		ISubRule sub_109 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_203", null, 0, false);
	subContainer_61.addSubInstruction(sub_109);
		ISubRule sub_110 = new SubRule("req_hdr_Host_1", 0, 13, false, (IDCCoreVar)vars[54], false, "Host_327", null, 0, false);
	subContainer_61.addSubInstruction(sub_110);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C431AEDDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_62(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4341D3DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_10(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_62 = new DataSub();
	reqAction.addDataSub(subContainer_62);

		ISubRule sub_111 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_202", null, 0, false);
	subContainer_62.addSubInstruction(sub_111);
		ISubRule sub_112 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_326", null, 0, false);
	subContainer_62.addSubInstruction(sub_112);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4341D6DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_10(HTTPPostData postData) {
				
			
	HTTPPostDataChunk pdc_9 = new HTTPPostDataChunk("A1E9452E6C434217DFEAE23864643438", postData, null, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_9);

	}

	public HTTPAction request_63(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4368C0DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(12);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-type", "text/xml", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-MSEdge-ExternalExpType", "JointCoord", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-MSEdge-ExternalExp", "null", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "1428", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_11(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_63 = new DataSub();
	reqAction.addDataSub(subContainer_63);

		ISubRule sub_113 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_201", null, 0, false);
	subContainer_63.addSubInstruction(sub_113);
		ISubRule sub_114 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_325", null, 0, false);
	subContainer_63.addSubInstruction(sub_114);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4368C3DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_11(HTTPPostData postData) {
				StringBuffer strBuf_10 = new StringBuffer();
strBuf_10.append("<ClientInstRequest><CID>053785F69437609637E389B19037634E</CI");
strBuf_10.append("D><Events><E><T>Event.ClientInst</T><IG>82B4606677674CB69316");
strBuf_10.append("BA598CA7F43D</IG><D><![CDATA[{\"Time\":1175,\"T\":\"CI.Latency\",\"");
strBuf_10.append("TS\":1552440095765,\"RTS\":632,\"SEQ\":8,\"Name\":\"CaroLoad\",\"FID\":");
strBuf_10.append("\"HP\",\"CurUrl\":\"https://www.bing.com/\",\"UTS\":1552440097766}]]");
strBuf_10.append("></D><TS>1552440095133</TS></E><E><T>Event.ClientInst</T><IG");
strBuf_10.append(">82B4606677674CB69316BA598CA7F43D</IG><D><![CDATA[{\"Time\":12");
strBuf_10.append("73,\"T\":\"CI.Latency\",\"TS\":1552440095864,\"RTS\":731,\"SEQ\":9,\"Na");
strBuf_10.append("me\":\"CaroImgLoad\",\"FID\":\"HP\",\"CurUrl\":\"https://www.bing.com/");
strBuf_10.append("\",\"UTS\":1552440097766}]]></D><TS>1552440095133</TS></E><E><T");
strBuf_10.append(">Event.ClientInst</T><IG>82B4606677674CB69316BA598CA7F43D</I");
strBuf_10.append("G><D><![CDATA[{\"Time\":\"1277\",\"T\":\"CI.DHTMLClick\",\"TS\":155244");
strBuf_10.append("0095868,\"RTS\":735,\"SEQ\":10,\"Name\":\"TriviaReq\",\"FID\":\"HP\",\"Cu");
strBuf_10.append("rUrl\":\"https://www.bing.com/\",\"UTS\":1552440097766}]]></D><TS");
strBuf_10.append(">1552440095133</TS></E><E><T>Event.ClientInst</T><IG>82B4606");
strBuf_10.append("677674CB69316BA598CA7F43D</IG><D><![CDATA[{\"Time\":\"127\",\"T\":");
strBuf_10.append("\"CI.DHTMLClick\",\"TS\":1552440095994,\"RTS\":861,\"SEQ\":11,\"Name\"");
strBuf_10.append(":\"TriviaLoad\",\"FID\":\"HP\",\"CurUrl\":\"https://www.bing.com/\",\"U");
strBuf_10.append("TS\":1552440097766}]]></D><TS>1552440095133</TS></E><E><T>Eve");
strBuf_10.append("nt.ClientInst</T><IG>82B4606677674CB69316BA598CA7F43D</IG><D");
strBuf_10.append("><![CDATA[{\"Time\":\"1404\",\"T\":\"CI.DHTMLClick\",\"TS\":1552440095");
strBuf_10.append("994,\"RTS\":861,\"SEQ\":12,\"Name\":\"TriviaEnd\",\"FID\":\"HP\",\"CurUrl");
strBuf_10.append("\":\"https://www.bing.com/\",\"UTS\":1552440097766}]]></D><TS>155");
strBuf_10.append("2440095133</TS></E></Events></ClientInstRequest>");
String requestData_10 = strBuf_10.toString();
			
	HTTPPostDataChunk pdc_10 = new HTTPPostDataChunk("A1E9452E6C43690CDFEAE23864643438", postData, requestData_10, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_10);

	}

	public HTTPAction request_64(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C436935DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "browser.pipe.aria.microsoft.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "1093", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_12(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_64 = new DataSub();
	reqAction.addDataSub(subContainer_64);

		ISubRule sub_115 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_200", null, 0, false);
	subContainer_64.addSubInstruction(sub_115);
		ISubRule sub_116 = new SubRule("req_hdr_Host_1", 0, 31, false, (IDCCoreVar)vars[51], false, "Host_324", null, 0, false);
	subContainer_64.addSubInstruction(sub_116);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C436938DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_12(HTTPPostData postData) {
					String requestData_11 = MetaString.encode(ZipEntryProxy.asXMLFragment(
	                                   "A1E9452E6BF91950DFEAE23864643438.testdata",
	                                   "A1E9452E6C438FE8DFEAE23864643438",
	                                   1093));
			
	HTTPPostDataChunk pdc_11 = new HTTPPostDataChunk("A1E9452E6C438FE8DFEAE23864643438", postData, requestData_11, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_11);

	}

	public HTTPAction request_65(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C43901BDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(12);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-type", "text/xml", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-MSEdge-ExternalExpType", "JointCoord", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-MSEdge-ExternalExp", "null", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "6746", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_13(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_65 = new DataSub();
	reqAction.addDataSub(subContainer_65);

		ISubRule sub_117 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_199", null, 0, false);
	subContainer_65.addSubInstruction(sub_117);
		ISubRule sub_118 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_323", null, 0, false);
	subContainer_65.addSubInstruction(sub_118);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C43901EDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_13(HTTPPostData postData) {
					String requestData_12 = MetaString.encode(ZipEntryProxy.asXMLFragment(
	                                   "A1E9452E6BF91950DFEAE23864643438.testdata",
	                                   "A1E9452E6C43B6E0DFEAE23864643438",
	                                   6746));
			
	HTTPPostDataChunk pdc_12 = new HTTPPostDataChunk("A1E9452E6C43B6E0DFEAE23864643438", postData, requestData_12, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_12);

	}

	public HTTPAction request_66(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C43B6FBDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-Autosuggest-ContentWidth", "546", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_2 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_2);

	harvestContainer_2.addHarvestInstruction ("resp_hdr_Set-Cookie_1", dcVars[1], "=mkt=(.*?)&", 1, 1, 0, 0, false, "Set-Cookie", null, 0, false);
	IDataSub subContainer_66 = new DataSub();
	reqAction.addDataSub(subContainer_66);

		ISubRule sub_119 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_198", null, 0, false);
	subContainer_66.addSubInstruction(sub_119);
		ISubRule sub_120 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_322", null, 0, false);
	subContainer_66.addSubInstruction(sub_120);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3FBF51DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C3D4E5DDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C43B6FEDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
private HTTPPage page_3(final IContainer parent) {
			HTTPThink think = new HTTPThink(1079, 1, parent, parent, "A1E9452E6C43DE18DFEAE23864643438");
	parent.add(think);
	
		HTTPPage page = new HTTPPage(parent, "AS_Suggestions", "A1E9452E6C43DE18DFEAE23864643438") {
			
			public void execute() {   
				
	
	
	
	
			             
			{ // Parallal Block Start
				HTTPParallel httpParallel = new HTTPParallel(1, this);
				this.add(httpParallel);

				// httpParallel.addRequest(int serial, HTTPAction action, int actionDelay, String firstCharSemID) 
				httpParallel.addRequest(0, request_67(this, true, "A1E9452E6C3F4A78DFEAE23864643438", false, true,
						"Config_9", "www.bing.com:443/AS/Suggestions?pt=page.home&mkt=en-us&qry=ora&cp=3&cvid=82B4606677674CB69316BA598CA7F43D",	"/AS/Suggestions?pt=page.home&mkt=en-us&qry=ora&cp=3&cvid=82B4606677674CB69316BA598CA7F43D", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(0, request_68(this, false, "A1E9452E6C3F4A78DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/AS/Suggestions?pt=page.home&mkt=en-us&qry=orac&cp=4&cvid=82B4606677674CB69316BA598CA7F43D",	"/AS/Suggestions?pt=page.home&mkt=en-us&qry=orac&cp=4&cvid=82B4606677674CB69316BA598CA7F43D", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(0, request_69(this, false, "A1E9452E6C3F4A78DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=AMMS_ad7920f61b3cb598c84b0f1463646955&w=39&h=39&c=7&rs=1&qlt=90&p=0&cdv=1&pid=RS",	"/th?id=AMMS_ad7920f61b3cb598c84b0f1463646955&w=39&h=39&c=7&rs=1&qlt=90&p=0&cdv=1&pid=RS", true, false), 0, 100, "null", 3);
			} // Parallal Block End 

			
				super.execute();
			}
		};
		
		
		page.setRemoveDelaysFromPageResponseTimes(false);
		page.setArmEnabled(false);  
		return page;
	}

	public HTTPAction request_67(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C43DE1CDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-Autosuggest-ContentWidth", "546", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_3 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_3);

	harvestContainer_3.addHarvestInstruction ("resp_hdr_Set-Cookie_1", dcVars[2], "=mkt=(.*?)&", 1, 1, 0, 0, false, "Set-Cookie_2", null, 0, false);
	IDataSub subContainer_67 = new DataSub();
	reqAction.addDataSub(subContainer_67);

		ISubRule sub_121 = new SubRule("req_uri", 33, 5, true, (IDCCoreVar)dcVars[1], false, "mkt", null, 0, false);
	subContainer_67.addSubInstruction(sub_121);
		ISubRule sub_122 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_197", null, 0, false);
	subContainer_67.addSubInstruction(sub_122);
		ISubRule sub_123 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_321", null, 0, false);
	subContainer_67.addSubInstruction(sub_123);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C43DE1FDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_68(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C440539DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-Autosuggest-ContentWidth", "546", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_4 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_4);

	harvestContainer_4.addHarvestInstruction ("resp_hdr_Set-Cookie_1", dcVars[3], "=mkt=(.*?)&", 1, 1, 0, 0, false, "Set-Cookie_3", null, 0, false);
	IDataSub subContainer_68 = new DataSub();
	reqAction.addDataSub(subContainer_68);

		ISubRule sub_124 = new SubRule("req_uri", 33, 5, true, (IDCCoreVar)dcVars[2], false, "mkt", null, 0, false);
	subContainer_68.addSubInstruction(sub_124);
		ISubRule sub_125 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_196", null, 0, false);
	subContainer_68.addSubInstruction(sub_125);
		ISubRule sub_126 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_320", null, 0, false);
	subContainer_68.addSubInstruction(sub_126);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C43DE1CDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C43DE1CDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C44053CDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_69(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C442C13DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_69 = new DataSub();
	reqAction.addDataSub(subContainer_69);

		ISubRule sub_127 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_195", null, 0, false);
	subContainer_69.addSubInstruction(sub_127);
		ISubRule sub_128 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_319", null, 0, false);
	subContainer_69.addSubInstruction(sub_128);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C43DE1CDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C440539DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C442C16DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
private HTTPPage page_4(final IContainer parent) {
			HTTPThink think = new HTTPThink(679, 1, parent, parent, "A1E9452E6C442C72DFEAE23864643438");
	parent.add(think);
	
		HTTPPage page = new HTTPPage(parent, "Oracle | Integrated Cloud Applications and Platform Services", "A1E9452E6C442C72DFEAE23864643438") {
			
			public void execute() {   
				
	
	
	
	
			             
			{ // Parallal Block Start
				HTTPParallel httpParallel = new HTTPParallel(87, this);
				this.add(httpParallel);

				// httpParallel.addRequest(int serial, HTTPAction action, int actionDelay, String firstCharSemID) 
				httpParallel.addRequest(0, request_70(this, true, "A1E9452E6C3F4A78DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/AS/Suggestions?pt=page.home&mkt=en-us&qry=oracle&cp=6&cvid=82B4606677674CB69316BA598CA7F43D",	"/AS/Suggestions?pt=page.home&mkt=en-us&qry=oracle&cp=6&cvid=82B4606677674CB69316BA598CA7F43D", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(0, request_71(this, false, "A1E9452E6C3F4A78DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/web/xls.aspx",	"/web/xls.aspx", true, false), 1820, 100, "A1E9452E6C442C76DFEAE23864643438", 3);
				httpParallel.addRequest(1, request_72(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/moeb/service/com.ibm.rational.test.rtw.webgui.service.IWebGuiRecorderService?action=hasAnyClientTask&client_task={%22activeTabsInfo%22:[{%22url_kind%22:%22https%3A%2F%2Fwww.bing.com%2F%3FtoWww%3D1%26redig%3D9D91A578CC134FFBB3C8E6C37F8D0373%22,%22browser_type%22:%22Firefox%22,%22unique_id%22:1}]}",	"/moeb/service/com.ibm.rational.test.rtw.webgui.service.IWebGuiRecorderService?action=hasAnyClientTask&client_task={%22activeTabsInfo%22:[{%22url_kind%22:%22https%3A%2F%2Fwww.bing.com%2F%3FtoWww%3D1%26redig%3D9D91A578CC134FFBB3C8E6C37F8D0373%22,%22browser_type%22:%22Firefox%22,%22unique_id%22:1}]}", true, false), 737, 100, "A1E9452E6C44536FDFEAE23864643438", 3);
				httpParallel.addRequest(1, request_73(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/moeb/service/com.ibm.rational.test.rtw.webgui.service.IWebGuiRecorderService?action=hasAnyClientTask&client_task={%22activeTabsInfo%22:[{%22url_kind%22:%22https%3A%2F%2Fwww.bing.com%2F%3FtoWww%3D1%26redig%3D9D91A578CC134FFBB3C8E6C37F8D0373%22,%22browser_type%22:%22Firefox%22,%22unique_id%22:1}]}",	"/moeb/service/com.ibm.rational.test.rtw.webgui.service.IWebGuiRecorderService?action=hasAnyClientTask&client_task={%22activeTabsInfo%22:[{%22url_kind%22:%22https%3A%2F%2Fwww.bing.com%2F%3FtoWww%3D1%26redig%3D9D91A578CC134FFBB3C8E6C37F8D0373%22,%22browser_type%22:%22Firefox%22,%22unique_id%22:1}]}", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(0, request_74(this, false, "A1E9452E6C3F4A78DFEAE23864643438", true, false,
						"Config_9", "www.bing.com:443/fd/ls/GLinkPing.aspx?IG=C32D1CA6E1D646E19C76F882AF81F90B&ID=autosuggest,5019.1&PR={%22i%22:%22m%22,%22et%22:2894}",	"/fd/ls/GLinkPing.aspx?IG=C32D1CA6E1D646E19C76F882AF81F90B&ID=autosuggest,5019.1&PR={%22i%22:%22m%22,%22et%22:2894}", true, false), 316, 100, "A1E9452E6C447A96DFEAE23864643438", 3);
				httpParallel.addRequest(2, request_75(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1",	"/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", true, false), 331, 100, "A1E9452E6C447A96DFEAE23864643438", 3);
				httpParallel.addRequest(3, request_76(this, false, "A1E9452E6C3F23A0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/5o/k5/cir2,cc,nc/e12d1450/364712f2.css",	"/rs/5o/k5/cir2,cc,nc/e12d1450/364712f2.css", true, false), 768, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(2, request_77(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/6m/9V/cc,nc/481def21/5a49c198.css",	"/rs/6m/9V/cc,nc/481def21/5a49c198.css", true, false), 769, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(3, request_78(this, false, "A1E9452E6C3F23A0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/maps/geoplat/REST/v1/Imagery/Map/Road/37.462130,-122.111336/10?ms=608,180&pp=37.394749,-121.953049;152;1&pp=37.393002,-121.953110;152;2&pp=37.530731,-122.262451;152;3&pp=37.531258,-122.269623;152;4&ml=Basemap,Landmarks,OsmBuildings&key=AnTcaqBi2ypp0xI-OZNi4W_ik2KhjgpqioTAtXLC8GzkMBQRMlyxvxyTnd5b73im&c=en-US&fmt=jpeg&od=1&logo=n&da=ro",	"/maps/geoplat/REST/v1/Imagery/Map/Road/37.462130,-122.111336/10?ms=608,180&pp=37.394749,-121.953049;152;1&pp=37.393002,-121.953110;152;2&pp=37.530731,-122.262451;152;3&pp=37.531258,-122.269623;152;4&ml=Basemap,Landmarks,OsmBuildings&key=AnTcaqBi2ypp0xI-OZNi4W_ik2KhjgpqioTAtXLC8GzkMBQRMlyxvxyTnd5b73im&c=en-US&fmt=jpeg&od=1&logo=n&da=ro", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(2, request_79(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/2F/3A/ic/3a17fcbc/fcd935bf.png",	"/rs/2F/3A/ic/3a17fcbc/fcd935bf.png", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(4, request_80(this, false, "A1E9452E6C3CD910DFEAE23864643438", true, false,
						"Config_6", "safebrowsing.googleapis.com:443/v4/fullHashes:find?$ct=application/x-protobuf&key=AIzaSyB2h2OuRcUgy5N-5hsZqiPW6sH3n_rptiQ&$httpMethod=POST&$req=ChUKE25hdmNsaWVudC1hdXRvLWZmb3gSGwoNCAUQBhgBIgMwMDEwARDqiwYaAhgIL1YjORouCAUQAhoGCgTV4CB_GgYKBFd6f60aBgoEXdENsRoGCgR3NeADGgYKBINjeckgAQ==",	"/v4/fullHashes:find?$ct=application/x-protobuf&key=AIzaSyB2h2OuRcUgy5N-5hsZqiPW6sH3n_rptiQ&$httpMethod=POST&$req=ChUKE25hdmNsaWVudC1hdXRvLWZmb3gSGwoNCAUQBhgBIgMwMDEwARDqiwYaAhgIL1YjORouCAUQAhoGCgTV4CB_GgYKBFd6f60aBgoEXdENsRoGCgR3NeADGgYKBINjeckgAQ==", true, false), 1, 100, "A1E9452E6C4600D3DFEAE23864643438", 3);
				httpParallel.addRequest(5, request_81(this, false, "A1E9452E6C462853DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/3t/uq/ic/45c751ff/0f3036a9.png",	"/rs/3t/uq/ic/45c751ff/0f3036a9.png", true, false), 785, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(1, request_82(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 73, 100, "A1E9452E6C4627E0DFEAE23864643438", 3);
				httpParallel.addRequest(6, request_83(this, false, "A1E9452E6C487242DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/3t/ro/ic/d8b665e7/cad19592.png",	"/rs/3t/ro/ic/d8b665e7/cad19592.png", true, false), 787, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(7, request_84(this, false, "A1E9452E6C489937DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/5o/P6/ic/ead77415/3938fd08.png",	"/rs/5o/P6/ic/ead77415/3938fd08.png", true, false), 829, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(2, request_85(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/fd/ls/lsp.aspx?",	"/fd/ls/lsp.aspx?", true, false), 955, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(8, request_86(this, false, "A1E9452E6C48E712DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/5o/Pd/ic/fea28513/8ad63be1.png",	"/rs/5o/Pd/ic/fea28513/8ad63be1.png", true, false), 785, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(2, request_87(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/fd/ls/l?IG=ABEFCF399B024C59A5650E5542EA4116&Type=Event.CPT&DATA={%22pp%22:{%22S%22:%22L%22,%22FC%22:14,%22BC%22:749,%22SE%22:-1,%22TC%22:-1,%22H%22:832,%22BP%22:985,%22CT%22:987,%22IL%22:30},%22ad%22:[-1,-1,1182,806,1182,3274,1]}&P=SERP&DA=BN2B&MN=SERP",	"/fd/ls/l?IG=ABEFCF399B024C59A5650E5542EA4116&Type=Event.CPT&DATA={%22pp%22:{%22S%22:%22L%22,%22FC%22:14,%22BC%22:749,%22SE%22:-1,%22TC%22:-1,%22H%22:832,%22BP%22:985,%22CT%22:987,%22IL%22:30},%22ad%22:[-1,-1,1182,806,1182,3274,1]}&P=SERP&DA=BN2B&MN=SERP", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(3, request_88(this, false, "A1E9452E6C3F23A0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/fd/ls/lsp.aspx?",	"/fd/ls/lsp.aspx?", true, false), 1009, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(2, request_89(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=AMMS_c731fb8535d99b14bd28aa2b6a8af17d:AMMS_cae8d5a53a19b991864bb4d2e30cc0c9:AMMS_fefc71eb66da01a289b0c3b5d460d1d6:AMMS_71b5ab877927e5303da6267574afe12a&w=75&h=75&c=12&rs=1&qlt=80&cdv=1&pid=16.2&bw=3&bc=ffffff",	"/th?id=AMMS_c731fb8535d99b14bd28aa2b6a8af17d:AMMS_cae8d5a53a19b991864bb4d2e30cc0c9:AMMS_fefc71eb66da01a289b0c3b5d460d1d6:AMMS_71b5ab877927e5303da6267574afe12a&w=75&h=75&c=12&rs=1&qlt=80&cdv=1&pid=16.2&bw=3&bc=ffffff", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(3, request_90(this, false, "A1E9452E6C3F23A0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=Ac1e0f88b19d70deb8dcb557ecc2e7ed7:AMMS_2f95e9b9a094eeb546913139dc1773b9:AMMS_10684417370fb956f7b294ed07e0e922:A5dd4312fdbba3da97be3b57098badc79&w=75&h=75&c=7&rs=1&qlt=80&cdv=1&pid=16.1&bw=3&bc=ffffff",	"/th?id=Ac1e0f88b19d70deb8dcb557ecc2e7ed7:AMMS_2f95e9b9a094eeb546913139dc1773b9:AMMS_10684417370fb956f7b294ed07e0e922:A5dd4312fdbba3da97be3b57098badc79&w=75&h=75&c=7&rs=1&qlt=80&cdv=1&pid=16.1&bw=3&bc=ffffff", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(7, request_91(this, false, "A1E9452E6C489937DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/2F/2l/cj,nj/b586df33/c2af2a24.js",	"/rs/2F/2l/cj,nj/b586df33/c2af2a24.js", true, false), 1050, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(5, request_92(this, false, "A1E9452E6C462853DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/5o/1ad/cj,nj/ef06908b/03502832.js",	"/rs/5o/1ad/cj,nj/ef06908b/03502832.js", true, false), 1051, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(6, request_93(this, false, "A1E9452E6C487242DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/2F/2j/cj,nj/1f26441d/094e909a.js",	"/rs/2F/2j/cj,nj/1f26441d/094e909a.js", true, false), 1052, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(8, request_94(this, false, "A1E9452E6C48E712DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/5o/1ab/cj,nj/d5712f1a/e58e5083.js",	"/rs/5o/1ab/cj,nj/d5712f1a/e58e5083.js", true, false), 1052, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(7, request_95(this, false, "A1E9452E6C489937DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rb/3w/cj,nj/ff158424/09b47efe.js?bu=ApUKngo",	"/rb/3w/cj,nj/ff158424/09b47efe.js?bu=ApUKngo", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(8, request_96(this, false, "A1E9452E6C48E712DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/5o/1a9/cj,nj/b559b0ca/c6f6e566.js",	"/rs/5o/1a9/cj,nj/b559b0ca/c6f6e566.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(6, request_97(this, false, "A1E9452E6C487242DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rb/3w/cj,nj/7d589b02/c89f6d42.js?bu=AacK",	"/rb/3w/cj,nj/7d589b02/c89f6d42.js?bu=AacK", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(5, request_98(this, false, "A1E9452E6C462853DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rb/3w/cj,nj/6be8bc09/801ba58b.js?bu=CLYKwgrFCsgKywq_CrkKvAo",	"/rb/3w/cj,nj/6be8bc09/801ba58b.js?bu=CLYKwgrFCsgKywq_CrkKvAo", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(2, request_99(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/b/1x/cj,nj/12dae863/868a2b2d.js",	"/rs/b/1x/cj,nj/12dae863/868a2b2d.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(3, request_100(this, false, "A1E9452E6C3F23A0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/b/1J/cj,nj/dbaaaa02/666af2fc.js",	"/rs/b/1J/cj,nj/dbaaaa02/666af2fc.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(8, request_101(this, false, "A1E9452E6C48E712DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/3t/bm/cj,nj/22dde5bf/61af5a59.js",	"/rs/3t/bm/cj,nj/22dde5bf/61af5a59.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(6, request_102(this, false, "A1E9452E6C487242DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/5o/1dh/cj,nj/a03bbe02/7b6f93ad.js",	"/rs/5o/1dh/cj,nj/a03bbe02/7b6f93ad.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(7, request_103(this, false, "A1E9452E6C489937DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/3X/wC/cj,nj/308cafb7/cb446ca9.js",	"/rs/3X/wC/cj,nj/308cafb7/cb446ca9.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(1, request_104(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 4, 100, "A1E9452E6C4A6DDFDFEAE23864643438", 3);
				httpParallel.addRequest(1, request_105(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(9, request_106(this, false, "A1E9452E6C3ED53EDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 2, 100, "A1E9452E6C4B0A58DFEAE23864643438", 3);
				httpParallel.addRequest(10, request_107(this, false, "A1E9452E6C3EFC46DFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 19, 100, "A1E9452E6C4B311FDFEAE23864643438", 3);
				httpParallel.addRequest(11, request_108(this, false, "A1E9452E6C3EFBF3DFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 19, 100, "A1E9452E6C4B311FDFEAE23864643438", 3);
				httpParallel.addRequest(12, request_109(this, false, "A1E9452E6C3EFC99DFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 2, 100, "A1E9452E6C4B581DDFEAE23864643438", 3);
				httpParallel.addRequest(13, request_110(this, false, "A1E9452E6C3F234DDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 7, 100, "A1E9452E6C4B5868DFEAE23864643438", 3);
				httpParallel.addRequest(1, request_111(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(14, request_112(this, false, "A1E9452E6C389350DFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 3, 100, "A1E9452E6C4B7F1BDFEAE23864643438", 3);
				httpParallel.addRequest(9, request_113(this, false, "A1E9452E6C3ED53EDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(1, request_114(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(11, request_115(this, false, "A1E9452E6C3EFBF3DFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 1, 100, "A1E9452E6C4BA6B1DFEAE23864643438", 3);
				httpParallel.addRequest(10, request_116(this, false, "A1E9452E6C3EFC46DFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 5, 100, "A1E9452E6C4BCD5DDFEAE23864643438", 3);
				httpParallel.addRequest(12, request_117(this, false, "A1E9452E6C3EFC99DFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 6, 100, "A1E9452E6C4BCD5DDFEAE23864643438", 3);
				httpParallel.addRequest(13, request_118(this, false, "A1E9452E6C3F234DDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 1, 100, "A1E9452E6C4BCDA8DFEAE23864643438", 3);
				httpParallel.addRequest(14, request_119(this, false, "A1E9452E6C389350DFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 6, 100, "A1E9452E6C4BF48FDFEAE23864643438", 3);
				httpParallel.addRequest(9, request_120(this, false, "A1E9452E6C3ED53EDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 4, 100, "A1E9452E6C4BF4DADFEAE23864643438", 3);
				httpParallel.addRequest(11, request_121(this, false, "A1E9452E6C3EFBF3DFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(10, request_122(this, false, "A1E9452E6C3EFC46DFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(12, request_123(this, false, "A1E9452E6C3EFC99DFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(1, request_124(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 35, 100, "A1E9452E6C4C42CCDFEAE23864643438", 3);
				httpParallel.addRequest(15, request_125(this, false, "A1E9452E6C4C69BEDFEAE23864643438", true, false,
						"Config_12", "business.bing.com:443/api/v2/tenant/my/settings?",	"/api/v2/tenant/my/settings?", true, false), 3, 100, "A1E9452E6C4BA666DFEAE23864643438", 3);
				httpParallel.addRequest(13, request_126(this, false, "A1E9452E6C3F234DDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 5, 100, "A1E9452E6C4C6973DFEAE23864643438", 3);
				httpParallel.addRequest(14, request_127(this, false, "A1E9452E6C389350DFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 11, 100, "A1E9452E6C4C90B1DFEAE23864643438", 3);
				httpParallel.addRequest(9, request_128(this, false, "A1E9452E6C3ED53EDFEAE23864643438", true, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 12, 100, "A1E9452E6C4CB793DFEAE23864643438", 3);
				httpParallel.addRequest(11, request_129(this, false, "A1E9452E6C3EFBF3DFEAE23864643438", true, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 2, 100, "A1E9452E6C4CB7DEDFEAE23864643438", 3);
				httpParallel.addRequest(1, request_130(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(12, request_131(this, false, "A1E9452E6C3EFC99DFEAE23864643438", true, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 4, 100, "A1E9452E6C4CDEC5DFEAE23864643438", 3);
				httpParallel.addRequest(13, request_132(this, false, "A1E9452E6C3F234DDFEAE23864643438", true, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(10, request_133(this, false, "A1E9452E6C3EFC46DFEAE23864643438", true, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 5, 100, "A1E9452E6C4CDEC5DFEAE23864643438", 3);
				httpParallel.addRequest(2, request_134(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/images/sbi?mmasync=1&ig=ABEFCF399B024C59A5650E5542EA4116&iid=.5054&ptn=Web",	"/images/sbi?mmasync=1&ig=ABEFCF399B024C59A5650E5542EA4116&iid=.5054&ptn=Web", true, false), 1369, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(3, request_135(this, false, "A1E9452E6C3F23A0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rewardsapp/ncheader?ver=8_1_2_6218997&IID=SERP.5030&IG=ABEFCF399B024C59A5650E5542EA4116",	"/rewardsapp/ncheader?ver=8_1_2_6218997&IID=SERP.5030&IG=ABEFCF399B024C59A5650E5542EA4116", true, false), 1382, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(6, request_136(this, false, "A1E9452E6C487242DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rewardsapp/reportActivity?IG=ABEFCF399B024C59A5650E5542EA4116&IID=SERP.5055&q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1",	"/rewardsapp/reportActivity?IG=ABEFCF399B024C59A5650E5542EA4116&IID=SERP.5055&q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", true, false), 1391, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(2, request_137(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/3S/ec/ic/68e94a1b/d7ffd2fd.svg",	"/rs/3S/ec/ic/68e94a1b/d7ffd2fd.svg", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(3, request_138(this, false, "A1E9452E6C3F23A0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/fd/ls/ls.gif?IG=ABEFCF399B024C59A5650E5542EA4116&Type=Event.ClientInst&DATA={%22T%22:%22CI.Init%22,%22Component%22:%22SearchByImage%22,%22Name%22:%22SBIWebCam%22,%22Txt%22:%22Unsupported%22,%22TS%22:1552440106655}&log=UserEvent",	"/fd/ls/ls.gif?IG=ABEFCF399B024C59A5650E5542EA4116&Type=Event.ClientInst&DATA={%22T%22:%22CI.Init%22,%22Component%22:%22SearchByImage%22,%22Name%22:%22SBIWebCam%22,%22Txt%22:%22Unsupported%22,%22TS%22:1552440106655}&log=UserEvent", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(2, request_139(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/web/xls.aspx",	"/web/xls.aspx", true, false), 1540, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(7, request_140(this, false, "A1E9452E6C489937DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=ODL.ca90015331a6265575726d783d3a832b&w=197&h=98&c=7&rs=1&qlt=80&pid=RichNav",	"/th?id=ODL.ca90015331a6265575726d783d3a832b&w=197&h=98&c=7&rs=1&qlt=80&pid=RichNav", true, false), 1542, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(8, request_141(this, false, "A1E9452E6C48E712DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=ON.A8359B3C511D40E490B4D67755DEDB1B&pid=News&w=256&h=144&c=14&rs=2&qlt=90",	"/th?id=ON.A8359B3C511D40E490B4D67755DEDB1B&pid=News&w=256&h=144&c=14&rs=2&qlt=90", true, false), 1542, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(5, request_142(this, false, "A1E9452E6C462853DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=ODL.4cdc6831057e91528d0e66b49b8690a3&w=197&h=98&c=7&rs=1&qlt=80&pid=RichNav",	"/th?id=ODL.4cdc6831057e91528d0e66b49b8690a3&w=197&h=98&c=7&rs=1&qlt=80&pid=RichNav", true, false), 1543, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(3, request_143(this, false, "A1E9452E6C3F23A0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=ODL.b138bd5bae74b8b08317e678330b9d05&w=197&h=98&c=7&rs=1&qlt=80&pid=RichNav",	"/th?id=ODL.b138bd5bae74b8b08317e678330b9d05&w=197&h=98&c=7&rs=1&qlt=80&pid=RichNav", true, false), 1543, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(6, request_144(this, false, "A1E9452E6C487242DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=ODL.01c940474dfec0f422d199e93282cb43&w=197&h=98&c=7&rs=1&qlt=80&pid=RichNav",	"/th?id=ODL.01c940474dfec0f422d199e93282cb43&w=197&h=98&c=7&rs=1&qlt=80&pid=RichNav", true, false), 1544, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(7, request_145(this, false, "A1E9452E6C489937DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=ON.182180BD0EAB4804B296A5DD079BBAE9&pid=News&w=197&h=112&c=14&rs=2&qlt=90",	"/th?id=ON.182180BD0EAB4804B296A5DD079BBAE9&pid=News&w=197&h=112&c=14&rs=2&qlt=90", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(5, request_146(this, false, "A1E9452E6C462853DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/th?id=ON.15BF51E1C0C2309957923903FA90E609&pid=News&w=197&h=112&c=14&rs=2&qlt=90",	"/th?id=ON.15BF51E1C0C2309957923903FA90E609&pid=News&w=197&h=112&c=14&rs=2&qlt=90", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(2, request_147(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/maps/mapcontrol?partner=serp&enableinstrumentation=true&callback=initializeMap&branch=experimental",	"/maps/mapcontrol?partner=serp&enableinstrumentation=true&callback=initializeMap&branch=experimental", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(3, request_148(this, false, "A1E9452E6C3F23A0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/fd/ls/l?IG=ABEFCF399B024C59A5650E5542EA4116&Type=Event.PPT&DATA={%22S%22:1017,%22E%22:1544,%22T%22:0,%22I%22:0,%22N%22:{},%22M%22:{}}&P=SERP&DA=BN2B",	"/fd/ls/l?IG=ABEFCF399B024C59A5650E5542EA4116&Type=Event.PPT&DATA={%22S%22:1017,%22E%22:1544,%22T%22:0,%22I%22:0,%22N%22:{},%22M%22:{}}&P=SERP&DA=BN2B", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(3, request_149(this, false, "A1E9452E6C3F23A0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rb/3w/cj,nj/a79bd550/bcbad5fd.js?bu=A_8EhgaEBQ",	"/rb/3w/cj,nj/a79bd550/bcbad5fd.js?bu=A_8EhgaEBQ", true, false), 1708, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(2, request_150(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rb/3w/cj,nj/c51ffadd/8f3709c5.js?bu=B_8ErQWvBbEF8QS0BYQF",	"/rb/3w/cj,nj/c51ffadd/8f3709c5.js?bu=B_8ErQWvBbEF8QS0BYQF", true, false), 1709, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(6, request_151(this, false, "A1E9452E6C487242DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rb/3w/cir2,cc,nc/ce8fb987/9e37bd70.css?bu=AosGkQY",	"/rb/3w/cir2,cc,nc/ce8fb987/9e37bd70.css?bu=AosGkQY", true, false), 1711, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(7, request_152(this, false, "A1E9452E6C489937DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rb/3w/cj,nj/d77a5b8b/4d9d0761.js?bu=A_8E6AeEBQ",	"/rb/3w/cj,nj/d77a5b8b/4d9d0761.js?bu=A_8E6AeEBQ", true, false), 1713, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(5, request_153(this, false, "A1E9452E6C462853DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rb/3w/cj,nj/4c481e81/84e9f85a.js?bu=Gv8EuAW-BdYFwQXEBccFygXNBdAF2gXdBeAF4wXmBewF6QXvBfIF9QX4BfsF_gWBBrsFhAU",	"/rb/3w/cj,nj/4c481e81/84e9f85a.js?bu=Gv8EuAW-BdYFwQXEBccFygXNBdAF2gXdBeAF4wXmBewF6QXvBfIF9QX4BfsF_gWBBrsFhAU", true, false), 1715, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(8, request_154(this, false, "A1E9452E6C48E712DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rb/3w/cj,nj/36408ab3/2d96b04c.js?bu=BP8ExgajBoQF",	"/rb/3w/cj,nj/36408ab3/2d96b04c.js?bu=BP8ExgajBoQF", true, false), 1716, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(3, request_155(this, false, "A1E9452E6C3F23A0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rb/3w/cj,nj/6ec9d678/fff9e285.js?bu=A_8E7QeEBQ",	"/rb/3w/cj,nj/6ec9d678/fff9e285.js?bu=A_8E7QeEBQ", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(7, request_156(this, false, "A1E9452E6C489937DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rb/3w/cj,nj/03aeead3/3bd69f34.js?bu=BP8E7wTsAYQF",	"/rb/3w/cj,nj/03aeead3/3bd69f34.js?bu=BP8E7wTsAYQF", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(2, request_157(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rb/3w/cir2,cc,nc/afc7215e/9ce8004e.css?bu=Ac8G",	"/rb/3w/cir2,cc,nc/afc7215e/9ce8004e.css?bu=Ac8G", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(6, request_158(this, false, "A1E9452E6C487242DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rb/3w/cj,nj/f7991a6e/b74e3bb8.js?bu=BP8ExgbJBoQF",	"/rb/3w/cj,nj/f7991a6e/b74e3bb8.js?bu=BP8ExgbJBoQF", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(8, request_159(this, false, "A1E9452E6C48E712DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rb/3w/cj,nj/c614cc0f/b609328b.js?bu=A_8E7AaEBQ",	"/rb/3w/cj,nj/c614cc0f/b609328b.js?bu=A_8E7AaEBQ", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(5, request_160(this, false, "A1E9452E6C462853DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/3w/3G/cir2,cc,nc/7ffd5cb0/18034820.css",	"/rs/3w/3G/cir2,cc,nc/7ffd5cb0/18034820.css", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(16, request_161(this, false, "A1E9452E6C5235E4DFEAE23864643438", true, false,
						"Config_13", "tse1.mm.bing.net:443/th?id=OIP.mIdRA-w2X-kEIEhlIs002QHaEn&w=127&h=79&c=8&rs=1&qlt=90&pid=3.1&rm=2",	"/th?id=OIP.mIdRA-w2X-kEIEhlIs002QHaEn&w=127&h=79&c=8&rs=1&qlt=90&pid=3.1&rm=2", true, false), 1, 100, "A1E9452E6C4F0183DFEAE23864643438", 3);
				httpParallel.addRequest(17, request_162(this, false, "A1E9452E6C52364EDFEAE23864643438", true, false,
						"Config_13", "tse1.mm.bing.net:443/th?id=OIP.xQG_9Lui2QvGy3I_2hZx1gHaEK&w=126&h=69&c=8&rs=1&qlt=90&pid=3.1&rm=2",	"/th?id=OIP.xQG_9Lui2QvGy3I_2hZx1gHaEK&w=126&h=69&c=8&rs=1&qlt=90&pid=3.1&rm=2", true, false), 1, 100, "A1E9452E6C4F0183DFEAE23864643438", 3);
				httpParallel.addRequest(18, request_163(this, false, "A1E9452E6C525D34DFEAE23864643438", true, false,
						"Config_13", "tse1.mm.bing.net:443/th?id=AMMS_ad7920f61b3cb598c84b0f1463646955&w=149&h=149&c=8&rs=1&o=5&pid=3.1&rm=2",	"/th?id=AMMS_ad7920f61b3cb598c84b0f1463646955&w=149&h=149&c=8&rs=1&o=5&pid=3.1&rm=2", true, false), 1, 100, "A1E9452E6C4F0183DFEAE23864643438", 3);
				httpParallel.addRequest(2, request_164(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/s/local/map/152.png",	"/s/local/map/152.png", true, false), 2121, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(19, request_165(this, false, "A1E9452E6C436927DFEAE23864643438", true, false,
						"Config_11", "browser.pipe.aria.microsoft.com:443/Collector/3.0/?qsp=true&content-type=application%2Fbond-compact-binary&client-id=NO_AUTH&sdk-version=AWT-Web-CJS-1.2.0&x-apikey=fcd159465f4e485999709a9bdc06df2f-f8afad8d-abb3-4281-9d86-d0ba5712a207-7461",	"/Collector/3.0/?qsp=true&content-type=application%2Fbond-compact-binary&client-id=NO_AUTH&sdk-version=AWT-Web-CJS-1.2.0&x-apikey=fcd159465f4e485999709a9bdc06df2f-f8afad8d-abb3-4281-9d86-d0ba5712a207-7461", true, false), 16, 100, "A1E9452E6C5235F2DFEAE23864643438", 3);
				httpParallel.addRequest(6, request_166(this, false, "A1E9452E6C487242DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/3w/e5/cir2,cc,nc/8a838b08/8f6e81e0.css",	"/rs/3w/e5/cir2,cc,nc/8a838b08/8f6e81e0.css", true, false), 2121, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(7, request_167(this, false, "A1E9452E6C489937DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rb/3w/cj,nj/8912c35e/1b97abcf.js?bu=A_8E5AaEBQ",	"/rb/3w/cj,nj/8912c35e/1b97abcf.js?bu=A_8E5AaEBQ", true, false), 2122, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(20, request_168(this, false, "A1E9452E6C52F923DFEAE23864643438", true, false,
						"Config_13", "tse1.mm.bing.net:443/th?id=OIP.E0UKs33wakNQ4cc9gknp8QHaFj&w=106&h=79&c=8&rs=1&qlt=90&pid=3.1&rm=2",	"/th?id=OIP.E0UKs33wakNQ4cc9gknp8QHaFj&w=106&h=79&c=8&rs=1&qlt=90&pid=3.1&rm=2", true, false), 1, 100, "A1E9452E6C4F0183DFEAE23864643438", 3);
				httpParallel.addRequest(21, request_169(this, false, "A1E9452E6C52F988DFEAE23864643438", true, false,
						"Config_13", "tse1.mm.bing.net:443/th?id=OIP.8V11dFtiXu_7X2Zt1BoqpAHaE6&w=107&h=69&c=8&rs=1&qlt=90&pid=3.1&rm=2",	"/th?id=OIP.8V11dFtiXu_7X2Zt1BoqpAHaE6&w=107&h=69&c=8&rs=1&qlt=90&pid=3.1&rm=2", true, false), 1, 100, "A1E9452E6C4F0183DFEAE23864643438", 3);
				httpParallel.addRequest(2, request_170(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/maps/geotfe/comp/stl?v=7.51&tpp=097A0D85-2585-425A-8471-60BDD3C5B7C3&og=395",	"/maps/geotfe/comp/stl?v=7.51&tpp=097A0D85-2585-425A-8471-60BDD3C5B7C3&og=395", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(7, request_171(this, false, "A1E9452E6C489937DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rb/3w/cj,nj/41431081/988eef58.js?bu=BP8E1ge2B4QF",	"/rb/3w/cj,nj/41431081/988eef58.js?bu=BP8E1ge2B4QF", true, false), 2194, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(8, request_172(this, false, "A1E9452E6C48E712DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/3w/f2/cir2,cc,nc/87829f90/c84780f7.css",	"/rs/3w/f2/cir2,cc,nc/87829f90/c84780f7.css", true, false), 2194, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(5, request_173(this, false, "A1E9452E6C462853DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/3w/2l/cir2,cc,nc/07db18be/94ade61b.css",	"/rs/3w/2l/cir2,cc,nc/07db18be/94ade61b.css", true, false), 2195, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(6, request_174(this, false, "A1E9452E6C487242DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/3w/fT/cir2,cc,nc/e769af7f/e35be57d.css",	"/rs/3w/fT/cir2,cc,nc/e769af7f/e35be57d.css", true, false), 2196, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(3, request_175(this, false, "A1E9452E6C3F23A0DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rb/3w/cj,nj/eb872500/85d76235.js?bu=A_8E8geEBQ",	"/rb/3w/cj,nj/eb872500/85d76235.js?bu=A_8E8geEBQ", true, false), 2196, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(5, request_176(this, false, "A1E9452E6C462853DFEAE23864643438", true, false,
						"Config_9", "www.bing.com:443/rs/3w/sE/cir2,cc,nc/836ee779/08937119.css",	"/rs/3w/sE/cir2,cc,nc/836ee779/08937119.css", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(2, request_177(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rb/3w/cj,nj/563ec155/d368c026.js?bu=BP8ElAeXB4QF",	"/rb/3w/cj,nj/563ec155/d368c026.js?bu=BP8ElAeXB4QF", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(8, request_178(this, false, "A1E9452E6C48E712DFEAE23864643438", true, false,
						"Config_9", "www.bing.com:443/rb/3w/cj,nj/f034e591/b231eaf4.js?bu=A_8E7Q2EBQ",	"/rb/3w/cj,nj/f034e591/b231eaf4.js?bu=A_8E7Q2EBQ", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(22, request_179(this, false, "A1E9452E6C5F5533DFEAE23864643438", true, false,
						"Config_14", "t1.ssl.ak.dynamic.tiles.virtualearth.net:443/comp/ch/0230102213?mkt=en-US&it=G,OBX,RL&shading=hill&n=z&og=395&c4w=1&osm=1",	"/comp/ch/0230102213?mkt=en-US&it=G,OBX,RL&shading=hill&n=z&og=395&c4w=1&osm=1", true, false), 309, 100, "A1E9452E6C520EC3DFEAE23864643438", 3);
				httpParallel.addRequest(23, request_180(this, false, "A1E9452E6C5F7C4BDFEAE23864643438", true, false,
						"Config_15", "t0.ssl.ak.dynamic.tiles.virtualearth.net:443/comp/ch/0230102302?mkt=en-US&it=G,OBX,RL&shading=hill&n=z&og=395&c4w=1&osm=1",	"/comp/ch/0230102302?mkt=en-US&it=G,OBX,RL&shading=hill&n=z&og=395&c4w=1&osm=1", true, false), 6, 100, "A1E9452E6C52D239DFEAE23864643438", 3);
				httpParallel.addRequest(24, request_181(this, false, "A1E9452E6C5FA353DFEAE23864643438", true, false,
						"Config_15", "t0.ssl.ak.dynamic.tiles.virtualearth.net:443/comp/ch/0230102300?mkt=en-US&it=G,OBX,RL&shading=hill&n=z&og=395&c4w=1&osm=1",	"/comp/ch/0230102300?mkt=en-US&it=G,OBX,RL&shading=hill&n=z&og=395&c4w=1&osm=1", true, false), 3, 100, "A1E9452E6C52D239DFEAE23864643438", 3);
				httpParallel.addRequest(25, request_182(this, false, "A1E9452E6C5FCA7FDFEAE23864643438", true, false,
						"Config_14", "t1.ssl.ak.dynamic.tiles.virtualearth.net:443/comp/ch/0230102301?mkt=en-US&it=G,OBX,RL&shading=hill&n=z&og=395&c4w=1&osm=1",	"/comp/ch/0230102301?mkt=en-US&it=G,OBX,RL&shading=hill&n=z&og=395&c4w=1&osm=1", true, false), 1, 100, "A1E9452E6C525D42DFEAE23864643438", 3);
				httpParallel.addRequest(2, request_183(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/maps/geotfe/comp/stl?v=7.51&og=395&idx=2,504,530,589,623,624,626,627,628,629&oidjs=",	"/maps/geotfe/comp/stl?v=7.51&og=395&idx=2,504,530,589,623,624,626,627,628,629&oidjs=", true, false), 2625, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(6, request_184(this, false, "A1E9452E6C487242DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/fd/ls/GLinkPingPost.aspx?IG=ABEFCF399B024C59A5650E5542EA4116&ID=SERP,5158.1&url=https%3A%2F%2Fwww.oracle.com%2Findex.html",	"/fd/ls/GLinkPingPost.aspx?IG=ABEFCF399B024C59A5650E5542EA4116&ID=SERP,5158.1&url=https%3A%2F%2Fwww.oracle.com%2Findex.html", true, false), 2641, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(26, request_185(this, false, "A1E9452E6C603FAFDFEAE23864643438", true, false,
						"Config_14", "t1.ssl.ak.dynamic.tiles.virtualearth.net:443/comp/ch/0230102211?mkt=en-US&it=G,OBX,RL&shading=hill&n=z&og=395&c4w=1&osm=1",	"/comp/ch/0230102211?mkt=en-US&it=G,OBX,RL&shading=hill&n=z&og=395&c4w=1&osm=1", true, false), 309, 100, "A1E9452E6C520EC3DFEAE23864643438", 3);
				httpParallel.addRequest(1, request_186(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/moeb/service/com.ibm.rational.test.rtw.webgui.service.IWebGuiRecorderService?action=hasAnyClientTask&client_task={%22activeTabsInfo%22:[{%22url_kind%22:%22https%3A%2F%2Fwww.bing.com%2F%3FtoWww%3D1%26redig%3D9D91A578CC134FFBB3C8E6C37F8D0373%22,%22browser_type%22:%22Firefox%22,%22unique_id%22:1}]}",	"/moeb/service/com.ibm.rational.test.rtw.webgui.service.IWebGuiRecorderService?action=hasAnyClientTask&client_task={%22activeTabsInfo%22:[{%22url_kind%22:%22https%3A%2F%2Fwww.bing.com%2F%3FtoWww%3D1%26redig%3D9D91A578CC134FFBB3C8E6C37F8D0373%22,%22browser_type%22:%22Firefox%22,%22unique_id%22:1}]}", true, false), 37, 100, "A1E9452E6C6018CBDFEAE23864643438", 3);
				httpParallel.addRequest(7, request_187(this, false, "A1E9452E6C489937DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rb/3w/cj,nj/0c2583a1/a00804eb.js?bu=BP8EwA7DDoQF",	"/rb/3w/cj,nj/0c2583a1/a00804eb.js?bu=BP8EwA7DDoQF", true, false), 2712, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(6, request_188(this, false, "A1E9452E6C487242DFEAE23864643438", true, false,
						"Config_9", "www.bing.com:443/rs/3w/uc/cir2,cc,nc/80d2c614/b22788fd.css",	"/rs/3w/uc/cir2,cc,nc/80d2c614/b22788fd.css", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(2, request_189(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/rs/3w/uX/cir2,cc,nc/87e5007d/ad1e6fcc.css",	"/rs/3w/uX/cir2,cc,nc/87e5007d/ad1e6fcc.css", true, false), 2716, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(7, request_190(this, false, "A1E9452E6C489937DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/fd/ls/lsp.aspx?",	"/fd/ls/lsp.aspx?", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(2, request_191(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/fd/ls/lsp.aspx",	"/fd/ls/lsp.aspx", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(2, request_192(this, false, "A1E9452E6C3F7164DFEAE23864643438", false, false,
						"Config_9", "www.bing.com:443/fd/ls/lsp.aspx",	"/fd/ls/lsp.aspx", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(7, request_193(this, false, "A1E9452E6C489937DFEAE23864643438", true, false,
						"Config_9", "www.bing.com:443/fd/ls/lsp.aspx",	"/fd/ls/lsp.aspx", true, false), 2855, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(3, request_194(this, false, "A1E9452E6C3F23A0DFEAE23864643438", true, false,
						"Config_9", "www.bing.com:443/fd/ls/lsp.aspx",	"/fd/ls/lsp.aspx", true, false), 2856, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(27, request_195(this, false, "A1E9452E6C619F3BDFEAE23864643438", true, false,
						"Config_16", "dev.virtualearth.net:443/REST/V1/Imagery/Copyright/en-US/RoadOnDemand/10/37.36396009145011/-122.52881622314455/37.56017037416626/-121.69385528564455?output=json&dir=0&jsonp=Microsoft.Maps.NetworkCallbacks.normal&jsonso=92556&key=AtHG8PScJMCB6pznW5Ze0yTfRjvOKQLdgumFtDrYNr_M0pmlPmeOoPjVLoZ6zwt3&ml=B,OBX",	"/REST/V1/Imagery/Copyright/en-US/RoadOnDemand/10/37.36396009145011/-122.52881622314455/37.56017037416626/-121.69385528564455?output=json&dir=0&jsonp=Microsoft.Maps.NetworkCallbacks.normal&jsonso=92556&key=AtHG8PScJMCB6pznW5Ze0yTfRjvOKQLdgumFtDrYNr_M0pmlPmeOoPjVLoZ6zwt3&ml=B,OBX", true, false), 45, 100, "A1E9452E6C60DBDBDFEAE23864643438", 3);
				httpParallel.addRequest(2, request_196(this, false, "A1E9452E6C3F7164DFEAE23864643438", true, false,
						"Config_9", "www.bing.com:443/fd/ls/lsp.aspx?",	"/fd/ls/lsp.aspx?", true, false), 3062, 100, "A1E9452E6C44A1B4DFEAE23864643438", 2);
				httpParallel.addRequest(28, request_197(this, false, "A1E9452E6C61ED40DFEAE23864643438", false, true,
						"Config_17", "www.oracle.com:443/index.html",	"/index.html", true, false), 55, 100, "A1E9452E6C619F49DFEAE23864643438", 3);
				httpParallel.addRequest(28, request_198(this, false, "A1E9452E6C61ED40DFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/asset/web/js/jquery-min.js",	"/asset/web/js/jquery-min.js", true, false), 85, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(29, request_199(this, false, "A1E9452E6C62B090DFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/a/ocom/img/cb50-mcx-2019.jpg",	"/a/ocom/img/cb50-mcx-2019.jpg", true, false), 94, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(30, request_200(this, false, "A1E9452E6C62B10DDFEAE23864643438", false, false,
						"Config_18", "assets.adobedtm.com:443/6f37a0dc9cdbe818dc4979828b58b88e3f060ea4/satelliteLib-e598c5b61e39a10b402e048e87dd27b0f1cd2d4c.js",	"/6f37a0dc9cdbe818dc4979828b58b88e3f060ea4/satelliteLib-e598c5b61e39a10b402e048e87dd27b0f1cd2d4c.js", true, false), 155, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(31, request_201(this, false, "A1E9452E6C634CD3DFEAE23864643438", false, false,
						"Config_19", "consent.truste.com:443/notice?domain=oracle.com&c=teconsent&js=bb&noticeType=bb&text=true&gtm=1",	"/notice?domain=oracle.com&c=teconsent&js=bb&noticeType=bb&text=true&gtm=1", true, false), 101, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(32, request_202(this, false, "A1E9452E6C634D4DDFEAE23864643438", false, false,
						"Config_20", "service.maxymiser.net:443/cdn/oracle/js/mmcore.js",	"/cdn/oracle/js/mmcore.js", true, false), 649, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(32, request_203(this, false, "A1E9452E6C634D4DDFEAE23864643438", false, false,
						"Config_20", "service.maxymiser.net:443/cg/v5us/?fv=dmn%3Doracle.com%3Bref%3Dhttps%253A%252F%252Fwww.bing.com%252F%3Burl%3Dhttps%253A%252F%252Fwww.oracle.com%252Findex.html%3Bscrw%3D1920%3Bscrh%3D1080%3Bclrd%3D24%3Bcok%3D1&lver=1.12&jsncl=mmRequestCallbacks%5B1%5D&ri=1&lto=-240&uat=SourceParam%3Dunknown",	"/cg/v5us/?fv=dmn%3Doracle.com%3Bref%3Dhttps%253A%252F%252Fwww.bing.com%252F%3Burl%3Dhttps%253A%252F%252Fwww.oracle.com%252Findex.html%3Bscrw%3D1920%3Bscrh%3D1080%3Bclrd%3D24%3Bcok%3D1&lver=1.12&jsncl=mmRequestCallbacks%5B1%5D&ri=1&lto=-240&uat=SourceParam%3Dunknown", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(32, request_204(this, false, "A1E9452E6C634D4DDFEAE23864643438", true, false,
						"Config_20", "service.maxymiser.net:443/platform/us/api/mmpackage-1.13.js",	"/platform/us/api/mmpackage-1.13.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(29, request_205(this, false, "A1E9452E6C62B090DFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/a/ocom/img/hp10p4-autonomous-cloud-site.jpg",	"/a/ocom/img/hp10p4-autonomous-cloud-site.jpg", true, false), 1037, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(28, request_206(this, false, "A1E9452E6C61ED40DFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/asset/web/css/home-v4-base.css",	"/asset/web/css/home-v4-base.css", true, false), 1066, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(1, request_207(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 132, 100, "A1E9452E6C63C202DFEAE23864643438", 3);
				httpParallel.addRequest(1, request_208(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(29, request_209(this, false, "A1E9452E6C62B090DFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/asset/web/js/ocom-home-v4.js",	"/asset/web/js/ocom-home-v4.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(28, request_210(this, false, "A1E9452E6C61ED40DFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/asset/web/fonts/oracleicons-v30.woff2?17.5.0",	"/asset/web/fonts/oracleicons-v30.woff2?17.5.0", true, false), 107, 100, "A1E9452E6C645E43DFEAE23864643438", 2);
				httpParallel.addRequest(33, request_211(this, false, "A1E9452E6C674473DFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/asset/web/css/home-v4-styles.css",	"/asset/web/css/home-v4-styles.css", true, false), 1074, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(34, request_212(this, false, "A1E9452E6C679293DFEAE23864643438", true, false,
						"Config_21", "consent.trustarc.com:443/asset/notice.js/v/v1.7-152",	"/asset/notice.js/v/v1.7-152", true, false), 819, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(35, request_213(this, false, "A1E9452E6C67E0E3DFEAE23864643438", false, false,
						"Config_22", "www.oracleimg.com:443/us/assets/metrics/ora_ocom_hp.js",	"/us/assets/metrics/ora_ocom_hp.js", true, false), 1176, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(36, request_214(this, false, "A1E9452E6C6855E3DFEAE23864643438", true, false,
						"Config_23", "s.go-mpulse.net:443/boomerang/DXNLE-YBWWY-AR74T-WMD99-77VRA",	"/boomerang/DXNLE-YBWWY-AR74T-WMD99-77VRA", true, false), 1195, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(29, request_215(this, false, "A1E9452E6C62B090DFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/favicon.ico",	"/favicon.ico", true, false), 4, 100, "A1E9452E6C67E0F1DFEAE23864643438", 3);
				httpParallel.addRequest(30, request_216(this, false, "A1E9452E6C62B10DDFEAE23864643438", false, false,
						"Config_18", "assets.adobedtm.com:443/6f37a0dc9cdbe818dc4979828b58b88e3f060ea4/scripts/satellite-58f99cfe64746d198e008eb2.js",	"/6f37a0dc9cdbe818dc4979828b58b88e3f060ea4/scripts/satellite-58f99cfe64746d198e008eb2.js", true, false), 1532, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(33, request_217(this, false, "A1E9452E6C674473DFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/a/ocom/img/hp10p2-autonomous-db-dummies.jpg",	"/a/ocom/img/hp10p2-autonomous-db-dummies.jpg", true, false), 1624, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(29, request_218(this, false, "A1E9452E6C62B090DFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/a/ocom/img/hp10p4-kpmg-cloud-threat-report.jpg",	"/a/ocom/img/hp10p4-kpmg-cloud-threat-report.jpg", true, false), 1625, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(28, request_219(this, false, "A1E9452E6C61ED40DFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/a/ocom/img/hp10p2-cloud-trial-test-drive.jpg",	"/a/ocom/img/hp10p2-cloud-trial-test-drive.jpg", true, false), 1625, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(37, request_220(this, false, "A1E9452E6C6A51B0DFEAE23864643438", false, false,
						"Config_18", "assets.adobedtm.com:443/6f37a0dc9cdbe818dc4979828b58b88e3f060ea4/scripts/satellite-5b9beb9864746d1f4e0012f1.js",	"/6f37a0dc9cdbe818dc4979828b58b88e3f060ea4/scripts/satellite-5b9beb9864746d1f4e0012f1.js", true, false), 1533, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(29, request_221(this, false, "A1E9452E6C62B090DFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/a/ocom/img/cw58-java-logo.jpg",	"/a/ocom/img/cw58-java-logo.jpg", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(33, request_222(this, false, "A1E9452E6C674473DFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/a/ocom/img/cw58-database-cloud.jpg",	"/a/ocom/img/cw58-database-cloud.jpg", true, false), 1738, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(28, request_223(this, false, "A1E9452E6C61ED40DFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/a/ocom/img/cw58-try-cloud-platform.jpg",	"/a/ocom/img/cw58-try-cloud-platform.jpg", true, false), 1739, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(38, request_224(this, false, "A1E9452E6C6AC71BDFEAE23864643438", true, false,
						"Config_18", "assets.adobedtm.com:443/6f37a0dc9cdbe818dc4979828b58b88e3f060ea4/scripts/satellite-5919e65464746d1994013896.js",	"/6f37a0dc9cdbe818dc4979828b58b88e3f060ea4/scripts/satellite-5919e65464746d1994013896.js", true, false), 1532, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(39, request_225(this, false, "A1E9452E6C6AEE58DFEAE23864643438", false, false,
						"Config_18", "assets.adobedtm.com:443/6f37a0dc9cdbe818dc4979828b58b88e3f060ea4/scripts/satellite-5b61f22a64746d2170002400.js",	"/6f37a0dc9cdbe818dc4979828b58b88e3f060ea4/scripts/satellite-5b61f22a64746d2170002400.js", true, false), 1532, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(40, request_226(this, false, "A1E9452E6C6B153FDFEAE23864643438", true, false,
						"Config_18", "assets.adobedtm.com:443/6f37a0dc9cdbe818dc4979828b58b88e3f060ea4/scripts/satellite-5b634aa964746d11bf000172.js",	"/6f37a0dc9cdbe818dc4979828b58b88e3f060ea4/scripts/satellite-5b634aa964746d11bf000172.js", true, false), 1532, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(28, request_227(this, false, "A1E9452E6C61ED40DFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/asset/web/js/ocom-handlebars.js",	"/asset/web/js/ocom-handlebars.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(41, request_228(this, false, "A1E9452E6C6B8A86DFEAE23864643438", true, false,
						"Config_17", "www.oracle.com:443/asset/web/i/w01-loader.gif",	"/asset/web/i/w01-loader.gif", true, false), 539, 100, "A1E9452E6C645E43DFEAE23864643438", 2);
				httpParallel.addRequest(42, request_229(this, false, "A1E9452E6C6BB18DDFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/a/ocom/img/hp10p4-mbx-flo-and-elle.jpg",	"/a/ocom/img/hp10p4-mbx-flo-and-elle.jpg", true, false), 1624, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(33, request_230(this, false, "A1E9452E6C674473DFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/universal-menu/index.html",	"/universal-menu/index.html", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(33, request_231(this, false, "A1E9452E6C674473DFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/universal-menu/",	"/universal-menu/", true, false), 1893, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(43, request_232(this, false, "A1E9452E6C6CC2B3DFEAE23864643438", true, false,
						"Config_17", "www.oracle.com:443/visitorinfo/",	"/visitorinfo/", true, false), 1825, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(42, request_233(this, false, "A1E9452E6C6BB18DDFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/a/ocom/docs/global-json/feature-banner-content.json",	"/a/ocom/docs/global-json/feature-banner-content.json", true, false), 2041, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(42, request_234(this, false, "A1E9452E6C6BB18DDFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/pdit-locale-map.json",	"/pdit-locale-map.json", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(44, request_235(this, false, "A1E9452E6C6D112CDFEAE23864643438", false, false,
						"Config_24", "sc60032181us1.cobrowse.oraclecloud.com:443/launcher.js?_=1552440108668",	"/launcher.js?_=1552440108668", true, false), 2052, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(45, request_236(this, false, "A1E9452E6C6D5EF3DFEAE23864643438", false, false,
						"Config_25", "img03.en25.com:443/i/elqCfg.min.js",	"/i/elqCfg.min.js", true, false), 2191, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(1, request_237(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/moeb/service/com.ibm.rational.test.rtw.webgui.service.IWebGuiRecorderService?action=hasAnyClientTask&client_task={%22activeTabsInfo%22:[{%22url_kind%22:%22https%3A%2F%2Fwww.bing.com%2Fsearch%3Fq%3Doracle%2Bcorporation%26filters%3Dufn%253a%2522oracle%2Bcorporation%2522%2Bsid%253a%2522cafb5c69-0d68-2211-85a0-3067c643f408%2522%26qs%3DMB%26pq%3Doracle%26sc%3D6-6%26cvid%3D82B4606677674CB69316BA598CA7F43D%26FORM%3DQBLH%26sp%3D1%22,%22browser_type%22:%22Firefox%22,%22unique_id%22:1}]}",	"/moeb/service/com.ibm.rational.test.rtw.webgui.service.IWebGuiRecorderService?action=hasAnyClientTask&client_task={%22activeTabsInfo%22:[{%22url_kind%22:%22https%3A%2F%2Fwww.bing.com%2Fsearch%3Fq%3Doracle%2Bcorporation%26filters%3Dufn%253a%2522oracle%2Bcorporation%2522%2Bsid%253a%2522cafb5c69-0d68-2211-85a0-3067c643f408%2522%26qs%3DMB%26pq%3Doracle%26sc%3D6-6%26cvid%3D82B4606677674CB69316BA598CA7F43D%26FORM%3DQBLH%26sp%3D1%22,%22browser_type%22:%22Firefox%22,%22unique_id%22:1}]}", true, false), 11, 100, "A1E9452E6C6D5F01DFEAE23864643438", 3);
				httpParallel.addRequest(46, request_238(this, false, "A1E9452E6C6D8647DFEAE23864643438", false, false,
						"Config_26", "oracle.112.2o7.net:443/b/ss/oraclecom,oracleglobal/1/JS-2.6.0/s48233969534994?AQB=1&ndh=1&pf=1&t=12%2F2%2F2019%2021%3A21%3A50%202%20240&fid=0776EEBEAB84E1A0-3748B6F459572DD2&ce=UTF-8&ns=oracle&pageName=ocom%3Aen-us%3A%2F&g=https%3A%2F%2Fwww.oracle.com%2Findex.html&r=https%3A%2F%2Fwww.bing.com%2F&cc=USD&ch=ocom%3Aen-us%3A%2F&h3=D%3DpageName&c20=D%3Dv20&v20=New&c24=D%3Dv24&v24=no%20value&c26=D%3Dv26&v26=ocom%3Aen&c38=D%3DpageName&c39=D%3DpageName&c50=D%3Ds_vi&v50=D%3Ds_vi&c51=ora_code%3A1.72%3AJS%202.6.0%3Aocom%3A3.79&v51=D%3DpageName&v52=https%3A%2F%2Fwww.oracle.com%2Findex.html&c54=D%3Dv54&v54=not%20logged%20in&c55=A&c62=NotSet&c67=0%7Eimplied%7ENoCookie&v70=NotSet&v71=NotSet&v72=NotSet&v73=NotSet&s=1920x1080&c=24&j=1.6&v=N&k=Y&bw=1195&bh=806&AQE=1",	"/b/ss/oraclecom,oracleglobal/1/JS-2.6.0/s48233969534994?AQB=1&ndh=1&pf=1&t=12%2F2%2F2019%2021%3A21%3A50%202%20240&fid=0776EEBEAB84E1A0-3748B6F459572DD2&ce=UTF-8&ns=oracle&pageName=ocom%3Aen-us%3A%2F&g=https%3A%2F%2Fwww.oracle.com%2Findex.html&r=https%3A%2F%2Fwww.bing.com%2F&cc=USD&ch=ocom%3Aen-us%3A%2F&h3=D%3DpageName&c20=D%3Dv20&v20=New&c24=D%3Dv24&v24=no%20value&c26=D%3Dv26&v26=ocom%3Aen&c38=D%3DpageName&c39=D%3DpageName&c50=D%3Ds_vi&v50=D%3Ds_vi&c51=ora_code%3A1.72%3AJS%202.6.0%3Aocom%3A3.79&v51=D%3DpageName&v52=https%3A%2F%2Fwww.oracle.com%2Findex.html&c54=D%3Dv54&v54=not%20logged%20in&c55=A&c62=NotSet&c67=0%7Eimplied%7ENoCookie&v70=NotSet&v71=NotSet&v72=NotSet&v73=NotSet&s=1920x1080&c=24&j=1.6&v=N&k=Y&bw=1195&bh=806&AQE=1", true, false), 2455, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(47, request_239(this, false, "A1E9452E6C6DAD4BDFEAE23864643438", false, false,
						"Config_27", "c.go-mpulse.net:443/api/config.json?key=DXNLE-YBWWY-AR74T-WMD99-77VRA&d=www.oracle.com&t=5174800&v=1.571.0&if=&sl=0&si=pm8zob2i6t9-NaN&plugins=AK,ConfigOverride,Continuity,PageParams,IFrameDelay,AutoXHR,SPA,Angular,Backbone,Ember,History,RT,CrossDomain,BW,PaintTiming,NavigationTiming,ResourceTiming,Memory,CACHE_RELOAD,Errors,TPAnalytics,UserTiming,LOGN&acao=",	"/api/config.json?key=DXNLE-YBWWY-AR74T-WMD99-77VRA&d=www.oracle.com&t=5174800&v=1.571.0&if=&sl=0&si=pm8zob2i6t9-NaN&plugins=AK,ConfigOverride,Continuity,PageParams,IFrameDelay,AutoXHR,SPA,Angular,Backbone,Ember,History,RT,CrossDomain,BW,PaintTiming,NavigationTiming,ResourceTiming,Memory,CACHE_RELOAD,Errors,TPAnalytics,UserTiming,LOGN&acao=", true, false), 2661, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(48, request_240(this, false, "A1E9452E6C6DD433DFEAE23864643438", false, false,
						"Config_28", "public.cobrowse.oraclecloud.com:443/rely/global_launcher.js",	"/rely/global_launcher.js", true, false), 2632, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(49, request_241(this, false, "A1E9452E6C6E2243DFEAE23864643438", true, false,
						"Config_29", "tags.bkrtx.com:443/js/bk-coretag.js",	"/js/bk-coretag.js", true, false), 2506, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(48, request_242(this, false, "A1E9452E6C6DD433DFEAE23864643438", false, false,
						"Config_28", "public.cobrowse.oraclecloud.com:443/rely/storage/ll_storage_html5.html?context=i7clemwq5b&version=20190111",	"/rely/storage/ll_storage_html5.html?context=i7clemwq5b&version=20190111", true, false), 2884, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(50, request_243(this, false, "A1E9452E6C6EBE83DFEAE23864643438", false, false,
						"Config_30", "tags.bluekai.com:443/site/46606?ret=js",	"/site/46606?ret=js", true, false), 2502, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(51, request_244(this, false, "A1E9452E6C6EE590DFEAE23864643438", false, false,
						"Config_31", "s1973398186.t.eloqua.com:443/visitor/v200/svrGP?pps=3&siteid=1973398186&ref2=https%3A%2F%2Fwww.bing.com%2F&tzo=300&ms=984&optin=disabled&firstPartyCookieDomain=go.oracle.com",	"/visitor/v200/svrGP?pps=3&siteid=1973398186&ref2=https%3A%2F%2Fwww.bing.com%2F&tzo=300&ms=984&optin=disabled&firstPartyCookieDomain=go.oracle.com", true, false), 2611, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(46, request_245(this, false, "A1E9452E6C6D8647DFEAE23864643438", true, false,
						"Config_26", "oracle.112.2o7.net:443/b/ss/oraclecom,oracleglobal/1/JS-2.6.0/s48233969534994?AQB=1&pccr=true&vidn=2E442D978507B665-6000011EA00379C5&&ndh=1&pf=1&t=12%2F2%2F2019%2021%3A21%3A50%202%20240&fid=0776EEBEAB84E1A0-3748B6F459572DD2&ce=UTF-8&ns=oracle&pageName=ocom%3Aen-us%3A%2F&g=https%3A%2F%2Fwww.oracle.com%2Findex.html&r=https%3A%2F%2Fwww.bing.com%2F&cc=USD&ch=ocom%3Aen-us%3A%2F&h3=D%3DpageName&c20=D%3Dv20&v20=New&c24=D%3Dv24&v24=no%20value&c26=D%3Dv26&v26=ocom%3Aen&c38=D%3DpageName&c39=D%3DpageName&c50=D%3Ds_vi&v50=D%3Ds_vi&c51=ora_code%3A1.72%3AJS%202.6.0%3Aocom%3A3.79&v51=D%3DpageName&v52=https%3A%2F%2Fwww.oracle.com%2Findex.html&c54=D%3Dv54&v54=not%20logged%20in&c55=A&c62=NotSet&c67=0%7Eimplied%7ENoCookie&v70=NotSet&v71=NotSet&v72=NotSet&v73=NotSet&s=1920x1080&c=24&j=1.6&v=N&k=Y&bw=1195&bh=806&AQE=1",	"/b/ss/oraclecom,oracleglobal/1/JS-2.6.0/s48233969534994?AQB=1&pccr=true&vidn=2E442D978507B665-6000011EA00379C5&&ndh=1&pf=1&t=12%2F2%2F2019%2021%3A21%3A50%202%20240&fid=0776EEBEAB84E1A0-3748B6F459572DD2&ce=UTF-8&ns=oracle&pageName=ocom%3Aen-us%3A%2F&g=https%3A%2F%2Fwww.oracle.com%2Findex.html&r=https%3A%2F%2Fwww.bing.com%2F&cc=USD&ch=ocom%3Aen-us%3A%2F&h3=D%3DpageName&c20=D%3Dv20&v20=New&c24=D%3Dv24&v24=no%20value&c26=D%3Dv26&v26=ocom%3Aen&c38=D%3DpageName&c39=D%3DpageName&c50=D%3Ds_vi&v50=D%3Ds_vi&c51=ora_code%3A1.72%3AJS%202.6.0%3Aocom%3A3.79&v51=D%3DpageName&v52=https%3A%2F%2Fwww.oracle.com%2Findex.html&c54=D%3Dv54&v54=not%20logged%20in&c55=A&c62=NotSet&c67=0%7Eimplied%7ENoCookie&v70=NotSet&v71=NotSet&v72=NotSet&v73=NotSet&s=1920x1080&c=24&j=1.6&v=N&k=Y&bw=1195&bh=806&AQE=1", true, false), 2944, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(1, request_246(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 28, 100, "A1E9452E6C6E7060DFEAE23864643438", 3);
				httpParallel.addRequest(52, request_247(this, false, "A1E9452E6C6F33B3DFEAE23864643438", false, false,
						"Config_32", "stags.bluekai.com:443/site/25867?ret=html&phint=contTop%3D&phint=contLang%3D&phint=prodInt%3D&phint=pgname%3D&phint=__bk_t%3DOracle%20%7C%20Integrated%20Cloud%20Applications%20and%20Platform%20Services&phint=__bk_k%3Denterprise%2C%20applications%2C%20software%2C%20database%2C%20middleware%2C%20fusions%2C%20business%2C%20hardware%2C%20Oracle&phint=__bk_pr%3Dhttps%3A%2F%2Fwww.bing.com%2F&phint=__bk_l%3Dhttps%3A%2F%2Fwww.oracle.com%2Findex.html&limit=1&r=11510850",	"/site/25867?ret=html&phint=contTop%3D&phint=contLang%3D&phint=prodInt%3D&phint=pgname%3D&phint=__bk_t%3DOracle%20%7C%20Integrated%20Cloud%20Applications%20and%20Platform%20Services&phint=__bk_k%3Denterprise%2C%20applications%2C%20software%2C%20database%2C%20middleware%2C%20fusions%2C%20business%2C%20hardware%2C%20Oracle&phint=__bk_pr%3Dhttps%3A%2F%2Fwww.bing.com%2F&phint=__bk_l%3Dhttps%3A%2F%2Fwww.oracle.com%2Findex.html&limit=1&r=11510850", true, false), 2973, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(53, request_248(this, false, "A1E9452E6C6F3435DFEAE23864643438", true, false,
						"Config_33", "go.oracle.com:443/visitor/v200/svrGP.aspx?pps=3&siteid=1973398186&ref2=https:%2F%2Fwww.bing.com%2F&tzo=300&ms=984&optin=disabled&elq1pcGUID=7C4027BB7E5E43E69317D065A3A647EC",	"/visitor/v200/svrGP.aspx?pps=3&siteid=1973398186&ref2=https:%2F%2Fwww.bing.com%2F&tzo=300&ms=984&optin=disabled&elq1pcGUID=7C4027BB7E5E43E69317D065A3A647EC", true, false), 3070, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(1, request_249(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 4, 100, "A1E9452E6C6F3443DFEAE23864643438", 3);
				httpParallel.addRequest(54, request_250(this, false, "A1E9452E6C6F81D3DFEAE23864643438", false, false,
						"Config_34", "36a3fec2.akstat.io:443/",	"/", true, false), 3377, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(1, request_251(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/moeb/service/com.ibm.rational.test.rtw.webgui.service.IWebGuiRecorderService?action=hasAnyClientTask&client_task={%22activeTabsInfo%22:[{%22url_kind%22:%22https%3A%2F%2Fwww.oracle.com%2Findex.html%22,%22browser_type%22:%22Firefox%22,%22unique_id%22:1}]}",	"/moeb/service/com.ibm.rational.test.rtw.webgui.service.IWebGuiRecorderService?action=hasAnyClientTask&client_task={%22activeTabsInfo%22:[{%22url_kind%22:%22https%3A%2F%2Fwww.oracle.com%2Findex.html%22,%22browser_type%22:%22Firefox%22,%22unique_id%22:1}]}", true, false), 1909, 100, "A1E9452E6C6F81E1DFEAE23864643438", 3);
				httpParallel.addRequest(1, request_252(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/moeb/service/com.ibm.rational.test.rtw.webgui.service.IWebGuiRecorderService?action=hasAnyClientTask&client_task={%22activeTabsInfo%22:[{%22url_kind%22:%22https%3A%2F%2Fwww.oracle.com%2Findex.html%22,%22browser_type%22:%22Firefox%22,%22unique_id%22:1}]}",	"/moeb/service/com.ibm.rational.test.rtw.webgui.service.IWebGuiRecorderService?action=hasAnyClientTask&client_task={%22activeTabsInfo%22:[{%22url_kind%22:%22https%3A%2F%2Fwww.oracle.com%2Findex.html%22,%22browser_type%22:%22Firefox%22,%22unique_id%22:1}]}", true, false), 3004, 100, "A1E9452E6C6F825EDFEAE23864643438", 3);
				httpParallel.addRequest(54, request_253(this, false, "A1E9452E6C6F81D3DFEAE23864643438", false, false,
						"Config_34", "36a3fec2.akstat.io:443/",	"/", true, false), 8742, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(28, request_254(this, false, "A1E9452E6C61ED40DFEAE23864643438", true, false,
						"Config_17", "www.oracle.com:443/downloads/",	"/downloads/", true, false), 8744, 100, "A1E9452E6C61ED4EDFEAE23864643438", 2);
				httpParallel.addRequest(35, request_255(this, false, "A1E9452E6C67E0E3DFEAE23864643438", false, false,
						"Config_22", "www.oracleimg.com:443/us/assets/metrics/ora_ocom.js",	"/us/assets/metrics/ora_ocom.js", true, false), 30, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(31, request_256(this, false, "A1E9452E6C634CD3DFEAE23864643438", true, false,
						"Config_19", "consent.truste.com:443/notice?domain=oracle.com&c=teconsent&js=bb&noticeType=bb&text=true&gtm=1",	"/notice?domain=oracle.com&c=teconsent&js=bb&noticeType=bb&text=true&gtm=1", true, false), 30, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(42, request_257(this, false, "A1E9452E6C6BB18DDFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/asset/web/css/ocom-v1-base.css",	"/asset/web/css/ocom-v1-base.css", true, false), 30, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(33, request_258(this, false, "A1E9452E6C674473DFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/asset/web/js/ocom-v1-lib.js",	"/asset/web/js/ocom-v1-lib.js", true, false), 57, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(29, request_259(this, false, "A1E9452E6C62B090DFEAE23864643438", false, false,
						"Config_17", "www.oracle.com:443/asset/web/js/ocom-v1-base.js",	"/asset/web/js/ocom-v1-base.js", true, false), 57, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(29, request_260(this, false, "A1E9452E6C62B090DFEAE23864643438", true, false,
						"Config_17", "www.oracle.com:443/a/ocom/img/cb88-software-delivery-cloud.png",	"/a/ocom/img/cb88-software-delivery-cloud.png", true, false), 431, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(33, request_261(this, false, "A1E9452E6C674473DFEAE23864643438", true, false,
						"Config_17", "www.oracle.com:443/a/ocom/img/obic-technology-cloud.svg",	"/a/ocom/img/obic-technology-cloud.svg", true, false), 432, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(35, request_262(this, false, "A1E9452E6C67E0E3DFEAE23864643438", true, false,
						"Config_22", "www.oracleimg.com:443/us/assets/metrics/ora_code_ocom.js",	"/us/assets/metrics/ora_code_ocom.js", true, false), 479, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(42, request_263(this, false, "A1E9452E6C6BB18DDFEAE23864643438", true, false,
						"Config_17", "www.oracle.com:443/asset/web/css/ocom-v1-styles.css",	"/asset/web/css/ocom-v1-styles.css", true, false), 505, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(1, request_264(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 21, 100, "A1E9452E6C732B5BDFEAE23864643438", 3);
				httpParallel.addRequest(47, request_265(this, false, "A1E9452E6C6DAD4BDFEAE23864643438", true, false,
						"Config_27", "c.go-mpulse.net:443/api/config.json?key=DXNLE-YBWWY-AR74T-WMD99-77VRA&d=www.oracle.com&t=5174800&v=1.571.0&if=&sl=1&si=0a8ed298-88bb-4c32-8e29-3e61c3a5ab58-poa6gc&bcn=%2F%2F36a3fec2.akstat.io%2F&plugins=AK,ConfigOverride,Continuity,PageParams,IFrameDelay,AutoXHR,SPA,Angular,Backbone,Ember,History,RT,CrossDomain,BW,PaintTiming,NavigationTiming,ResourceTiming,Memory,CACHE_RELOAD,Errors,TPAnalytics,UserTiming,LOGN&acao=",	"/api/config.json?key=DXNLE-YBWWY-AR74T-WMD99-77VRA&d=www.oracle.com&t=5174800&v=1.571.0&if=&sl=1&si=0a8ed298-88bb-4c32-8e29-3e61c3a5ab58-poa6gc&bcn=%2F%2F36a3fec2.akstat.io%2F&plugins=AK,ConfigOverride,Continuity,PageParams,IFrameDelay,AutoXHR,SPA,Angular,Backbone,Ember,History,RT,CrossDomain,BW,PaintTiming,NavigationTiming,ResourceTiming,Memory,CACHE_RELOAD,Errors,TPAnalytics,UserTiming,LOGN&acao=", true, false), 591, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(55, request_266(this, false, "A1E9452E6C7463FBDFEAE23864643438", true, false,
						"Config_22", "www.oracleimg.com:443/us/assets/metrics/ora_code.js",	"/us/assets/metrics/ora_code.js", true, false), 480, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(1, request_267(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 103, 100, "A1E9452E6C746409DFEAE23864643438", 3);
				httpParallel.addRequest(56, request_268(this, false, "A1E9452E6C74B240DFEAE23864643438", false, false,
						"Config_35", "ds-aksb-a.akamaihd.net:443/aksb.min.js",	"/aksb.min.js", true, false), 516, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(57, request_269(this, false, "A1E9452E6C74D93EDFEAE23864643438", true, false,
						"Config_26", "oracle.112.2o7.net:443/b/ss/oraclecom,oracleglobal/1/JS-2.6.0/s41479027298410?AQB=1&ndh=1&pf=1&t=12%2F2%2F2019%2021%3A21%3A57%202%20240&fid=0776EEBEAB84E1A0-3748B6F459572DD2&ce=UTF-8&ns=oracle&pageName=ocom%3Aen-us%3A%2Fdownloads%2F&g=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&r=https%3A%2F%2Fwww.oracle.com%2Findex.html&cc=USD&ch=ocom%3Aen-us%3A%2Fdownloads%2F&h3=D%3DpageName&c20=D%3Dv20&v20=New&c24=D%3Dv24&v24=https%3A%2F%2Fwww.oracle.com%2Findex.html&c26=D%3Dv26&v26=ocom%3Aen&c38=D%3DpageName&c39=D%3DpageName&c50=D%3Ds_vi&v50=D%3Ds_vi&c51=ora_code%3A1.72%3AJS%202.6.0%3Aocom%3A3.79&v51=D%3DpageName&v52=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&c54=D%3Dv54&v54=not%20logged%20in&c55=A&c62=NotSet&c64=D%3Dv64&v64=7C4027BB7E5E43E69317D065A3A647EC&c67=0%7Eimplied%7ENoCookie&v70=NotSet&v71=NotSet&v72=NotSet&v73=NotSet&s=1920x1080&c=24&j=1.6&v=N&k=Y&bw=1195&bh=806&AQE=1",	"/b/ss/oraclecom,oracleglobal/1/JS-2.6.0/s41479027298410?AQB=1&ndh=1&pf=1&t=12%2F2%2F2019%2021%3A21%3A57%202%20240&fid=0776EEBEAB84E1A0-3748B6F459572DD2&ce=UTF-8&ns=oracle&pageName=ocom%3Aen-us%3A%2Fdownloads%2F&g=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&r=https%3A%2F%2Fwww.oracle.com%2Findex.html&cc=USD&ch=ocom%3Aen-us%3A%2Fdownloads%2F&h3=D%3DpageName&c20=D%3Dv20&v20=New&c24=D%3Dv24&v24=https%3A%2F%2Fwww.oracle.com%2Findex.html&c26=D%3Dv26&v26=ocom%3Aen&c38=D%3DpageName&c39=D%3DpageName&c50=D%3Ds_vi&v50=D%3Ds_vi&c51=ora_code%3A1.72%3AJS%202.6.0%3Aocom%3A3.79&v51=D%3DpageName&v52=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&c54=D%3Dv54&v54=not%20logged%20in&c55=A&c62=NotSet&c64=D%3Dv64&v64=7C4027BB7E5E43E69317D065A3A647EC&c67=0%7Eimplied%7ENoCookie&v70=NotSet&v71=NotSet&v72=NotSet&v73=NotSet&s=1920x1080&c=24&j=1.6&v=N&k=Y&bw=1195&bh=806&AQE=1", true, false), 964, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(44, request_270(this, false, "A1E9452E6C6D112CDFEAE23864643438", true, false,
						"Config_24", "sc60032181us1.cobrowse.oraclecloud.com:443/launcher.js?_=1552440117270",	"/launcher.js?_=1552440117270", true, false), 1078, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(50, request_271(this, false, "A1E9452E6C6EBE83DFEAE23864643438", true, false,
						"Config_30", "tags.bluekai.com:443/site/46606?ret=js",	"/site/46606?ret=js", true, false), 1091, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(45, request_272(this, false, "A1E9452E6C6D5EF3DFEAE23864643438", true, false,
						"Config_25", "img03.en25.com:443/i/elqCfg.min.js",	"/i/elqCfg.min.js", true, false), 1092, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(51, request_273(this, false, "A1E9452E6C6EE590DFEAE23864643438", true, false,
						"Config_31", "s1973398186.t.eloqua.com:443/visitor/v200/svrGP?pps=3&siteid=1973398186&ref2=https%3A%2F%2Fwww.oracle.com%2Findex.html&tzo=300&ms=384&optin=disabled&firstPartyCookieDomain=go.oracle.com&elqGUID=7C4027BB7E5E43E69317D065A3A647EC",	"/visitor/v200/svrGP?pps=3&siteid=1973398186&ref2=https%3A%2F%2Fwww.oracle.com%2Findex.html&tzo=300&ms=384&optin=disabled&firstPartyCookieDomain=go.oracle.com&elqGUID=7C4027BB7E5E43E69317D065A3A647EC", true, false), 1177, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(52, request_274(this, false, "A1E9452E6C6F33B3DFEAE23864643438", true, false,
						"Config_32", "stags.bluekai.com:443/site/25867?ret=html&phint=contTop%3D&phint=contLang%3D&phint=prodInt%3D&phint=pgname%3D&phint=__bk_t%3DOracle%20Software%20Downloads%20%7C%20Oracle&phint=__bk_k%3DDownloads%2C%20java%20downloads&phint=__bk_pr%3Dhttps%3A%2F%2Fwww.oracle.com%2Findex.html&phint=__bk_l%3Dhttps%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&limit=1&r=54701339",	"/site/25867?ret=html&phint=contTop%3D&phint=contLang%3D&phint=prodInt%3D&phint=pgname%3D&phint=__bk_t%3DOracle%20Software%20Downloads%20%7C%20Oracle&phint=__bk_k%3DDownloads%2C%20java%20downloads&phint=__bk_pr%3Dhttps%3A%2F%2Fwww.oracle.com%2Findex.html&phint=__bk_l%3Dhttps%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&limit=1&r=54701339", true, false), 1182, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(48, request_275(this, false, "A1E9452E6C6DD433DFEAE23864643438", true, false,
						"Config_28", "public.cobrowse.oraclecloud.com:443/rely/storage/ll_storage_html5.html?context=b1ju0vgzeo9&version=20190111",	"/rely/storage/ll_storage_html5.html?context=b1ju0vgzeo9&version=20190111", true, false), 1193, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(1, request_276(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 17, 100, "A1E9452E6C7575AADFEAE23864643438", 3);
				httpParallel.addRequest(1, request_277(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 210, 100, "A1E9452E6C75EAA1DFEAE23864643438", 3);
				httpParallel.addRequest(39, request_278(this, false, "A1E9452E6C6AEE58DFEAE23864643438", true, false,
						"Config_18", "assets.adobedtm.com:443/6f37a0dc9cdbe818dc4979828b58b88e3f060ea4/scripts/satellite-5a057d3164746d2eb80054e1.js",	"/6f37a0dc9cdbe818dc4979828b58b88e3f060ea4/scripts/satellite-5a057d3164746d2eb80054e1.js", true, false), 1585, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(37, request_279(this, false, "A1E9452E6C6A51B0DFEAE23864643438", true, false,
						"Config_18", "assets.adobedtm.com:443/6f37a0dc9cdbe818dc4979828b58b88e3f060ea4/scripts/satellite-5be328f764746d415a004e59.js",	"/6f37a0dc9cdbe818dc4979828b58b88e3f060ea4/scripts/satellite-5be328f764746d415a004e59.js", true, false), 1586, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(30, request_280(this, false, "A1E9452E6C62B10DDFEAE23864643438", true, false,
						"Config_18", "assets.adobedtm.com:443/6f37a0dc9cdbe818dc4979828b58b88e3f060ea4/scripts/satellite-59b7994164746d5205007ad4.js",	"/6f37a0dc9cdbe818dc4979828b58b88e3f060ea4/scripts/satellite-59b7994164746d5205007ad4.js", true, false), 1587, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(54, request_281(this, false, "A1E9452E6C6F81D3DFEAE23864643438", false, false,
						"Config_34", "36a3fec2.akstat.io:443/",	"/", true, false), 1637, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(56, request_282(this, false, "A1E9452E6C74B240DFEAE23864643438", false, false,
						"Config_35", "ds-aksb-a.akamaihd.net:443/2/407454/b?dE=0&cS=0&cE=0&rqS=5&rsS=328&rsE=328&sS=-1&dl=336&di=348&fp=&dlS=348&dlE=351&dc=370&leS=370&leE=371&to=&ol=0&cr=5&mt=&mb=&b=2305&u=https%3A//public.cobrowse.oraclecloud.com/rely/storage/ll_storage_html5.html&ua=Mozilla/5.0%20%28X11%3B%20Linux%20x86_64%3B%20rv%3A65.0%29%20Gecko/20100101%20Firefox/65.0&pl=Linux%20x86_64&us=&gh=23.215.131.22&t=&rid=502e958b&r=26477&akM=x&akN=ae&vc=14:17&bpcip=c0081200&akTX=1&akTI=502e958b&ai=256201&pmgn=&pmgi=&pmp=",	"/2/407454/b?dE=0&cS=0&cE=0&rqS=5&rsS=328&rsE=328&sS=-1&dl=336&di=348&fp=&dlS=348&dlE=351&dc=370&leS=370&leE=371&to=&ol=0&cr=5&mt=&mb=&b=2305&u=https%3A//public.cobrowse.oraclecloud.com/rely/storage/ll_storage_html5.html&ua=Mozilla/5.0%20%28X11%3B%20Linux%20x86_64%3B%20rv%3A65.0%29%20Gecko/20100101%20Firefox/65.0&pl=Linux%20x86_64&us=&gh=23.215.131.22&t=&rid=502e958b&r=26477&akM=x&akN=ae&vc=14:17&bpcip=c0081200&akTX=1&akTI=502e958b&ai=256201&pmgn=&pmgi=&pmp=", true, false), 155, 100, "A1E9452E6C759C83DFEAE23864643438", 2);
				httpParallel.addRequest(56, request_283(this, false, "A1E9452E6C74B240DFEAE23864643438", true, false,
						"Config_35", "ds-aksb-a.akamaihd.net:443/2/82485/b?dE=0&cS=0&cE=0&rqS=4&rsS=58&rsE=60&sS=-12&dl=62&di=740&fp=&dlS=751&dlE=758&dc=1616&leS=1616&leE=1627&to=&ol=0&cr=9&mt=&mb=&b=257&u=https%3A//www.oracle.com/downloads/&ua=Mozilla/5.0%20%28X11%3B%20Linux%20x86_64%3B%20rv%3A65.0%29%20Gecko/20100101%20Firefox/65.0&pl=Linux%20x86_64&us=&gh=23.198.10.159&t=&rid=1c2a41b8&r=32986&akM=dscx&akN=ae&vc=14:17&bpcip=c0081200&akTX=1&akTI=1c2a41b8&ai=165266&pmgn=&pmgi=&pmp=",	"/2/82485/b?dE=0&cS=0&cE=0&rqS=4&rsS=58&rsE=60&sS=-12&dl=62&di=740&fp=&dlS=751&dlE=758&dc=1616&leS=1616&leE=1627&to=&ol=0&cr=9&mt=&mb=&b=257&u=https%3A//www.oracle.com/downloads/&ua=Mozilla/5.0%20%28X11%3B%20Linux%20x86_64%3B%20rv%3A65.0%29%20Gecko/20100101%20Firefox/65.0&pl=Linux%20x86_64&us=&gh=23.198.10.159&t=&rid=1c2a41b8&r=32986&akM=dscx&akN=ae&vc=14:17&bpcip=c0081200&akTX=1&akTI=1c2a41b8&ai=165266&pmgn=&pmgi=&pmp=", true, false), 1678, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(58, request_284(this, false, "A1E9452E6C76D522DFEAE23864643438", false, false,
						"Config_36", "www.googletagmanager.com:443/gtag/js?id=DC-3573281",	"/gtag/js?id=DC-3573281", true, false), 1651, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(59, request_285(this, false, "A1E9452E6C774A03DFEAE23864643438", true, false,
						"Config_37", "www.googleadservices.com:443/pagead/conversion_async.js",	"/pagead/conversion_async.js", true, false), 2150, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(60, request_286(this, false, "A1E9452E6C779827DFEAE23864643438", false, false,
						"Config_38", "googleads.g.doubleclick.net:443/pagead/viewthroughconversion/995449196/?random=1552440119590&cv=9&fst=1552440119590&num=1&bg=ffffff&guid=ON&resp=GooglemKTybQhCsO&u_h=1080&u_w=1920&u_ah=1018&u_aw=1920&u_cd=24&u_his=5&u_tz=-240&u_java=false&u_nplug=0&u_nmime=0&gtm=2od2q1&sendb=1&data=event%3Dgtag.config&frm=0&url=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&ref=https%3A%2F%2Fwww.oracle.com%2Findex.html&tiba=Oracle%20Software%20Downloads%20%7C%20Oracle&async=1&rfmt=3&fmt=4",	"/pagead/viewthroughconversion/995449196/?random=1552440119590&cv=9&fst=1552440119590&num=1&bg=ffffff&guid=ON&resp=GooglemKTybQhCsO&u_h=1080&u_w=1920&u_ah=1018&u_aw=1920&u_cd=24&u_his=5&u_tz=-240&u_java=false&u_nplug=0&u_nmime=0&gtm=2od2q1&sendb=1&data=event%3Dgtag.config&frm=0&url=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&ref=https%3A%2F%2Fwww.oracle.com%2Findex.html&tiba=Oracle%20Software%20Downloads%20%7C%20Oracle&async=1&rfmt=3&fmt=4", true, false), 2463, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(1, request_287(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/moeb/service/com.ibm.rational.test.rtw.webgui.service.IWebGuiRecorderService?action=hasAnyClientTask&client_task={%22activeTabsInfo%22:[{%22url_kind%22:%22https%3A%2F%2Fwww.oracle.com%2Findex.html%22,%22browser_type%22:%22Firefox%22,%22unique_id%22:1}]}",	"/moeb/service/com.ibm.rational.test.rtw.webgui.service.IWebGuiRecorderService?action=hasAnyClientTask&client_task={%22activeTabsInfo%22:[{%22url_kind%22:%22https%3A%2F%2Fwww.oracle.com%2Findex.html%22,%22browser_type%22:%22Firefox%22,%22unique_id%22:1}]}", true, false), 21, 100, "A1E9452E6C779835DFEAE23864643438", 3);
				httpParallel.addRequest(61, request_288(this, false, "A1E9452E6C77BF82DFEAE23864643438", false, false,
						"Config_8", "www.google.com:443/pagead/1p-user-list/995449196/?random=1552440119590&cv=9&fst=1552438800000&num=1&bg=ffffff&guid=ON&u_h=1080&u_w=1920&u_ah=1018&u_aw=1920&u_cd=24&u_his=5&u_tz=-240&u_java=false&u_nplug=0&u_nmime=0&gtm=2od2q1&sendb=1&data=event%3Dgtag.config&frm=0&url=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&ref=https%3A%2F%2Fwww.oracle.com%2Findex.html&tiba=Oracle%20Software%20Downloads%20%7C%20Oracle&async=1&fmt=3&cdct=2&is_vtc=1&random=2646317145&resp=GooglemKTybQhCsO&rmt_tld=0&ipr=y",	"/pagead/1p-user-list/995449196/?random=1552440119590&cv=9&fst=1552438800000&num=1&bg=ffffff&guid=ON&u_h=1080&u_w=1920&u_ah=1018&u_aw=1920&u_cd=24&u_his=5&u_tz=-240&u_java=false&u_nplug=0&u_nmime=0&gtm=2od2q1&sendb=1&data=event%3Dgtag.config&frm=0&url=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&ref=https%3A%2F%2Fwww.oracle.com%2Findex.html&tiba=Oracle%20Software%20Downloads%20%7C%20Oracle&async=1&fmt=3&cdct=2&is_vtc=1&random=2646317145&resp=GooglemKTybQhCsO&rmt_tld=0&ipr=y", true, false), 2703, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(62, request_289(this, false, "A1E9452E6C77E687DFEAE23864643438", true, false,
						"Config_39", "3573281.fls.doubleclick.net:443/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?",	"/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", true, false), 2726, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(63, request_290(this, false, "A1E9452E6C780D8DDFEAE23864643438", false, false,
						"Config_40", "www.google.com.my:443/pagead/1p-user-list/995449196/?random=1552440119590&cv=9&fst=1552438800000&num=1&bg=ffffff&guid=ON&u_h=1080&u_w=1920&u_ah=1018&u_aw=1920&u_cd=24&u_his=5&u_tz=-240&u_java=false&u_nplug=0&u_nmime=0&gtm=2od2q1&sendb=1&data=event%3Dgtag.config&frm=0&url=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&ref=https%3A%2F%2Fwww.oracle.com%2Findex.html&tiba=Oracle%20Software%20Downloads%20%7C%20Oracle&async=1&fmt=3&cdct=2&is_vtc=1&random=2646317145&resp=GooglemKTybQhCsO&rmt_tld=1&ipr=y",	"/pagead/1p-user-list/995449196/?random=1552440119590&cv=9&fst=1552438800000&num=1&bg=ffffff&guid=ON&u_h=1080&u_w=1920&u_ah=1018&u_aw=1920&u_cd=24&u_his=5&u_tz=-240&u_java=false&u_nplug=0&u_nmime=0&gtm=2od2q1&sendb=1&data=event%3Dgtag.config&frm=0&url=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&ref=https%3A%2F%2Fwww.oracle.com%2Findex.html&tiba=Oracle%20Software%20Downloads%20%7C%20Oracle&async=1&fmt=3&cdct=2&is_vtc=1&random=2646317145&resp=GooglemKTybQhCsO&rmt_tld=1&ipr=y", true, false), 2732, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
				httpParallel.addRequest(64, request_291(this, false, "A1E9452E6C783462DFEAE23864643438", false, false,
						"Config_41", "js.adsrvr.org:443/up_loader.1.1.0.js",	"/up_loader.1.1.0.js", true, false), 103, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(65, request_292(this, false, "A1E9452E6C7834E8DFEAE23864643438", true, false,
						"Config_42", "cti.w55c.net:443/ct/dx_upx_0DIVwemQ4u.js",	"/ct/dx_upx_0DIVwemQ4u.js", true, false), 105, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(58, request_293(this, false, "A1E9452E6C76D522DFEAE23864643438", true, false,
						"Config_36", "www.googletagmanager.com:443/gtag/js?id=AW-995449196",	"/gtag/js?id=AW-995449196", true, false), 620, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(1, request_294(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 67, 100, "A1E9452E6C7834F6DFEAE23864643438", 3);
				httpParallel.addRequest(60, request_295(this, false, "A1E9452E6C779827DFEAE23864643438", true, false,
						"Config_38", "googleads.g.doubleclick.net:443/pagead/viewthroughconversion/995449196/?random=1552440120877&cv=9&fst=1552440120877&num=1&bg=ffffff&guid=ON&resp=GooglemKTybQhCsO&u_h=1080&u_w=1920&u_ah=1018&u_aw=1920&u_cd=24&u_his=5&u_tz=-240&u_java=false&u_nplug=0&u_nmime=0&gtm=2oa2q1&sendb=1&data=event%3Dgtag.config&frm=2&url=https%3A%2F%2F3573281.fls.doubleclick.net%2Factivityi%3Bsrc%3D3573281%3Btype%3Dubert0%3Bcat%3Dawarn0%3Bord%3D1%3Bnum%3D7627745778999%3Bgtm%3D2od2q1%3Bauiddc%3D1161273925.1552440119%3Bu1%3Docom%253Aen-us%253A%252Fdownloads%252F%3Bu2%3Docom%253Aen%3Bu3%3DNew%3Bu4%3DDownloads%252C%2520java%2520downloads%3Bu5%3Dnot%2520logged%2520in%3Bu6%3D%255BCOMPANY%255D%3Bu7%3D%255BJOB%2520TITLE%255D%3Bu8%3D%255BCITY%255D%3Bu9%3D%255BSTATE%255D%3Bu10%3D%255BZIP%255D%3Bu11%3Dhttps%253A%252F%252Fwww.oracle.com%252Findex.html%3Bu12%3D7C4027BB7E5E43E69317D065A3A647EC%3Bu13%3D%255BCOMPANY%2520SIZE%255D%3Bu14%3DNot%2520Available%3Bu15%3DNot%2520Available%3Bu16%3DNot%2520Available%3Bu17%3Dhttp&ref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&async=1&rfmt=3&fmt=4",	"/pagead/viewthroughconversion/995449196/?random=1552440120877&cv=9&fst=1552440120877&num=1&bg=ffffff&guid=ON&resp=GooglemKTybQhCsO&u_h=1080&u_w=1920&u_ah=1018&u_aw=1920&u_cd=24&u_his=5&u_tz=-240&u_java=false&u_nplug=0&u_nmime=0&gtm=2oa2q1&sendb=1&data=event%3Dgtag.config&frm=2&url=https%3A%2F%2F3573281.fls.doubleclick.net%2Factivityi%3Bsrc%3D3573281%3Btype%3Dubert0%3Bcat%3Dawarn0%3Bord%3D1%3Bnum%3D7627745778999%3Bgtm%3D2od2q1%3Bauiddc%3D1161273925.1552440119%3Bu1%3Docom%253Aen-us%253A%252Fdownloads%252F%3Bu2%3Docom%253Aen%3Bu3%3DNew%3Bu4%3DDownloads%252C%2520java%2520downloads%3Bu5%3Dnot%2520logged%2520in%3Bu6%3D%255BCOMPANY%255D%3Bu7%3D%255BJOB%2520TITLE%255D%3Bu8%3D%255BCITY%255D%3Bu9%3D%255BSTATE%255D%3Bu10%3D%255BZIP%255D%3Bu11%3Dhttps%253A%252F%252Fwww.oracle.com%252Findex.html%3Bu12%3D7C4027BB7E5E43E69317D065A3A647EC%3Bu13%3D%255BCOMPANY%2520SIZE%255D%3Bu14%3DNot%2520Available%3Bu15%3DNot%2520Available%3Bu16%3DNot%2520Available%3Bu17%3Dhttp&ref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&async=1&rfmt=3&fmt=4", true, false), 664, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(61, request_296(this, false, "A1E9452E6C77BF82DFEAE23864643438", true, false,
						"Config_8", "www.google.com:443/pagead/1p-user-list/995449196/?random=1552440120877&cv=9&fst=1552438800000&num=1&bg=ffffff&guid=ON&u_h=1080&u_w=1920&u_ah=1018&u_aw=1920&u_cd=24&u_his=5&u_tz=-240&u_java=false&u_nplug=0&u_nmime=0&gtm=2oa2q1&sendb=1&data=event%3Dgtag.config&frm=2&url=https%3A%2F%2F3573281.fls.doubleclick.net%2Factivityi%3Bsrc%3D3573281%3Btype%3Dubert0%3Bcat%3Dawarn0%3Bord%3D1%3Bnum%3D7627745778999%3Bgtm%3D2od2q1%3Bauiddc%3D1161273925.1552440119%3Bu1%3Docom%253Aen-us%253A%252Fdownloads%252F%3Bu2%3Docom%253Aen%3Bu3%3DNew%3Bu4%3DDownloads%252C%2520java%2520downloads%3Bu5%3Dnot%2520logged%2520in%3Bu6%3D%255BCOMPANY%255D%3Bu7%3D%255BJOB%2520TITLE%255D%3Bu8%3D%255BCITY%255D%3Bu9%3D%255BSTATE%255D%3Bu10%3D%255BZIP%255D%3Bu11%3Dhttps%253A%252F%252Fwww.oracle.com%252Findex.html%3Bu12%3D7C4027BB7E5E43E69317D065A3A647EC%3Bu13%3D%255BCOMPANY%2520SIZE%255D%3Bu14%3DNot%2520Available%3Bu15%3DNot%2520Available%3Bu16%3DNot%2520Available%3Bu17%3Dhttp&ref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&async=1&fmt=3&cdct=2&is_vtc=1&random=1691855368&resp=GooglemKTybQhCsO&rmt_tld=0&ipr=y",	"/pagead/1p-user-list/995449196/?random=1552440120877&cv=9&fst=1552438800000&num=1&bg=ffffff&guid=ON&u_h=1080&u_w=1920&u_ah=1018&u_aw=1920&u_cd=24&u_his=5&u_tz=-240&u_java=false&u_nplug=0&u_nmime=0&gtm=2oa2q1&sendb=1&data=event%3Dgtag.config&frm=2&url=https%3A%2F%2F3573281.fls.doubleclick.net%2Factivityi%3Bsrc%3D3573281%3Btype%3Dubert0%3Bcat%3Dawarn0%3Bord%3D1%3Bnum%3D7627745778999%3Bgtm%3D2od2q1%3Bauiddc%3D1161273925.1552440119%3Bu1%3Docom%253Aen-us%253A%252Fdownloads%252F%3Bu2%3Docom%253Aen%3Bu3%3DNew%3Bu4%3DDownloads%252C%2520java%2520downloads%3Bu5%3Dnot%2520logged%2520in%3Bu6%3D%255BCOMPANY%255D%3Bu7%3D%255BJOB%2520TITLE%255D%3Bu8%3D%255BCITY%255D%3Bu9%3D%255BSTATE%255D%3Bu10%3D%255BZIP%255D%3Bu11%3Dhttps%253A%252F%252Fwww.oracle.com%252Findex.html%3Bu12%3D7C4027BB7E5E43E69317D065A3A647EC%3Bu13%3D%255BCOMPANY%2520SIZE%255D%3Bu14%3DNot%2520Available%3Bu15%3DNot%2520Available%3Bu16%3DNot%2520Available%3Bu17%3Dhttp&ref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&async=1&fmt=3&cdct=2&is_vtc=1&random=1691855368&resp=GooglemKTybQhCsO&rmt_tld=0&ipr=y", true, false), 711, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(63, request_297(this, false, "A1E9452E6C780D8DDFEAE23864643438", true, false,
						"Config_40", "www.google.com.my:443/pagead/1p-user-list/995449196/?random=1552440120877&cv=9&fst=1552438800000&num=1&bg=ffffff&guid=ON&u_h=1080&u_w=1920&u_ah=1018&u_aw=1920&u_cd=24&u_his=5&u_tz=-240&u_java=false&u_nplug=0&u_nmime=0&gtm=2oa2q1&sendb=1&data=event%3Dgtag.config&frm=2&url=https%3A%2F%2F3573281.fls.doubleclick.net%2Factivityi%3Bsrc%3D3573281%3Btype%3Dubert0%3Bcat%3Dawarn0%3Bord%3D1%3Bnum%3D7627745778999%3Bgtm%3D2od2q1%3Bauiddc%3D1161273925.1552440119%3Bu1%3Docom%253Aen-us%253A%252Fdownloads%252F%3Bu2%3Docom%253Aen%3Bu3%3DNew%3Bu4%3DDownloads%252C%2520java%2520downloads%3Bu5%3Dnot%2520logged%2520in%3Bu6%3D%255BCOMPANY%255D%3Bu7%3D%255BJOB%2520TITLE%255D%3Bu8%3D%255BCITY%255D%3Bu9%3D%255BSTATE%255D%3Bu10%3D%255BZIP%255D%3Bu11%3Dhttps%253A%252F%252Fwww.oracle.com%252Findex.html%3Bu12%3D7C4027BB7E5E43E69317D065A3A647EC%3Bu13%3D%255BCOMPANY%2520SIZE%255D%3Bu14%3DNot%2520Available%3Bu15%3DNot%2520Available%3Bu16%3DNot%2520Available%3Bu17%3Dhttp&ref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&async=1&fmt=3&cdct=2&is_vtc=1&random=1691855368&resp=GooglemKTybQhCsO&rmt_tld=1&ipr=y",	"/pagead/1p-user-list/995449196/?random=1552440120877&cv=9&fst=1552438800000&num=1&bg=ffffff&guid=ON&u_h=1080&u_w=1920&u_ah=1018&u_aw=1920&u_cd=24&u_his=5&u_tz=-240&u_java=false&u_nplug=0&u_nmime=0&gtm=2oa2q1&sendb=1&data=event%3Dgtag.config&frm=2&url=https%3A%2F%2F3573281.fls.doubleclick.net%2Factivityi%3Bsrc%3D3573281%3Btype%3Dubert0%3Bcat%3Dawarn0%3Bord%3D1%3Bnum%3D7627745778999%3Bgtm%3D2od2q1%3Bauiddc%3D1161273925.1552440119%3Bu1%3Docom%253Aen-us%253A%252Fdownloads%252F%3Bu2%3Docom%253Aen%3Bu3%3DNew%3Bu4%3DDownloads%252C%2520java%2520downloads%3Bu5%3Dnot%2520logged%2520in%3Bu6%3D%255BCOMPANY%255D%3Bu7%3D%255BJOB%2520TITLE%255D%3Bu8%3D%255BCITY%255D%3Bu9%3D%255BSTATE%255D%3Bu10%3D%255BZIP%255D%3Bu11%3Dhttps%253A%252F%252Fwww.oracle.com%252Findex.html%3Bu12%3D7C4027BB7E5E43E69317D065A3A647EC%3Bu13%3D%255BCOMPANY%2520SIZE%255D%3Bu14%3DNot%2520Available%3Bu15%3DNot%2520Available%3Bu16%3DNot%2520Available%3Bu17%3Dhttp&ref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&async=1&fmt=3&cdct=2&is_vtc=1&random=1691855368&resp=GooglemKTybQhCsO&rmt_tld=1&ipr=y", true, false), 712, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(66, request_298(this, false, "A1E9452E6C791F1CDFEAE23864643438", true, false,
						"Config_43", "3573286.fls.doubleclick.net:443/activityi;src=3573286;type=ubert0;cat=awarn0;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;ord=1;num=5126589863649.993?",	"/activityi;src=3573286;type=ubert0;cat=awarn0;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;ord=1;num=5126589863649.993?", true, false), 664, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(67, request_299(this, false, "A1E9452E6C794616DFEAE23864643438", true, false,
						"Config_44", "3573292.fls.doubleclick.net:443/activityi;src=3573292;type=ubert0;cat=awarn0;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;ord=1;num=9076606494270.16?",	"/activityi;src=3573292;type=ubert0;cat=awarn0;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;ord=1;num=9076606494270.16?", true, false), 711, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(1, request_300(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 41, 100, "A1E9452E6C791F2ADFEAE23864643438", 3);
				httpParallel.addRequest(68, request_301(this, false, "A1E9452E6C796D67DFEAE23864643438", true, false,
						"Config_45", "1106306.fls.doubleclick.net:443/activityi;src=1106306;type=ubert0;cat=awarn0;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;ord=1;num=602786471398.179?",	"/activityi;src=1106306;type=ubert0;cat=awarn0;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;ord=1;num=602786471398.179?", true, false), 719, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(69, request_302(this, false, "A1E9452E6C79BB3BDFEAE23864643438", false, false,
						"Config_46", "adservice.google.com:443/ddm/fls/z/src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=*;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F",	"/ddm/fls/z/src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=*;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F", true, false), 713, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(70, request_303(this, false, "A1E9452E6C79E247DFEAE23864643438", true, false,
						"Config_47", "tags.w55c.net:443/rs?id=d59c2c7b8ea846b499d11dd8d693aef2&nomatch&rnd=45011",	"/rs?id=d59c2c7b8ea846b499d11dd8d693aef2&nomatch&rnd=45011", true, false), 688, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(1, request_304(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 129, 100, "A1E9452E6C796D1CDFEAE23864643438", 3);
				httpParallel.addRequest(71, request_305(this, false, "A1E9452E6C7A096CDFEAE23864643438", true, false,
						"Config_46", "adservice.google.com:443/ddm/fls/z/src=3573286;type=ubert0;cat=awarn0;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;ord=1;num=5126589863649.993",	"/ddm/fls/z/src=3573286;type=ubert0;cat=awarn0;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;ord=1;num=5126589863649.993", true, false), 64, 100, "A1E9452E6C791F2ADFEAE23864643438", 2);
				httpParallel.addRequest(72, request_306(this, false, "A1E9452E6C7A3060DFEAE23864643438", true, false,
						"Config_48", "static.ads-twitter.com:443/uwt.js",	"/uwt.js", true, false), 646, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(73, request_307(this, false, "A1E9452E6C7A5743DFEAE23864643438", true, false,
						"Config_49", "snap.licdn.com:443/li.lms-analytics/insight.min.js",	"/li.lms-analytics/insight.min.js", true, false), 664, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(74, request_308(this, false, "A1E9452E6C7A7E53DFEAE23864643438", true, false,
						"Config_46", "adservice.google.com:443/ddm/fls/z/src=3573292;type=ubert0;cat=awarn0;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;ord=1;num=9076606494270.16",	"/ddm/fls/z/src=3573292;type=ubert0;cat=awarn0;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;ord=1;num=9076606494270.16", true, false), 92, 100, "A1E9452E6C794624DFEAE23864643438", 2);
				httpParallel.addRequest(69, request_309(this, false, "A1E9452E6C79BB3BDFEAE23864643438", true, false,
						"Config_46", "adservice.google.com:443/ddm/fls/z/src=1106306;type=ubert0;cat=awarn0;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;ord=1;num=602786471398.179",	"/ddm/fls/z/src=1106306;type=ubert0;cat=awarn0;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;ord=1;num=602786471398.179", true, false), 87, 100, "A1E9452E6C796D75DFEAE23864643438", 2);
				httpParallel.addRequest(1, request_310(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 27, 100, "A1E9452E6C7A5751DFEAE23864643438", 3);
				httpParallel.addRequest(75, request_311(this, false, "A1E9452E6C7ACC70DFEAE23864643438", true, false,
						"Config_50", "c1.rfihub.net:443/js/tc.min.js",	"/js/tc.min.js", true, false), 663, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(76, request_312(this, false, "A1E9452E6C7AF393DFEAE23864643438", false, false,
						"Config_51", "connect.facebook.net:443/en_US/fbevents.js",	"/en_US/fbevents.js", true, false), 720, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(76, request_313(this, false, "A1E9452E6C7AF393DFEAE23864643438", true, false,
						"Config_51", "connect.facebook.net:443/signals/config/1570966319875575?v=2.8.42&r=stable",	"/signals/config/1570966319875575?v=2.8.42&r=stable", true, false), 1333, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(77, request_314(this, false, "A1E9452E6C7B8FC3DFEAE23864643438", true, false,
						"Config_52", "t.co:443/i/adsct?p_id=Twitter&p_user_id=0&txn_id=nzz82&events=%5B%5B%22pageview%22%2Cnull%5D%5D&tw_sale_amount=0&tw_order_quantity=0&tw_iframe_status=1&tw_document_referrer=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F",	"/i/adsct?p_id=Twitter&p_user_id=0&txn_id=nzz82&events=%5B%5B%22pageview%22%2Cnull%5D%5D&tw_sale_amount=0&tw_order_quantity=0&tw_iframe_status=1&tw_document_referrer=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F", true, false), 1123, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(78, request_315(this, false, "A1E9452E6C7BB751DFEAE23864643438", false, false,
						"Config_53", "www.facebook.com:443/tr/?id=1570966319875575&ev=PageView&dl=https%3A%2F%2F3573281.fls.doubleclick.net%2Factivityi%3Bsrc%3D3573281%3Btype%3Dubert0%3Bcat%3Dawarn0%3Bord%3D1%3Bnum%3D7627745778999%3Bgtm%3D2od2q1%3Bauiddc%3D1161273925.1552440119%3Bu1%3Docom%253Aen-us%253A%252Fdownloads%252F%3Bu2%3Docom%253Aen%3Bu3%3DNew%3Bu4%3DDownloads%252C%2520java%2520downloads%3Bu5%3Dnot%2520logged%2520in%3Bu6%3D%255BCOMPANY%255D%3Bu7%3D%255BJOB%2520TITLE%255D%3Bu8%3D%255BCITY%255D%3Bu9%3D%255BSTATE%255D%3Bu10%3D%255BZIP%255D%3Bu11%3Dhttps%253A%252F%252Fwww.oracle.com%252Findex.html%3Bu12%3D7C4027BB7E5E43E69317D065A3A647EC%3Bu13%3D%255BCOMPANY%2520SIZE%255D%3Bu14%3DNot%2520Available%3Bu15%3DNot%2520Available%3Bu16%3DNot%2520Available%3Bu17%3Dhttps%253A%252F%252Fwww.oracle.com%252Fdownloads%252F%3B~oref%3Dhttps%253A%252F%252Fwww.oracle.com%252Fdownloads%252F%3F&rl=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&if=true&ts=1552440121686&cd[pageName]=ocom%253Aen-us%253A%252Fdownloads%252F&cd[productInterest]=Downloads%252C%2520java%2520downloads&cd[jobTitle]=%255BJOB%2520TITLE%255D&cd[userAction]=https%253A%252F%252Fwww.oracle.com%252Findex.html&cd[globalId_invoiceId]=7C4027BB7E5E43E69317D065A3A647EC&cd[currentPageUrl]=https%253A%252F%252Fwww.oracle.com%252Fdownloads%252F&cd[siteSection]=ocom%253Aen&cd[UserType]=New&sw=1920&sh=1080&v=2.8.42&r=stable&ec=0&o=30&fbp=fb.1.1552440121685.1577608241&it=1552440121441&coo=false&rqm=GET",	"/tr/?id=1570966319875575&ev=PageView&dl=https%3A%2F%2F3573281.fls.doubleclick.net%2Factivityi%3Bsrc%3D3573281%3Btype%3Dubert0%3Bcat%3Dawarn0%3Bord%3D1%3Bnum%3D7627745778999%3Bgtm%3D2od2q1%3Bauiddc%3D1161273925.1552440119%3Bu1%3Docom%253Aen-us%253A%252Fdownloads%252F%3Bu2%3Docom%253Aen%3Bu3%3DNew%3Bu4%3DDownloads%252C%2520java%2520downloads%3Bu5%3Dnot%2520logged%2520in%3Bu6%3D%255BCOMPANY%255D%3Bu7%3D%255BJOB%2520TITLE%255D%3Bu8%3D%255BCITY%255D%3Bu9%3D%255BSTATE%255D%3Bu10%3D%255BZIP%255D%3Bu11%3Dhttps%253A%252F%252Fwww.oracle.com%252Findex.html%3Bu12%3D7C4027BB7E5E43E69317D065A3A647EC%3Bu13%3D%255BCOMPANY%2520SIZE%255D%3Bu14%3DNot%2520Available%3Bu15%3DNot%2520Available%3Bu16%3DNot%2520Available%3Bu17%3Dhttps%253A%252F%252Fwww.oracle.com%252Fdownloads%252F%3B~oref%3Dhttps%253A%252F%252Fwww.oracle.com%252Fdownloads%252F%3F&rl=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&if=true&ts=1552440121686&cd[pageName]=ocom%253Aen-us%253A%252Fdownloads%252F&cd[productInterest]=Downloads%252C%2520java%2520downloads&cd[jobTitle]=%255BJOB%2520TITLE%255D&cd[userAction]=https%253A%252F%252Fwww.oracle.com%252Findex.html&cd[globalId_invoiceId]=7C4027BB7E5E43E69317D065A3A647EC&cd[currentPageUrl]=https%253A%252F%252Fwww.oracle.com%252Fdownloads%252F&cd[siteSection]=ocom%253Aen&cd[UserType]=New&sw=1920&sh=1080&v=2.8.42&r=stable&ec=0&o=30&fbp=fb.1.1552440121685.1577608241&it=1552440121441&coo=false&rqm=GET", true, false), 1527, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(79, request_316(this, false, "A1E9452E6C7BDE34DFEAE23864643438", true, false,
						"Config_54", "a.rfihub.com:443/idr.js?_callback=window.RocketfuelBCP.jsonpCallbacks.request_cmZpSWRJbkNhY2hl",	"/idr.js?_callback=window.RocketfuelBCP.jsonpCallbacks.request_cmZpSWRJbkNhY2hl", true, false), 1616, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(80, request_317(this, false, "A1E9452E6C7C0527DFEAE23864643438", true, false,
						"Config_55", "20797417p.rfihub.com:443/ca.html?rfiidc=978758864059880283&rfiaid=f2a8a2fab83c4c03be47557dfed31ff9&ver=9&rb=26998&ca=20797417&_o=26998&_t=20797417&pe=https%3A%2F%2F3573281.fls.doubleclick.net%2Factivityi%3Bsrc%3D3573281%3Btype%3Dubert0%3Bcat%3Dawarn0%3Bord%3D1%3Bnum%3D7627745778999%3Bgtm%3D2od2q1%3Bauiddc%3D1161273925.1552440119%3Bu1%3Docom%253Aen-us%253A%252Fdownloads%252F%3Bu2%3Docom%253Aen%3Bu3%3DNew%3Bu4%3DDownloads%252C%2520java%2520downloads%3Bu5%3Dnot%2520logged%2520in%3Bu6%3D%255BCOMPANY%255D%3Bu7%3D%255BJOB%2520TITLE%255D%3Bu8%3D%255BCITY%255D%3Bu9%3D%255BSTATE%255D%3Bu10%3D%255BZIP%255D%3Bu11%3Dhttps%253A%252F%252Fwww.oracle.com%252Findex.html%3Bu12%3D7C4027BB7E5E43E69317D065A3A647EC%3Bu13%3D%255BCOMPANY%2520SIZE%255D%3Bu14%3DNot%2520Available%3Bu15%3DNot%2520Available%3Bu16%3DNot%2520Available%3Bu17%3Dhttps%253A%252F%252Fwww.oracle.com%252Fdownloads%252F%3B%7Eoref%3Dhttps%253A%252F%252Fwww.oracle.com%252Fdownloads%252F%3F&pf=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&ra=2139315893370003",	"/ca.html?rfiidc=978758864059880283&rfiaid=f2a8a2fab83c4c03be47557dfed31ff9&ver=9&rb=26998&ca=20797417&_o=26998&_t=20797417&pe=https%3A%2F%2F3573281.fls.doubleclick.net%2Factivityi%3Bsrc%3D3573281%3Btype%3Dubert0%3Bcat%3Dawarn0%3Bord%3D1%3Bnum%3D7627745778999%3Bgtm%3D2od2q1%3Bauiddc%3D1161273925.1552440119%3Bu1%3Docom%253Aen-us%253A%252Fdownloads%252F%3Bu2%3Docom%253Aen%3Bu3%3DNew%3Bu4%3DDownloads%252C%2520java%2520downloads%3Bu5%3Dnot%2520logged%2520in%3Bu6%3D%255BCOMPANY%255D%3Bu7%3D%255BJOB%2520TITLE%255D%3Bu8%3D%255BCITY%255D%3Bu9%3D%255BSTATE%255D%3Bu10%3D%255BZIP%255D%3Bu11%3Dhttps%253A%252F%252Fwww.oracle.com%252Findex.html%3Bu12%3D7C4027BB7E5E43E69317D065A3A647EC%3Bu13%3D%255BCOMPANY%2520SIZE%255D%3Bu14%3DNot%2520Available%3Bu15%3DNot%2520Available%3Bu16%3DNot%2520Available%3Bu17%3Dhttps%253A%252F%252Fwww.oracle.com%252Fdownloads%252F%3B%7Eoref%3Dhttps%253A%252F%252Fwww.oracle.com%252Fdownloads%252F%3F&pf=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&ra=2139315893370003", true, false), 2610, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(1, request_318(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/moeb/service/com.ibm.rational.test.rtw.webgui.service.IWebGuiRecorderService?action=hasAnyClientTask&client_task={%22activeTabsInfo%22:[{%22url_kind%22:%22https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F%22,%22browser_type%22:%22Firefox%22,%22unique_id%22:1}]}",	"/moeb/service/com.ibm.rational.test.rtw.webgui.service.IWebGuiRecorderService?action=hasAnyClientTask&client_task={%22activeTabsInfo%22:[{%22url_kind%22:%22https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F%22,%22browser_type%22:%22Firefox%22,%22unique_id%22:1}]}", true, false), 2, 100, "A1E9452E6C7C0535DFEAE23864643438", 3);
				httpParallel.addRequest(1, request_319(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(81, request_320(this, false, "A1E9452E6C7C535CDFEAE23864643438", true, false,
						"Config_56", "insight.adsrvr.org:443/track/up?adv=lg9m31y&ref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&upid=dl74g8x&osi=cef30ec0939895449f1090f82bf48fea&osv=1.1&upv=1.1.3",	"/track/up?adv=lg9m31y&ref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&upid=dl74g8x&osi=cef30ec0939895449f1090f82bf48fea&osv=1.1&upv=1.1.3", true, false), 2800, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(82, request_321(this, false, "A1E9452E6C7C7A51DFEAE23864643438", true, false,
						"Config_56", "insight.adsrvr.org:443/track/up?adv=nxysskw&ref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&upid=zurup87&osi=cef30ec0939895449f1090f82bf48fea&osv=1.1&upv=1.1.3",	"/track/up?adv=nxysskw&ref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&upid=zurup87&osi=cef30ec0939895449f1090f82bf48fea&osv=1.1&upv=1.1.3", true, false), 2800, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(83, request_322(this, false, "A1E9452E6C7CA130DFEAE23864643438", true, false,
						"Config_56", "insight.adsrvr.org:443/track/up?adv=h6ftj5b&ref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&upid=v52jc5q&osi=cef30ec0939895449f1090f82bf48fea&osv=1.1&upv=1.1.3",	"/track/up?adv=h6ftj5b&ref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&upid=v52jc5q&osi=cef30ec0939895449f1090f82bf48fea&osv=1.1&upv=1.1.3", true, false), 2800, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(78, request_323(this, false, "A1E9452E6C7BB751DFEAE23864643438", true, false,
						"Config_53", "www.facebook.com:443/tr/?id=1570966319875575&ev=Microdata&dl=https%3A%2F%2F3573281.fls.doubleclick.net%2Factivityi%3Bsrc%3D3573281%3Btype%3Dubert0%3Bcat%3Dawarn0%3Bord%3D1%3Bnum%3D7627745778999%3Bgtm%3D2od2q1%3Bauiddc%3D1161273925.1552440119%3Bu1%3Docom%253Aen-us%253A%252Fdownloads%252F%3Bu2%3Docom%253Aen%3Bu3%3DNew%3Bu4%3DDownloads%252C%2520java%2520downloads%3Bu5%3Dnot%2520logged%2520in%3Bu6%3D%255BCOMPANY%255D%3Bu7%3D%255BJOB%2520TITLE%255D%3Bu8%3D%255BCITY%255D%3Bu9%3D%255BSTATE%255D%3Bu10%3D%255BZIP%255D%3Bu11%3Dhttps%253A%252F%252Fwww.oracle.com%252Findex.html%3Bu12%3D7C4027BB7E5E43E69317D065A3A647EC%3Bu13%3D%255BCOMPANY%2520SIZE%255D%3Bu14%3DNot%2520Available%3Bu15%3DNot%2520Available%3Bu16%3DNot%2520Available%3Bu17%3Dhttps%253A%252F%252Fwww.oracle.com%252Fdownloads%252F%3B~oref%3Dhttps%253A%252F%252Fwww.oracle.com%252Fdownloads%252F%3F&rl=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&if=true&ts=1552440123194&cd[Schema.org]=%5B%5D&cd[OpenGraph]=%7B%7D&cd[Meta]=%7B%22title%22%3A%22%22%7D&cd[DataLayer]=%5B%5D&cd[JSON-LD]=%5B%5D&sw=1920&sh=1080&v=2.8.42&r=stable&ec=1&o=30&fbp=fb.1.1552440121685.1577608241&it=1552440121441&coo=false&es=automatic&rqm=GET",	"/tr/?id=1570966319875575&ev=Microdata&dl=https%3A%2F%2F3573281.fls.doubleclick.net%2Factivityi%3Bsrc%3D3573281%3Btype%3Dubert0%3Bcat%3Dawarn0%3Bord%3D1%3Bnum%3D7627745778999%3Bgtm%3D2od2q1%3Bauiddc%3D1161273925.1552440119%3Bu1%3Docom%253Aen-us%253A%252Fdownloads%252F%3Bu2%3Docom%253Aen%3Bu3%3DNew%3Bu4%3DDownloads%252C%2520java%2520downloads%3Bu5%3Dnot%2520logged%2520in%3Bu6%3D%255BCOMPANY%255D%3Bu7%3D%255BJOB%2520TITLE%255D%3Bu8%3D%255BCITY%255D%3Bu9%3D%255BSTATE%255D%3Bu10%3D%255BZIP%255D%3Bu11%3Dhttps%253A%252F%252Fwww.oracle.com%252Findex.html%3Bu12%3D7C4027BB7E5E43E69317D065A3A647EC%3Bu13%3D%255BCOMPANY%2520SIZE%255D%3Bu14%3DNot%2520Available%3Bu15%3DNot%2520Available%3Bu16%3DNot%2520Available%3Bu17%3Dhttps%253A%252F%252Fwww.oracle.com%252Fdownloads%252F%3B~oref%3Dhttps%253A%252F%252Fwww.oracle.com%252Fdownloads%252F%3F&rl=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&if=true&ts=1552440123194&cd[Schema.org]=%5B%5D&cd[OpenGraph]=%7B%7D&cd[Meta]=%7B%22title%22%3A%22%22%7D&cd[DataLayer]=%5B%5D&cd[JSON-LD]=%5B%5D&sw=1920&sh=1080&v=2.8.42&r=stable&ec=1&o=30&fbp=fb.1.1552440121685.1577608241&it=1552440121441&coo=false&es=automatic&rqm=GET", true, false), 2983, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(64, request_324(this, false, "A1E9452E6C783462DFEAE23864643438", true, false,
						"Config_41", "js.adsrvr.org:443/universal_pixel.1.1.3.js",	"/universal_pixel.1.1.3.js", true, false), 47, 100, "A1E9452E6C7C536ADFEAE23864643438", 2);
				httpParallel.addRequest(1, request_325(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", false, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 13, 100, "A1E9452E6C7CC87FDFEAE23864643438", 3);
				httpParallel.addRequest(1, request_326(this, false, "A1E9452E6C3ED4EBDFEAE23864643438", true, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(14, request_327(this, false, "A1E9452E6C389350DFEAE23864643438", true, false,
						"Config_2", "127.0.0.1:7878/RTW/RMoTRecorder.js",	"/RTW/RMoTRecorder.js", true, false), 3, 100, "A1E9452E6C7CEFD2DFEAE23864643438", 3);
				httpParallel.addRequest(84, request_328(this, false, "A1E9452E6C7D16CEDFEAE23864643438", false, false,
						"Config_57", "px.ads.linkedin.com:443/collect/?time=1552440122976&pid=89045&url=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&fmt=js&s=1",	"/collect/?time=1552440122976&pid=89045&url=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&fmt=js&s=1", true, false), 2803, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(85, request_329(this, false, "A1E9452E6C7D3DC3DFEAE23864643438", true, false,
						"Config_58", "analytics.twitter.com:443/i/adsct?p_id=Twitter&p_user_id=0&txn_id=nzz82&events=%5B%5B%22pageview%22%2Cnull%5D%5D&tw_sale_amount=0&tw_order_quantity=0&tw_iframe_status=1&tw_document_referrer=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&tpx_cb=twttr.conversion.loadPixels&tw_document_href=https%3A%2F%2F3573281.fls.doubleclick.net%2Factivityi%3Bsrc%3D3573281%3Btype%3Dubert0%3Bcat%3Dawarn0%3Bord%3D1%3Bnum%3D7627745778999%3Bgtm%3D2od2q1%3Bauiddc%3D1161273925.1552440119%3Bu1%3Docom%253Aen-us%253A%252Fdownloads%252F%3Bu2%3Docom%253Aen%3Bu3%3DNew%3Bu4%3DDownloads%252C%2520java%2520downloads%3Bu5%3Dnot%2520logged%2520in%3Bu6%3D%255BCOMPANY%255D%3Bu7%3D%255BJOB%2520TITLE%255D%3Bu8%3D%255BCITY%255D%3Bu9%3D%255BSTATE%255D%3Bu10%3D%255BZIP%255D%3Bu11%3Dhttps%253A%252F%252Fwww.oracle.com%252Findex.html%3Bu12%3D7C4027BB7E5E43E69317D065A3A647EC%3Bu13%3D%255BCOMPANY%2520SIZE%255D%3Bu14%3DNot%2520Available%3Bu15%3DNot%2520Available%3Bu16%3DNot%2520Available%3Bu17%3Dhttps%253A%252F%252Fwww.oracle.com%252Fdownloads%252F%3B~oref%3Dhttps%253A%252F%252Fwww.oracle.com%252Fdownloads%252F%3F",	"/i/adsct?p_id=Twitter&p_user_id=0&txn_id=nzz82&events=%5B%5B%22pageview%22%2Cnull%5D%5D&tw_sale_amount=0&tw_order_quantity=0&tw_iframe_status=1&tw_document_referrer=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&tpx_cb=twttr.conversion.loadPixels&tw_document_href=https%3A%2F%2F3573281.fls.doubleclick.net%2Factivityi%3Bsrc%3D3573281%3Btype%3Dubert0%3Bcat%3Dawarn0%3Bord%3D1%3Bnum%3D7627745778999%3Bgtm%3D2od2q1%3Bauiddc%3D1161273925.1552440119%3Bu1%3Docom%253Aen-us%253A%252Fdownloads%252F%3Bu2%3Docom%253Aen%3Bu3%3DNew%3Bu4%3DDownloads%252C%2520java%2520downloads%3Bu5%3Dnot%2520logged%2520in%3Bu6%3D%255BCOMPANY%255D%3Bu7%3D%255BJOB%2520TITLE%255D%3Bu8%3D%255BCITY%255D%3Bu9%3D%255BSTATE%255D%3Bu10%3D%255BZIP%255D%3Bu11%3Dhttps%253A%252F%252Fwww.oracle.com%252Findex.html%3Bu12%3D7C4027BB7E5E43E69317D065A3A647EC%3Bu13%3D%255BCOMPANY%2520SIZE%255D%3Bu14%3DNot%2520Available%3Bu15%3DNot%2520Available%3Bu16%3DNot%2520Available%3Bu17%3Dhttps%253A%252F%252Fwww.oracle.com%252Fdownloads%252F%3B~oref%3Dhttps%253A%252F%252Fwww.oracle.com%252Fdownloads%252F%3F", true, false), 2793, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(84, request_330(this, false, "A1E9452E6C7D16CEDFEAE23864643438", false, false,
						"Config_57", "px.ads.linkedin.com:443/collect/?time=1552440122976&pid=89045&url=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&fmt=js&s=1&cookiesTest=true",	"/collect/?time=1552440122976&pid=89045&url=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&fmt=js&s=1&cookiesTest=true", true, false), 0, 100, "null", 3);
				httpParallel.addRequest(86, request_331(this, false, "A1E9452E6C7D8BC0DFEAE23864643438", true, false,
						"Config_59", "www.linkedin.com:443/px/li_sync?redirect=https%3A%2F%2Fpx.ads.linkedin.com%2Fcollect%2F%3Ftime%3D1552440122976%26pid%3D89045%26url%3Dhttps%253A%252F%252Fwww.oracle.com%252Fdownloads%252F%26fmt%3Djs%26s%3D1%26cookiesTest%3Dtrue%26liSync%3Dtrue",	"/px/li_sync?redirect=https%3A%2F%2Fpx.ads.linkedin.com%2Fcollect%2F%3Ftime%3D1552440122976%26pid%3D89045%26url%3Dhttps%253A%252F%252Fwww.oracle.com%252Fdownloads%252F%26fmt%3Djs%26s%3D1%26cookiesTest%3Dtrue%26liSync%3Dtrue", true, false), 3287, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(84, request_332(this, false, "A1E9452E6C7D16CEDFEAE23864643438", true, false,
						"Config_57", "px.ads.linkedin.com:443/collect/?time=1552440122976&pid=89045&url=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&fmt=js&s=1&cookiesTest=true&liSync=true",	"/collect/?time=1552440122976&pid=89045&url=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&fmt=js&s=1&cookiesTest=true&liSync=true", true, false), 3617, 100, "A1E9452E6C77E695DFEAE23864643438", 2);
				httpParallel.addRequest(54, request_333(this, false, "A1E9452E6C6F81D3DFEAE23864643438", true, false,
						"Config_34", "36a3fec2.akstat.io:443/",	"/", true, false), 8357, 100, "A1E9452E6C6FF700DFEAE23864643438", 2);
			} // Parallal Block End 

	this.add(websocketRequestClose_1(this));
			
				super.execute();
			}
		};
		
		
		page.setRemoveDelaysFromPageResponseTimes(false);
		page.setArmEnabled(false);  
		return page;
	}

	public HTTPAction request_70(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C442C76DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-Autosuggest-ContentWidth", "546", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_70 = new DataSub();
	reqAction.addDataSub(subContainer_70);

		ISubRule sub_129 = new SubRule("req_uri", 33, 5, true, (IDCCoreVar)dcVars[3], false, "mkt", null, 0, false);
	subContainer_70.addSubInstruction(sub_129);
		ISubRule sub_130 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_194", null, 0, false);
	subContainer_70.addSubInstruction(sub_130);
		ISubRule sub_131 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_318", null, 0, false);
	subContainer_70.addSubInstruction(sub_131);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C442C79DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_71(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C44536FDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(12);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-type", "text/xml", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-MSEdge-ExternalExpType", "JointCoord", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-MSEdge-ExternalExp", "null", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "1515", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_14(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_71 = new DataSub();
	reqAction.addDataSub(subContainer_71);

		ISubRule sub_132 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_193", null, 0, false);
	subContainer_71.addSubInstruction(sub_132);
		ISubRule sub_133 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_317", null, 0, false);
	subContainer_71.addSubInstruction(sub_133);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C445372DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_14(HTTPPostData postData) {
				StringBuffer strBuf_11 = new StringBuffer();
strBuf_11.append("<ClientInstRequest><CID>053785F69437609637E389B19037634E</CI");
strBuf_11.append("D><Events><E><T>Event.ClientInst</T><IG>82B4606677674CB69316");
strBuf_11.append("BA598CA7F43D</IG><D><![CDATA[{\"CurUrl\":\"https://www.bing.com");
strBuf_11.append("/\",\"T\":\"CI.BoxModel\",\"FID\":\"CI\",\"Name\":\"v2.8\",\"SV\":\"4\",\"P\":{");
strBuf_11.append("\"C\":9,\"N\":3,\"I\":\"xw\",\"S\":\"C+K+MT\",\"M\":\"V+L+M+MT+E+N+C+K+BD\",");
strBuf_11.append("\"T\":7476,\"K\":\"5rh+47v+48j+49i+AS%2FSuggestions+55a+577+583+5");
strBuf_11.append("bg+47g+keydown+556+keypress+558\",\"F\":0},\"L\":\"@1j/1f/INPUT#sb");
strBuf_11.append("_form_q//6z/4n/di/u/a/K/2+47h/1g/DIV#focus_ovr//0/0/x7/me/6/");
strBuf_11.append("MT/2+4cu/1h/UL#sa_ul//6o/5o/f8/62/c/MT/2+@1a/16//////7e//R/+");
strBuf_11.append("@1a/1h///0/0/0/0/0/R/\",\"N\":\"@1b/20//@8/@15/@e/o/@9/@1b/0/@1b");
strBuf_11.append("/47w/@1c/@1c+@1d/21//@8/@1e/@e/30/@9/@1d/0/@1d/49l/4bf/4ci+@");
strBuf_11.append("1f/22//@8/@1e/@e/1x/@9/@1f/0/@1f/55d/@1g/@1g+@1h/23//@8/@1e/");
strBuf_11.append("@e/3b/@9/@1h/0/@1h/584/5aa/5be+@1i/24//@8/th/@a/1e/@9/@1i/0/");
strBuf_11.append("@1i/5bi/5br/5cu\",\"C\":\"3sc/1f////gq//+3w1//////50/\",\"K\":\"@1j/");
strBuf_11.append("1f/@1k/0+47i/1f/@1m/0+@1l/1f/@1k/0+@1l/1f/@1m/0+@1n/1f/@1k/0");
strBuf_11.append("+@1n/1f/@1m/0+56n/1f/@1k/0+56o/1f/@1m/0\",\"TS\":1552440102069,");
strBuf_11.append("\"RTS\":6936,\"SEQ\":15,\"UTS\":1552440104070}]]></D><TS>155244010");
strBuf_11.append("2069</TS></E><E><T>Event.ClientInst</T><IG>82B4606677674CB69");
strBuf_11.append("316BA598CA7F43D</IG><D><![CDATA[{\"CurUrl\":\"https://www.bing.");
strBuf_11.append("com/\",\"T\":\"CI.BoxModel\",\"FID\":\"CI\",\"Name\":\"v2.8\",\"SV\":\"4\",\"P");
strBuf_11.append("\":{\"C\":4,\"N\":4,\"I\":\"xw\",\"S\":\"K\",\"M\":\"V+L+M+MT+E+N+C+K+BD\",\"T");
strBuf_11.append("\":8283,\"K\":\"5ul\",\"F\":0},\"N\":\"@1o/25//@8/@1e/@e/29/@9/@1o/0/@");
strBuf_11.append("1o/@1o/5wt/5wu\",\"K\":\"5t3/1f/@1k/0+5t4/1f/@1m/0+5t6/1f/@1k/0+");
strBuf_11.append("5t7/1f/@1m/0\",\"TS\":1552440102875,\"RTS\":7742,\"SEQ\":16,\"UTS\":1");
strBuf_11.append("552440104070}]]></D><TS>1552440102875</TS></E></Events></Cli");
strBuf_11.append("entInstRequest>");
String requestData_13 = strBuf_11.toString();
			
	HTTPPostDataChunk pdc_13 = new HTTPPostDataChunk("A1E9452E6C447A30DFEAE23864643438", postData, requestData_13, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_13);

	}

	public HTTPAction request_72(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C447A4BDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_72 = new DataSub();
	reqAction.addDataSub(subContainer_72);

		ISubRule sub_134 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_316", null, 0, false);
	subContainer_72.addSubInstruction(sub_134);
		ISubRule sub_135 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_315", null, 0, false);
	subContainer_72.addSubInstruction(sub_135);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C447A4EDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_73(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C447A96DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_73 = new DataSub();
	reqAction.addDataSub(subContainer_73);

		ISubRule sub_136 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_314", null, 0, false);
	subContainer_73.addSubInstruction(sub_136);
		ISubRule sub_137 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_313", null, 0, false);
	subContainer_73.addSubInstruction(sub_137);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C447A99DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_74(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C44A161DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_74 = new DataSub();
	reqAction.addDataSub(subContainer_74);

		ISubRule sub_138 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_192", null, 0, false);
	subContainer_74.addSubInstruction(sub_138);
		ISubRule sub_139 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_312", null, 0, false);
	subContainer_74.addSubInstruction(sub_139);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C44A164DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_75(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C44A1B4DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/?toWww=1&redig=9D91A578CC134FFBB3C8E6C37F8D0373", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_5 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_5);

	harvestContainer_5.addHarvestInstruction ("resp_hdr_Referer-RPT-Generated (read-only)_1", dcVars[4], ".*", 1, 0, 0, 0, false, "Referer-RPT-Generated (read-only)_2", null, 0, false);
	harvestContainer_5.addHarvestInstruction ("resp_hdr_Set-Cookie_1", dcVars[5], "&IG=(.*?);", 1, 1, 0, 0, false, "Set-Cookie_4", null, 0, false);
	IDataSub subContainer_75 = new DataSub();
	reqAction.addDataSub(subContainer_75);

		ISubRule sub_140 = new SubRule("req_hdr_Referer_1", 0, 68, false, (IDCCoreVar)dcVars[0], false, "Referer_191", null, 0, false);
	subContainer_75.addSubInstruction(sub_140);
		ISubRule sub_141 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_311", null, 0, false);
	subContainer_75.addSubInstruction(sub_141);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C44A1B7DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_76(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C456499DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_76 = new DataSub();
	reqAction.addDataSub(subContainer_76);

		ISubRule sub_142 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_190", null, 0, false);
	subContainer_76.addSubInstruction(sub_142);
		ISubRule sub_143 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_310", null, 0, false);
	subContainer_76.addSubInstruction(sub_143);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C45649CDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_77(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C458BEFDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_77 = new DataSub();
	reqAction.addDataSub(subContainer_77);

		ISubRule sub_144 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_189", null, 0, false);
	subContainer_77.addSubInstruction(sub_144);
		ISubRule sub_145 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_309", null, 0, false);
	subContainer_77.addSubInstruction(sub_145);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C458BF2DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_78(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C45B2F0DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_78 = new DataSub();
	reqAction.addDataSub(subContainer_78);

		ISubRule sub_146 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_188", null, 0, false);
	subContainer_78.addSubInstruction(sub_146);
		ISubRule sub_147 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_308", null, 0, false);
	subContainer_78.addSubInstruction(sub_147);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C45B2F3DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_79(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4600D3DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_79 = new DataSub();
	reqAction.addDataSub(subContainer_79);

		ISubRule sub_148 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_187", null, 0, false);
	subContainer_79.addSubInstruction(sub_148);
		ISubRule sub_149 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_307", null, 0, false);
	subContainer_79.addSubInstruction(sub_149);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4600D6DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_80(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4627E0DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "safebrowsing.googleapis.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-HTTP-Method-Override", "POST", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Pragma", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cache-Control", "no-cache", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_80 = new DataSub();
	reqAction.addDataSub(subContainer_80);

		ISubRule sub_150 = new SubRule("req_hdr_Host_1", 0, 27, false, (IDCCoreVar)vars[53], false, "Host_306", null, 0, false);
	subContainer_80.addSubInstruction(sub_150);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4627E3DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-protobuf");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_81(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C462861DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_81 = new DataSub();
	reqAction.addDataSub(subContainer_81);

		ISubRule sub_151 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_186", null, 0, false);
	subContainer_81.addSubInstruction(sub_151);
		ISubRule sub_152 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_305", null, 0, false);
	subContainer_81.addSubInstruction(sub_152);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C462864DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_82(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4871F7DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_82 = new DataSub();
	reqAction.addDataSub(subContainer_82);

		ISubRule sub_153 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_304", null, 0, false);
	subContainer_82.addSubInstruction(sub_153);
		ISubRule sub_154 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_303", null, 0, false);
	subContainer_82.addSubInstruction(sub_154);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4871FADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_83(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C487250DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_83 = new DataSub();
	reqAction.addDataSub(subContainer_83);

		ISubRule sub_155 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_185", null, 0, false);
	subContainer_83.addSubInstruction(sub_155);
		ISubRule sub_156 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_302", null, 0, false);
	subContainer_83.addSubInstruction(sub_156);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C487253DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_84(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C489945DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_84 = new DataSub();
	reqAction.addDataSub(subContainer_84);

		ISubRule sub_157 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_184", null, 0, false);
	subContainer_84.addSubInstruction(sub_157);
		ISubRule sub_158 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_301", null, 0, false);
	subContainer_84.addSubInstruction(sub_158);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C489948DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_85(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C48C021DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/xml", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "315", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_15(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_85 = new DataSub();
	reqAction.addDataSub(subContainer_85);

		ISubRule sub_159 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_183", null, 0, false);
	subContainer_85.addSubInstruction(sub_159);
		ISubRule sub_160 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_300", null, 0, false);
	subContainer_85.addSubInstruction(sub_160);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C48C024DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_15(HTTPPostData postData) {
				StringBuffer strBuf_12 = new StringBuffer();
strBuf_12.append("<ClientInstRequest><Events><E><T>Event.ClientInst</T><IG>ABE");
strBuf_12.append("FCF399B024C59A5650E5542EA4116</IG><TS>1552440106144</TS><D><");
strBuf_12.append("![CDATA[[{\"T\":\"CI.Error\",\"FID\":\"CI\",\"Name\":\"JSError\",\"Text\":");
strBuf_12.append("\"expected%20expression%2C%20got%20%27%3C%27\",\"Meta\":\"self\",\"");
strBuf_12.append("Line\":\"1\"}]]]></D></E></Events><STS>1552440106144</STS></Cli");
strBuf_12.append("entInstRequest>");
String requestData_14 = strBuf_12.toString();
			
	HTTPPostDataChunk pdc_14 = new HTTPPostDataChunk("A1E9452E6C48C065DFEAE23864643438", postData, requestData_14, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_14);

	}

	public HTTPAction request_86(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C48E720DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_86 = new DataSub();
	reqAction.addDataSub(subContainer_86);

		ISubRule sub_161 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_182", null, 0, false);
	subContainer_86.addSubInstruction(sub_161);
		ISubRule sub_162 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_299", null, 0, false);
	subContainer_86.addSubInstruction(sub_162);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C48E723DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_87(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C48E783DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_87 = new DataSub();
	reqAction.addDataSub(subContainer_87);

		ISubRule sub_163 = new SubRule("req_uri", 12, 32, true, (IDCCoreVar)dcVars[5], false, "IG", null, 0, false);
	subContainer_87.addSubInstruction(sub_163);
		ISubRule sub_164 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_181", null, 0, false);
	subContainer_87.addSubInstruction(sub_164);
		ISubRule sub_165 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_298", null, 0, false);
	subContainer_87.addSubInstruction(sub_165);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C48E786DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_88(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C490E3BDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "349", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_16(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_88 = new DataSub();
	reqAction.addDataSub(subContainer_88);

		ISubRule sub_166 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_180", null, 0, false);
	subContainer_88.addSubInstruction(sub_166);
		ISubRule sub_167 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_297", null, 0, false);
	subContainer_88.addSubInstruction(sub_167);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C490E3EDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_16(HTTPPostData postData) {
				StringBuffer strBuf_13 = new StringBuffer();
strBuf_13.append("<ClientInstRequest><Events><E><T>Event.ClientInst</T><IG>ABE");
strBuf_13.append("FCF399B024C59A5650E5542EA4116</IG><TS>1552440106213</TS><D><");
strBuf_13.append("![CDATA[{id:9731,P:\"18:1u,19:1u,2:9,3:9,4:9,5:9,7:9,6:0,8:h,");
strBuf_13.append("9:1n,10:1n,11:1u,12:pa,13:q5,14:qb,15:tg,16:tg,17:tg\",S:\"nav");
strBuf_13.append(":0\",v:1.1,T:\"CI.Perf\",FID:\"CI\",Name:\"PerfV2\"}]]></D></E></Ev");
strBuf_13.append("ents><STS>1552440106213</STS></ClientInstRequest>");
String requestData_15 = strBuf_13.toString();
			
	HTTPPostDataChunk pdc_15 = new HTTPPostDataChunk("A1E9452E6C490E7FDFEAE23864643438", postData, requestData_15, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_15);

	}

	public HTTPAction request_89(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C493533DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_89 = new DataSub();
	reqAction.addDataSub(subContainer_89);

		ISubRule sub_168 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_179", null, 0, false);
	subContainer_89.addSubInstruction(sub_168);
		ISubRule sub_169 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_296", null, 0, false);
	subContainer_89.addSubInstruction(sub_169);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C493536DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_90(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C495C33DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_90 = new DataSub();
	reqAction.addDataSub(subContainer_90);

		ISubRule sub_170 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_178", null, 0, false);
	subContainer_90.addSubInstruction(sub_170);
		ISubRule sub_171 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_295", null, 0, false);
	subContainer_90.addSubInstruction(sub_171);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C495C36DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_91(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C495C92DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_91 = new DataSub();
	reqAction.addDataSub(subContainer_91);

		ISubRule sub_172 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_177", null, 0, false);
	subContainer_91.addSubInstruction(sub_172);
		ISubRule sub_173 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_294", null, 0, false);
	subContainer_91.addSubInstruction(sub_173);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C495C95DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_92(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C49838FDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_92 = new DataSub();
	reqAction.addDataSub(subContainer_92);

		ISubRule sub_174 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_176", null, 0, false);
	subContainer_92.addSubInstruction(sub_174);
		ISubRule sub_175 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_293", null, 0, false);
	subContainer_92.addSubInstruction(sub_175);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C498392DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_93(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C49AA6EDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_93 = new DataSub();
	reqAction.addDataSub(subContainer_93);

		ISubRule sub_176 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_175", null, 0, false);
	subContainer_93.addSubInstruction(sub_176);
		ISubRule sub_177 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_292", null, 0, false);
	subContainer_93.addSubInstruction(sub_177);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C49AA71DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_94(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C49AAD5DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_94 = new DataSub();
	reqAction.addDataSub(subContainer_94);

		ISubRule sub_178 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_174", null, 0, false);
	subContainer_94.addSubInstruction(sub_178);
		ISubRule sub_179 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_291", null, 0, false);
	subContainer_94.addSubInstruction(sub_179);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C49AAD8DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_95(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C49D1A4DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_95 = new DataSub();
	reqAction.addDataSub(subContainer_95);

		ISubRule sub_180 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_173", null, 0, false);
	subContainer_95.addSubInstruction(sub_180);
		ISubRule sub_181 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_290", null, 0, false);
	subContainer_95.addSubInstruction(sub_181);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C49D1A7DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_96(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C49F891DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_96 = new DataSub();
	reqAction.addDataSub(subContainer_96);

		ISubRule sub_182 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_172", null, 0, false);
	subContainer_96.addSubInstruction(sub_182);
		ISubRule sub_183 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_289", null, 0, false);
	subContainer_96.addSubInstruction(sub_183);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C49F894DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_97(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4A1F83DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_97 = new DataSub();
	reqAction.addDataSub(subContainer_97);

		ISubRule sub_184 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_171", null, 0, false);
	subContainer_97.addSubInstruction(sub_184);
		ISubRule sub_185 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_288", null, 0, false);
	subContainer_97.addSubInstruction(sub_185);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4A1F86DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_98(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4A4690DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_98 = new DataSub();
	reqAction.addDataSub(subContainer_98);

		ISubRule sub_186 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_170", null, 0, false);
	subContainer_98.addSubInstruction(sub_186);
		ISubRule sub_187 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_287", null, 0, false);
	subContainer_98.addSubInstruction(sub_187);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4A4693DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_99(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4A46F7DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_99 = new DataSub();
	reqAction.addDataSub(subContainer_99);

		ISubRule sub_188 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_169", null, 0, false);
	subContainer_99.addSubInstruction(sub_188);
		ISubRule sub_189 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_286", null, 0, false);
	subContainer_99.addSubInstruction(sub_189);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4A46FADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_100(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4A6DDFDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_100 = new DataSub();
	reqAction.addDataSub(subContainer_100);

		ISubRule sub_190 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_168", null, 0, false);
	subContainer_100.addSubInstruction(sub_190);
		ISubRule sub_191 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_285", null, 0, false);
	subContainer_100.addSubInstruction(sub_191);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4A6DE2DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_101(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4A94B3DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_101 = new DataSub();
	reqAction.addDataSub(subContainer_101);

		ISubRule sub_192 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_167", null, 0, false);
	subContainer_101.addSubInstruction(sub_192);
		ISubRule sub_193 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_284", null, 0, false);
	subContainer_101.addSubInstruction(sub_193);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4A94B6DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_102(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4ABBC3DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_102 = new DataSub();
	reqAction.addDataSub(subContainer_102);

		ISubRule sub_194 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_166", null, 0, false);
	subContainer_102.addSubInstruction(sub_194);
		ISubRule sub_195 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_283", null, 0, false);
	subContainer_102.addSubInstruction(sub_195);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4ABBC6DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_103(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4AE327DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_103 = new DataSub();
	reqAction.addDataSub(subContainer_103);

		ISubRule sub_196 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_165", null, 0, false);
	subContainer_103.addSubInstruction(sub_196);
		ISubRule sub_197 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_282", null, 0, false);
	subContainer_103.addSubInstruction(sub_197);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4AE32ADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_104(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4B0A0DDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_104 = new DataSub();
	reqAction.addDataSub(subContainer_104);

		ISubRule sub_198 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_281", null, 0, false);
	subContainer_104.addSubInstruction(sub_198);
		ISubRule sub_199 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_280", null, 0, false);
	subContainer_104.addSubInstruction(sub_199);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4B0A10DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_105(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4B0A58DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_105 = new DataSub();
	reqAction.addDataSub(subContainer_105);

		ISubRule sub_200 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_279", null, 0, false);
	subContainer_105.addSubInstruction(sub_200);
		ISubRule sub_201 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_278", null, 0, false);
	subContainer_105.addSubInstruction(sub_201);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4B0A5BDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_106(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4B311FDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_106 = new DataSub();
	reqAction.addDataSub(subContainer_106);

		ISubRule sub_202 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_277", null, 0, false);
	subContainer_106.addSubInstruction(sub_202);
		ISubRule sub_203 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_276", null, 0, false);
	subContainer_106.addSubInstruction(sub_203);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4B3122DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_107(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4B316ADFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_107 = new DataSub();
	reqAction.addDataSub(subContainer_107);

		ISubRule sub_204 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_275", null, 0, false);
	subContainer_107.addSubInstruction(sub_204);
		ISubRule sub_205 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_274", null, 0, false);
	subContainer_107.addSubInstruction(sub_205);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4B316DDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_108(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4B581DDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_108 = new DataSub();
	reqAction.addDataSub(subContainer_108);

		ISubRule sub_206 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_273", null, 0, false);
	subContainer_108.addSubInstruction(sub_206);
		ISubRule sub_207 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_272", null, 0, false);
	subContainer_108.addSubInstruction(sub_207);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4B5820DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_109(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4B5868DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_109 = new DataSub();
	reqAction.addDataSub(subContainer_109);

		ISubRule sub_208 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_271", null, 0, false);
	subContainer_109.addSubInstruction(sub_208);
		ISubRule sub_209 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_270", null, 0, false);
	subContainer_109.addSubInstruction(sub_209);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4B586BDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_110(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4B7F1BDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_110 = new DataSub();
	reqAction.addDataSub(subContainer_110);

		ISubRule sub_210 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_269", null, 0, false);
	subContainer_110.addSubInstruction(sub_210);
		ISubRule sub_211 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_268", null, 0, false);
	subContainer_110.addSubInstruction(sub_211);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4B7F1EDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_111(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4B7F66DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_111 = new DataSub();
	reqAction.addDataSub(subContainer_111);

		ISubRule sub_212 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_267", null, 0, false);
	subContainer_111.addSubInstruction(sub_212);
		ISubRule sub_213 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_266", null, 0, false);
	subContainer_111.addSubInstruction(sub_213);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4B7F69DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_112(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4B7FB1DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_112 = new DataSub();
	reqAction.addDataSub(subContainer_112);

		ISubRule sub_214 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_265", null, 0, false);
	subContainer_112.addSubInstruction(sub_214);
		ISubRule sub_215 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_264", null, 0, false);
	subContainer_112.addSubInstruction(sub_215);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4B7FB4DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_113(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4BA666DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_113 = new DataSub();
	reqAction.addDataSub(subContainer_113);

		ISubRule sub_216 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_263", null, 0, false);
	subContainer_113.addSubInstruction(sub_216);
		ISubRule sub_217 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_262", null, 0, false);
	subContainer_113.addSubInstruction(sub_217);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4BA669DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_114(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4BA6B1DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_114 = new DataSub();
	reqAction.addDataSub(subContainer_114);

		ISubRule sub_218 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_261", null, 0, false);
	subContainer_114.addSubInstruction(sub_218);
		ISubRule sub_219 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_260", null, 0, false);
	subContainer_114.addSubInstruction(sub_219);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4BA6B4DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_115(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4BCD5DDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_115 = new DataSub();
	reqAction.addDataSub(subContainer_115);

		ISubRule sub_220 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_259", null, 0, false);
	subContainer_115.addSubInstruction(sub_220);
		ISubRule sub_221 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_258", null, 0, false);
	subContainer_115.addSubInstruction(sub_221);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4BCD60DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_116(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4BCDA8DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_116 = new DataSub();
	reqAction.addDataSub(subContainer_116);

		ISubRule sub_222 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_257", null, 0, false);
	subContainer_116.addSubInstruction(sub_222);
		ISubRule sub_223 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_256", null, 0, false);
	subContainer_116.addSubInstruction(sub_223);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4BCDABDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_117(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4BF444DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_117 = new DataSub();
	reqAction.addDataSub(subContainer_117);

		ISubRule sub_224 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_255", null, 0, false);
	subContainer_117.addSubInstruction(sub_224);
		ISubRule sub_225 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_254", null, 0, false);
	subContainer_117.addSubInstruction(sub_225);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4BF447DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_118(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4BF48FDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_118 = new DataSub();
	reqAction.addDataSub(subContainer_118);

		ISubRule sub_226 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_253", null, 0, false);
	subContainer_118.addSubInstruction(sub_226);
		ISubRule sub_227 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_252", null, 0, false);
	subContainer_118.addSubInstruction(sub_227);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4BF492DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_119(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4BF4DADFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_119 = new DataSub();
	reqAction.addDataSub(subContainer_119);

		ISubRule sub_228 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_251", null, 0, false);
	subContainer_119.addSubInstruction(sub_228);
		ISubRule sub_229 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_250", null, 0, false);
	subContainer_119.addSubInstruction(sub_229);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4BF4DDDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_120(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4C1B91DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_120 = new DataSub();
	reqAction.addDataSub(subContainer_120);

		ISubRule sub_230 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_249", null, 0, false);
	subContainer_120.addSubInstruction(sub_230);
		ISubRule sub_231 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_248", null, 0, false);
	subContainer_120.addSubInstruction(sub_231);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4C1B94DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_121(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4C1BDCDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_121 = new DataSub();
	reqAction.addDataSub(subContainer_121);

		ISubRule sub_232 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_247", null, 0, false);
	subContainer_121.addSubInstruction(sub_232);
		ISubRule sub_233 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_246", null, 0, false);
	subContainer_121.addSubInstruction(sub_233);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4C1BDFDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_122(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4C4281DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_122 = new DataSub();
	reqAction.addDataSub(subContainer_122);

		ISubRule sub_234 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_245", null, 0, false);
	subContainer_122.addSubInstruction(sub_234);
		ISubRule sub_235 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_244", null, 0, false);
	subContainer_122.addSubInstruction(sub_235);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4C4284DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_123(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4C42CCDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_123 = new DataSub();
	reqAction.addDataSub(subContainer_123);

		ISubRule sub_236 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_243", null, 0, false);
	subContainer_123.addSubInstruction(sub_236);
		ISubRule sub_237 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_242", null, 0, false);
	subContainer_123.addSubInstruction(sub_237);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4C42CFDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_124(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4C6973DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_124 = new DataSub();
	reqAction.addDataSub(subContainer_124);

		ISubRule sub_238 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_241", null, 0, false);
	subContainer_124.addSubInstruction(sub_238);
		ISubRule sub_239 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_240", null, 0, false);
	subContainer_124.addSubInstruction(sub_239);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4C6976DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_125(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4C69CCDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "business.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_125 = new DataSub();
	reqAction.addDataSub(subContainer_125);

		ISubRule sub_240 = new SubRule("req_hdr_Host_1", 0, 17, false, (IDCCoreVar)vars[52], false, "Host_239", null, 0, false);
	subContainer_125.addSubInstruction(sub_240);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4C69CFDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_126(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4C90B1DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_126 = new DataSub();
	reqAction.addDataSub(subContainer_126);

		ISubRule sub_241 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_238", null, 0, false);
	subContainer_126.addSubInstruction(sub_241);
		ISubRule sub_242 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_237", null, 0, false);
	subContainer_126.addSubInstruction(sub_242);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4C90B4DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_127(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4CB793DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_127 = new DataSub();
	reqAction.addDataSub(subContainer_127);

		ISubRule sub_243 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_236", null, 0, false);
	subContainer_127.addSubInstruction(sub_243);
		ISubRule sub_244 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_235", null, 0, false);
	subContainer_127.addSubInstruction(sub_244);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4CB796DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_128(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4CB7DEDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_128 = new DataSub();
	reqAction.addDataSub(subContainer_128);

		ISubRule sub_245 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_234", null, 0, false);
	subContainer_128.addSubInstruction(sub_245);
		ISubRule sub_246 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_233", null, 0, false);
	subContainer_128.addSubInstruction(sub_246);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4CB7E1DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_129(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4CB829DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_129 = new DataSub();
	reqAction.addDataSub(subContainer_129);

		ISubRule sub_247 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_232", null, 0, false);
	subContainer_129.addSubInstruction(sub_247);
		ISubRule sub_248 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_231", null, 0, false);
	subContainer_129.addSubInstruction(sub_248);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4CB82CDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_130(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4CDEC5DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_130 = new DataSub();
	reqAction.addDataSub(subContainer_130);

		ISubRule sub_249 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_230", null, 0, false);
	subContainer_130.addSubInstruction(sub_249);
		ISubRule sub_250 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_229", null, 0, false);
	subContainer_130.addSubInstruction(sub_250);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4CDEC8DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_131(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4CDF10DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_131 = new DataSub();
	reqAction.addDataSub(subContainer_131);

		ISubRule sub_251 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_228", null, 0, false);
	subContainer_131.addSubInstruction(sub_251);
		ISubRule sub_252 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_227", null, 0, false);
	subContainer_131.addSubInstruction(sub_252);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4D05B0DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_132(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4D05F8DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_132 = new DataSub();
	reqAction.addDataSub(subContainer_132);

		ISubRule sub_253 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_226", null, 0, false);
	subContainer_132.addSubInstruction(sub_253);
		ISubRule sub_254 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_225", null, 0, false);
	subContainer_132.addSubInstruction(sub_254);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4D05FBDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_133(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4D0643DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_133 = new DataSub();
	reqAction.addDataSub(subContainer_133);

		ISubRule sub_255 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_224", null, 0, false);
	subContainer_133.addSubInstruction(sub_255);
		ISubRule sub_256 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_223", null, 0, false);
	subContainer_133.addSubInstruction(sub_256);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C4D0646DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_134(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4D2CDDDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_134 = new DataSub();
	reqAction.addDataSub(subContainer_134);

		ISubRule sub_257 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_164", null, 0, false);
	subContainer_134.addSubInstruction(sub_257);
		ISubRule sub_258 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_222", null, 0, false);
	subContainer_134.addSubInstruction(sub_258);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4D2CE0DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_135(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4D53D3DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-type", "application/x-www-form-urlencoded", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "4", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_17(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_135 = new DataSub();
	reqAction.addDataSub(subContainer_135);

		ISubRule sub_259 = new SubRule("req_uri", 56, 32, true, (IDCCoreVar)dcVars[5], false, "IG", null, 0, false);
	subContainer_135.addSubInstruction(sub_259);
		ISubRule sub_260 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_163", null, 0, false);
	subContainer_135.addSubInstruction(sub_260);
		ISubRule sub_261 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_221", null, 0, false);
	subContainer_135.addSubInstruction(sub_261);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4D53D6DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_17(HTTPPostData postData) {
				StringBuffer strBuf_14 = new StringBuffer();
strBuf_14.append("wb=1");
String requestData_16 = strBuf_14.toString();
			
	HTTPPostDataChunk pdc_16 = new HTTPPostDataChunk("A1E9452E6C4D5417DFEAE23864643438", postData, requestData_16, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_16);

	}

	public HTTPAction request_136(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4D7B0DDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-type", "application/x-www-form-urlencoded", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "268", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_18(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_136 = new DataSub();
	reqAction.addDataSub(subContainer_136);

		ISubRule sub_262 = new SubRule("req_uri", 30, 32, true, (IDCCoreVar)dcVars[5], false, "IG", null, 0, false);
	subContainer_136.addSubInstruction(sub_262);
		ISubRule sub_263 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_162", null, 0, false);
	subContainer_136.addSubInstruction(sub_263);
		ISubRule sub_264 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_220", null, 0, false);
	subContainer_136.addSubInstruction(sub_264);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4D7B10DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_18(HTTPPostData postData) {
				StringBuffer strBuf_15 = new StringBuffer();
strBuf_15.append("url=https%3A//www.bing.com/search%3Fq%3Doracle+corporation%2");
strBuf_15.append("6filters%3Dufn%253a%2522oracle+corporation%2522+sid%253a%252");
strBuf_15.append("2cafb5c69-0d68-2211-85a0-3067c643f408%2522%26qs%3DMB%26pq%3D");
strBuf_15.append("oracle%26sc%3D6-6%26cvid%3D82B4606677674CB69316BA598CA7F43D%");
strBuf_15.append("26FORM%3DQBLH%26sp%3D1&V=web");
String requestData_17 = strBuf_15.toString();
			
	HTTPPostDataChunk pdc_17 = new HTTPPostDataChunk("A1E9452E6C4D7B51DFEAE23864643438", postData, requestData_17, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_17);

	}

	public HTTPAction request_137(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4DA203DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=-1&RG=200&RP=0&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_137 = new DataSub();
	reqAction.addDataSub(subContainer_137);

		ISubRule sub_265 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_161", null, 0, false);
	subContainer_137.addSubInstruction(sub_265);
		ISubRule sub_266 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_219", null, 0, false);
	subContainer_137.addSubInstruction(sub_266);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4DA206DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/svg+xml");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_138(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4DA266DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1195&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_19(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_138 = new DataSub();
	reqAction.addDataSub(subContainer_138);

		ISubRule sub_267 = new SubRule("req_uri", 17, 32, true, (IDCCoreVar)dcVars[5], false, "IG", null, 0, false);
	subContainer_138.addSubInstruction(sub_267);
		ISubRule sub_268 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_160", null, 0, false);
	subContainer_138.addSubInstruction(sub_268);
		ISubRule sub_269 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_218", null, 0, false);
	subContainer_138.addSubInstruction(sub_269);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4DA269DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_19(HTTPPostData postData) {
				
			
	HTTPPostDataChunk pdc_18 = new HTTPPostDataChunk("A1E9452E6C4DC918DFEAE23864643438", postData, null, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_18);

	}

	public HTTPAction request_139(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4DC937DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(12);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-type", "text/xml", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-MSEdge-ExternalExpType", "JointCoord", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-MSEdge-ExternalExp", "null", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "619", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_20(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_139 = new DataSub();
	reqAction.addDataSub(subContainer_139);

		ISubRule sub_270 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_159", null, 0, false);
	subContainer_139.addSubInstruction(sub_270);
		ISubRule sub_271 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_217", null, 0, false);
	subContainer_139.addSubInstruction(sub_271);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4DC93ADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_20(HTTPPostData postData) {
				StringBuffer strBuf_16 = new StringBuffer();
strBuf_16.append("<ClientInstRequest><CID>053785F69437609637E389B19037634E</CI");
strBuf_16.append("D><Events><E><T>Event.ClientInst</T><IG>ABEFCF399B024C59A565");
strBuf_16.append("0E5542EA4116</IG><D><![CDATA[{\"T\":\"CI.Init\",\"TS\":15524401062");
strBuf_16.append("39,\"RTS\":1015,\"SEQ\":0,\"Name\":\"Base\",\"FID\":\"CI\",\"CurUrl\":\"htt");
strBuf_16.append("ps://www.bing.com/search\",\"UTS\":1552440106742}]]></D><TS>155");
strBuf_16.append("2440105224</TS></E><E><T>Event.ClientInst</T><IG>ABEFCF399B0");
strBuf_16.append("24C59A5650E5542EA4116</IG><D><![CDATA[{\"N\":\"PGLM\",\"T\":\"CI.Cl");
strBuf_16.append("ientInst\",\"TS\":1552440106239,\"RTS\":1015,\"SEQ\":1,\"Name\":\"BAW\"");
strBuf_16.append(",\"FID\":\"BfbGleam\",\"CurUrl\":\"https://www.bing.com/search\",\"UT");
strBuf_16.append("S\":1552440106742}]]></D><TS>1552440105224</TS></E></Events><");
strBuf_16.append("/ClientInstRequest>");
String requestData_18 = strBuf_16.toString();
			
	HTTPPostDataChunk pdc_19 = new HTTPPostDataChunk("A1E9452E6C4DF010DFEAE23864643438", postData, requestData_18, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_19);

	}

	public HTTPAction request_140(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4DF02BDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_140 = new DataSub();
	reqAction.addDataSub(subContainer_140);

		ISubRule sub_272 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_158", null, 0, false);
	subContainer_140.addSubInstruction(sub_272);
		ISubRule sub_273 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_216", null, 0, false);
	subContainer_140.addSubInstruction(sub_273);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4DF02EDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_141(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4E1723DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_141 = new DataSub();
	reqAction.addDataSub(subContainer_141);

		ISubRule sub_274 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_157", null, 0, false);
	subContainer_141.addSubInstruction(sub_274);
		ISubRule sub_275 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_215", null, 0, false);
	subContainer_141.addSubInstruction(sub_275);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4E1726DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_142(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4E1782DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_142 = new DataSub();
	reqAction.addDataSub(subContainer_142);

		ISubRule sub_276 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_156", null, 0, false);
	subContainer_142.addSubInstruction(sub_276);
		ISubRule sub_277 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_214", null, 0, false);
	subContainer_142.addSubInstruction(sub_277);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4E1785DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_143(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4E3E86DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_143 = new DataSub();
	reqAction.addDataSub(subContainer_143);

		ISubRule sub_278 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_155", null, 0, false);
	subContainer_143.addSubInstruction(sub_278);
		ISubRule sub_279 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_213", null, 0, false);
	subContainer_143.addSubInstruction(sub_279);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4E3E89DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_144(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4E6565DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_144 = new DataSub();
	reqAction.addDataSub(subContainer_144);

		ISubRule sub_280 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_154", null, 0, false);
	subContainer_144.addSubInstruction(sub_280);
		ISubRule sub_281 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_212", null, 0, false);
	subContainer_144.addSubInstruction(sub_281);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4E6568DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_145(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4E8C72DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_145 = new DataSub();
	reqAction.addDataSub(subContainer_145);

		ISubRule sub_282 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_153", null, 0, false);
	subContainer_145.addSubInstruction(sub_282);
		ISubRule sub_283 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_211", null, 0, false);
	subContainer_145.addSubInstruction(sub_283);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4E8C75DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_146(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4EB362DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_146 = new DataSub();
	reqAction.addDataSub(subContainer_146);

		ISubRule sub_284 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_152", null, 0, false);
	subContainer_146.addSubInstruction(sub_284);
		ISubRule sub_285 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_210", null, 0, false);
	subContainer_146.addSubInstruction(sub_285);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4EB365DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_147(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4EB3C1DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_147 = new DataSub();
	reqAction.addDataSub(subContainer_147);

		ISubRule sub_286 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_151", null, 0, false);
	subContainer_147.addSubInstruction(sub_286);
		ISubRule sub_287 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_209", null, 0, false);
	subContainer_147.addSubInstruction(sub_287);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4EB3C4DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_148(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4F0183DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_148 = new DataSub();
	reqAction.addDataSub(subContainer_148);

		ISubRule sub_288 = new SubRule("req_uri", 12, 32, true, (IDCCoreVar)dcVars[5], false, "IG", null, 0, false);
	subContainer_148.addSubInstruction(sub_288);
		ISubRule sub_289 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_150", null, 0, false);
	subContainer_148.addSubInstruction(sub_289);
		ISubRule sub_290 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_208", null, 0, false);
	subContainer_148.addSubInstruction(sub_290);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4F0186DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_149(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4F289FDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_149 = new DataSub();
	reqAction.addDataSub(subContainer_149);

		ISubRule sub_291 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_149", null, 0, false);
	subContainer_149.addSubInstruction(sub_291);
		ISubRule sub_292 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_207", null, 0, false);
	subContainer_149.addSubInstruction(sub_292);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4F28A2DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_150(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4F2906DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_150 = new DataSub();
	reqAction.addDataSub(subContainer_150);

		ISubRule sub_293 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_148", null, 0, false);
	subContainer_150.addSubInstruction(sub_293);
		ISubRule sub_294 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_206", null, 0, false);
	subContainer_150.addSubInstruction(sub_294);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4F2909DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_151(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C4FC4D3DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_151 = new DataSub();
	reqAction.addDataSub(subContainer_151);

		ISubRule sub_295 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_147", null, 0, false);
	subContainer_151.addSubInstruction(sub_295);
		ISubRule sub_296 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_205", null, 0, false);
	subContainer_151.addSubInstruction(sub_296);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C4FC4D6DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_152(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C503A03DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_152 = new DataSub();
	reqAction.addDataSub(subContainer_152);

		ISubRule sub_297 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_146", null, 0, false);
	subContainer_152.addSubInstruction(sub_297);
		ISubRule sub_298 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_204", null, 0, false);
	subContainer_152.addSubInstruction(sub_298);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C503A06DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_153(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C506113DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_153 = new DataSub();
	reqAction.addDataSub(subContainer_153);

		ISubRule sub_299 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_145", null, 0, false);
	subContainer_153.addSubInstruction(sub_299);
		ISubRule sub_300 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_203", null, 0, false);
	subContainer_153.addSubInstruction(sub_300);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C506116DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_154(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C508823DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_154 = new DataSub();
	reqAction.addDataSub(subContainer_154);

		ISubRule sub_301 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_144", null, 0, false);
	subContainer_154.addSubInstruction(sub_301);
		ISubRule sub_302 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_202", null, 0, false);
	subContainer_154.addSubInstruction(sub_302);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C508826DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_155(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C50D643DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_155 = new DataSub();
	reqAction.addDataSub(subContainer_155);

		ISubRule sub_303 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_143", null, 0, false);
	subContainer_155.addSubInstruction(sub_303);
		ISubRule sub_304 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_201", null, 0, false);
	subContainer_155.addSubInstruction(sub_304);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C50D646DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_156(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C50FD53DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_156 = new DataSub();
	reqAction.addDataSub(subContainer_156);

		ISubRule sub_305 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_142", null, 0, false);
	subContainer_156.addSubInstruction(sub_305);
		ISubRule sub_306 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_200", null, 0, false);
	subContainer_156.addSubInstruction(sub_306);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C50FD56DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_157(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C514B73DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_157 = new DataSub();
	reqAction.addDataSub(subContainer_157);

		ISubRule sub_307 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_141", null, 0, false);
	subContainer_157.addSubInstruction(sub_307);
		ISubRule sub_308 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_199", null, 0, false);
	subContainer_157.addSubInstruction(sub_308);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C514B76DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_158(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C517283DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_158 = new DataSub();
	reqAction.addDataSub(subContainer_158);

		ISubRule sub_309 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_140", null, 0, false);
	subContainer_158.addSubInstruction(sub_309);
		ISubRule sub_310 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_198", null, 0, false);
	subContainer_158.addSubInstruction(sub_310);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C517286DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_159(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C51C0A3DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_159 = new DataSub();
	reqAction.addDataSub(subContainer_159);

		ISubRule sub_311 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_139", null, 0, false);
	subContainer_159.addSubInstruction(sub_311);
		ISubRule sub_312 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_197", null, 0, false);
	subContainer_159.addSubInstruction(sub_312);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C51C0A6DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_160(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C520EC3DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440097;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_160 = new DataSub();
	reqAction.addDataSub(subContainer_160);

		ISubRule sub_313 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_138", null, 0, false);
	subContainer_160.addSubInstruction(sub_313);
		ISubRule sub_314 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_196", null, 0, false);
	subContainer_160.addSubInstruction(sub_314);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C520EC6DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_161(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C5235F2DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "tse1.mm.bing.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_161 = new DataSub();
	reqAction.addDataSub(subContainer_161);

		ISubRule sub_315 = new SubRule("req_hdr_Host_1", 0, 16, false, (IDCCoreVar)vars[50], false, "Host_195", null, 0, false);
	subContainer_161.addSubInstruction(sub_315);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C5235F5DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_162(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C52365CDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "tse1.mm.bing.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_162 = new DataSub();
	reqAction.addDataSub(subContainer_162);

		ISubRule sub_316 = new SubRule("req_hdr_Host_1", 0, 16, false, (IDCCoreVar)vars[50], false, "Host_194", null, 0, false);
	subContainer_162.addSubInstruction(sub_316);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C525CE0DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_163(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C525D42DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "tse1.mm.bing.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_163 = new DataSub();
	reqAction.addDataSub(subContainer_163);

		ISubRule sub_317 = new SubRule("req_hdr_Host_1", 0, 16, false, (IDCCoreVar)vars[50], false, "Host_193", null, 0, false);
	subContainer_163.addSubInstruction(sub_317);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C525D45DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_164(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C528413DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_164 = new DataSub();
	reqAction.addDataSub(subContainer_164);

		ISubRule sub_318 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_137", null, 0, false);
	subContainer_164.addSubInstruction(sub_318);
		ISubRule sub_319 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_192", null, 0, false);
	subContainer_164.addSubInstruction(sub_319);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C528416DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_165(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C528476DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "browser.pipe.aria.microsoft.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "4107", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_21(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_165 = new DataSub();
	reqAction.addDataSub(subContainer_165);

		ISubRule sub_320 = new SubRule("req_hdr_Host_1", 0, 31, false, (IDCCoreVar)vars[51], false, "Host_191", null, 0, false);
	subContainer_165.addSubInstruction(sub_320);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C528479DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_21(HTTPPostData postData) {
					String requestData_19 = MetaString.encode(ZipEntryProxy.asXMLFragment(
	                                   "A1E9452E6BF91950DFEAE23864643438.testdata",
	                                   "A1E9452E6C52AB26DFEAE23864643438",
	                                   4107));
			
	HTTPPostDataChunk pdc_20 = new HTTPPostDataChunk("A1E9452E6C52AB26DFEAE23864643438", postData, requestData_19, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_20);

	}

	public HTTPAction request_166(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C52AB59DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_166 = new DataSub();
	reqAction.addDataSub(subContainer_166);

		ISubRule sub_321 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_136", null, 0, false);
	subContainer_166.addSubInstruction(sub_321);
		ISubRule sub_322 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_190", null, 0, false);
	subContainer_166.addSubInstruction(sub_322);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C52AB5CDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_167(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C52D239DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_167 = new DataSub();
	reqAction.addDataSub(subContainer_167);

		ISubRule sub_323 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_135", null, 0, false);
	subContainer_167.addSubInstruction(sub_323);
		ISubRule sub_324 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_189", null, 0, false);
	subContainer_167.addSubInstruction(sub_324);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C52D23CDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_168(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C52F931DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "tse1.mm.bing.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_168 = new DataSub();
	reqAction.addDataSub(subContainer_168);

		ISubRule sub_325 = new SubRule("req_hdr_Host_1", 0, 16, false, (IDCCoreVar)vars[50], false, "Host_188", null, 0, false);
	subContainer_168.addSubInstruction(sub_325);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C52F934DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_169(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C52F996DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "tse1.mm.bing.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_169 = new DataSub();
	reqAction.addDataSub(subContainer_169);

		ISubRule sub_326 = new SubRule("req_hdr_Host_1", 0, 16, false, (IDCCoreVar)vars[50], false, "Host_187", null, 0, false);
	subContainer_169.addSubInstruction(sub_326);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C52F999DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_170(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C532067DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_170 = new DataSub();
	reqAction.addDataSub(subContainer_170);

		ISubRule sub_327 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_134", null, 0, false);
	subContainer_170.addSubInstruction(sub_327);
		ISubRule sub_328 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_186", null, 0, false);
	subContainer_170.addSubInstruction(sub_328);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C53206ADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_171(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C5DCE93DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_171 = new DataSub();
	reqAction.addDataSub(subContainer_171);

		ISubRule sub_329 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_133", null, 0, false);
	subContainer_171.addSubInstruction(sub_329);
		ISubRule sub_330 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_185", null, 0, false);
	subContainer_171.addSubInstruction(sub_330);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C5DCE96DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_172(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C5E1CB3DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_172 = new DataSub();
	reqAction.addDataSub(subContainer_172);

		ISubRule sub_331 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_132", null, 0, false);
	subContainer_172.addSubInstruction(sub_331);
		ISubRule sub_332 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_184", null, 0, false);
	subContainer_172.addSubInstruction(sub_332);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C5E1CB6DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_173(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C5E43C3DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_173 = new DataSub();
	reqAction.addDataSub(subContainer_173);

		ISubRule sub_333 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_131", null, 0, false);
	subContainer_173.addSubInstruction(sub_333);
		ISubRule sub_334 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_183", null, 0, false);
	subContainer_173.addSubInstruction(sub_334);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C5E43C6DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_174(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C5E6B0CDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_174 = new DataSub();
	reqAction.addDataSub(subContainer_174);

		ISubRule sub_335 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_130", null, 0, false);
	subContainer_174.addSubInstruction(sub_335);
		ISubRule sub_336 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_182", null, 0, false);
	subContainer_174.addSubInstruction(sub_336);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C5E6B0FDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_175(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C5E91E3DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_175 = new DataSub();
	reqAction.addDataSub(subContainer_175);

		ISubRule sub_337 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_129", null, 0, false);
	subContainer_175.addSubInstruction(sub_337);
		ISubRule sub_338 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_181", null, 0, false);
	subContainer_175.addSubInstruction(sub_338);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C5E91E6DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_176(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C5EB8F3DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_176 = new DataSub();
	reqAction.addDataSub(subContainer_176);

		ISubRule sub_339 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_128", null, 0, false);
	subContainer_176.addSubInstruction(sub_339);
		ISubRule sub_340 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_180", null, 0, false);
	subContainer_176.addSubInstruction(sub_340);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C5EB8F6DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_177(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C5EB95ADFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_177 = new DataSub();
	reqAction.addDataSub(subContainer_177);

		ISubRule sub_341 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_127", null, 0, false);
	subContainer_177.addSubInstruction(sub_341);
		ISubRule sub_342 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_179", null, 0, false);
	subContainer_177.addSubInstruction(sub_342);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C5EE000DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_178(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C5F2E23DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_178 = new DataSub();
	reqAction.addDataSub(subContainer_178);

		ISubRule sub_343 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_126", null, 0, false);
	subContainer_178.addSubInstruction(sub_343);
		ISubRule sub_344 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_178", null, 0, false);
	subContainer_178.addSubInstruction(sub_344);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C5F2E26DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_179(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C5F5541DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "t1.ssl.ak.dynamic.tiles.virtualearth.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_179 = new DataSub();
	reqAction.addDataSub(subContainer_179);

		ISubRule sub_345 = new SubRule("req_hdr_Host_1", 0, 40, false, (IDCCoreVar)vars[48], false, "Host_177", null, 0, false);
	subContainer_179.addSubInstruction(sub_345);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C5F5544DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_180(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C5F7C59DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "t0.ssl.ak.dynamic.tiles.virtualearth.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_180 = new DataSub();
	reqAction.addDataSub(subContainer_180);

		ISubRule sub_346 = new SubRule("req_hdr_Host_1", 0, 40, false, (IDCCoreVar)vars[49], false, "Host_176", null, 0, false);
	subContainer_180.addSubInstruction(sub_346);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C5F7C5CDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_181(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C5FA361DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "t0.ssl.ak.dynamic.tiles.virtualearth.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_181 = new DataSub();
	reqAction.addDataSub(subContainer_181);

		ISubRule sub_347 = new SubRule("req_hdr_Host_1", 0, 40, false, (IDCCoreVar)vars[49], false, "Host_175", null, 0, false);
	subContainer_181.addSubInstruction(sub_347);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C5FA364DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_182(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C5FCA8DDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "t1.ssl.ak.dynamic.tiles.virtualearth.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_182 = new DataSub();
	reqAction.addDataSub(subContainer_182);

		ISubRule sub_348 = new SubRule("req_hdr_Host_1", 0, 40, false, (IDCCoreVar)vars[48], false, "Host_174", null, 0, false);
	subContainer_182.addSubInstruction(sub_348);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C5FCA90DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_183(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C5FF1A4DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_183 = new DataSub();
	reqAction.addDataSub(subContainer_183);

		ISubRule sub_349 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_125", null, 0, false);
	subContainer_183.addSubInstruction(sub_349);
		ISubRule sub_350 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_173", null, 0, false);
	subContainer_183.addSubInstruction(sub_350);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C5FF1A7DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_184(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6018CBDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_22(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_184 = new DataSub();
	reqAction.addDataSub(subContainer_184);

		ISubRule sub_351 = new SubRule("req_uri", 29, 32, true, (IDCCoreVar)dcVars[5], false, "IG", null, 0, false);
	subContainer_184.addSubInstruction(sub_351);
		ISubRule sub_352 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_124", null, 0, false);
	subContainer_184.addSubInstruction(sub_352);
		ISubRule sub_353 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_172", null, 0, false);
	subContainer_184.addSubInstruction(sub_353);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6018CEDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_22(HTTPPostData postData) {
				
			
	HTTPPostDataChunk pdc_21 = new HTTPPostDataChunk("A1E9452E6C603F90DFEAE23864643438", postData, null, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_21);

	}

	public HTTPAction request_185(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C603FBDDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "t1.ssl.ak.dynamic.tiles.virtualearth.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_185 = new DataSub();
	reqAction.addDataSub(subContainer_185);

		ISubRule sub_354 = new SubRule("req_hdr_Host_1", 0, 40, false, (IDCCoreVar)vars[48], false, "Host_171", null, 0, false);
	subContainer_185.addSubInstruction(sub_354);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C603FC0DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_186(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6066B8DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_186 = new DataSub();
	reqAction.addDataSub(subContainer_186);

		ISubRule sub_355 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_170", null, 0, false);
	subContainer_186.addSubInstruction(sub_355);
		ISubRule sub_356 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_169", null, 0, false);
	subContainer_186.addSubInstruction(sub_356);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C6066BBDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_187(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C606703DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_187 = new DataSub();
	reqAction.addDataSub(subContainer_187);

		ISubRule sub_357 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_123", null, 0, false);
	subContainer_187.addSubInstruction(sub_357);
		ISubRule sub_358 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_168", null, 0, false);
	subContainer_187.addSubInstruction(sub_358);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C606706DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_188(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C60B4C3DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_188 = new DataSub();
	reqAction.addDataSub(subContainer_188);

		ISubRule sub_359 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_122", null, 0, false);
	subContainer_188.addSubInstruction(sub_359);
		ISubRule sub_360 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_167", null, 0, false);
	subContainer_188.addSubInstruction(sub_360);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C60B4C6DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_189(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C60DBDBDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_189 = new DataSub();
	reqAction.addDataSub(subContainer_189);

		ISubRule sub_361 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_121", null, 0, false);
	subContainer_189.addSubInstruction(sub_361);
		ISubRule sub_362 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_166", null, 0, false);
	subContainer_189.addSubInstruction(sub_362);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C60DBDEDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_190(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C61031CDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "315", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_23(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_190 = new DataSub();
	reqAction.addDataSub(subContainer_190);

		ISubRule sub_363 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_120", null, 0, false);
	subContainer_190.addSubInstruction(sub_363);
		ISubRule sub_364 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_165", null, 0, false);
	subContainer_190.addSubInstruction(sub_364);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C61031FDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_23(HTTPPostData postData) {
				StringBuffer strBuf_17 = new StringBuffer();
strBuf_17.append("<ClientInstRequest><Events><E><T>Event.ClientInst</T><IG>ABE");
strBuf_17.append("FCF399B024C59A5650E5542EA4116</IG><TS>1552440107922</TS><D><");
strBuf_17.append("![CDATA[{id:9731,P:\"Maps_BST:1ms\",S:\"Maps_FFAIL:1,Maps_FFAIL");
strBuf_17.append(":1,Maps_FFAIL:1,Maps_FFAIL:1\",v:1.1,T:\"CI.Perf\",FID:\"CI\",Nam");
strBuf_17.append("e:\"PerfV2\"}]]></D></E></Events><STS>1552440107922</STS></Cli");
strBuf_17.append("entInstRequest>");
String requestData_20 = strBuf_17.toString();
			
	HTTPPostDataChunk pdc_22 = new HTTPPostDataChunk("A1E9452E6C6129F0DFEAE23864643438", postData, requestData_20, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_22);

	}

	public HTTPAction request_191(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C612A0CDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "782", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_24(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_191 = new DataSub();
	reqAction.addDataSub(subContainer_191);

		ISubRule sub_365 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_119", null, 0, false);
	subContainer_191.addSubInstruction(sub_365);
		ISubRule sub_366 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_164", null, 0, false);
	subContainer_191.addSubInstruction(sub_366);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C612A0FDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_24(HTTPPostData postData) {
				StringBuffer strBuf_18 = new StringBuffer();
strBuf_18.append("<ClientInstRequest><Events><E><T>Event.ClientInst</T><IG>C24");
strBuf_18.append("F6B7ACEF641878C7671CA607815A8</IG><TS>1552440107983</TS><D><");
strBuf_18.append("![CDATA[{\"T\":\"CI.Warning\",\"feature\":\"SDK\",\"action\":\"ERR\",\"da");
strBuf_18.append("ta\":{\"httpStatus\":\"200\",\"status\":\"3\",\"cid\":\"XsrImages\",\"url\"");
strBuf_18.append(":\"{protocol}://www.bing.com/maps/geotfe/comp/stl?v=7.51&og={");
strBuf_18.append("og}&idx={idx},504,530,589,623,624,626,627,628,629&oidjs=\",\"m");
strBuf_18.append("sg\":\"\"},\"partner\":\"Maps\",\"horizontal\":\"MapSerp\",\"Name\":\"Maps");
strBuf_18.append("Network\",\"Text\":\"MapSerp;network:httpStatus:200, status:3, c");
strBuf_18.append("id:XsrImages, url:{protocol}://www.bing.com/maps/geotfe/comp");
strBuf_18.append("/stl?v=7.51&og={og}&idx={idx},504,530,589,623,624,626,627,62");
strBuf_18.append("8,629&oidjs=, \",\"Stack\":\"https://www.bing.com/maps/geotfe/co");
strBuf_18.append("mp/stl?v=7.51&og=395&idx=2,504,530,589,623,624,626,627,628,6");
strBuf_18.append("29&oidjs=\",\"FID\":\"CI\"}]]></D></E></Events></ClientInstReques");
strBuf_18.append("t>");
String requestData_21 = strBuf_18.toString();
			
	HTTPPostDataChunk pdc_23 = new HTTPPostDataChunk("A1E9452E6C612A50DFEAE23864643438", postData, requestData_21, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_23);

	}

	public HTTPAction request_192(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C615112DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "1897", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_25(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_192 = new DataSub();
	reqAction.addDataSub(subContainer_192);

		ISubRule sub_367 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_118", null, 0, false);
	subContainer_192.addSubInstruction(sub_367);
		ISubRule sub_368 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_163", null, 0, false);
	subContainer_192.addSubInstruction(sub_368);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C615115DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_25(HTTPPostData postData) {
				StringBuffer strBuf_19 = new StringBuffer();
strBuf_19.append("<ClientInstRequest><Events><E><T>Event.ClientInst</T><IG>ABE");
strBuf_19.append("FCF399B024C59A5650E5542EA4116</IG><TS>1552440108026</TS><D><");
strBuf_19.append("![CDATA[{\"feature\":\"Dragonfly\",\"action\":\"script error\",\"data");
strBuf_19.append("\":\"WrappedRequest onerror : https://www.bing.com/rb/3w/cj,nj");
strBuf_19.append("/0c2583a1/a00804eb.js?bu=BP8EwA7DDoQF\",\"T\":\"CI.MapsAction\",\"");
strBuf_19.append("FID\":\"CI\"}]]></D></E><E><T>Event.ClientInst</T><IG>ABEFCF399");
strBuf_19.append("B024C59A5650E5542EA4116</IG><TS>1552440108027</TS><D><![CDAT");
strBuf_19.append("A[{\"feature\":\"Dragonfly\",\"action\":\"script error\",\"data\":\"Wra");
strBuf_19.append("ppedRequest onerror : https://www.bing.com/rs/3w/uX/cir2,cc,");
strBuf_19.append("nc/87e5007d/ad1e6fcc.css\",\"T\":\"CI.MapsAction\",\"FID\":\"CI\"}]]>");
strBuf_19.append("</D></E><E><T>Event.ClientInst</T><IG>ABEFCF399B024C59A5650E");
strBuf_19.append("5542EA4116</IG><TS>1552440108027</TS><D><![CDATA[{\"feature\":");
strBuf_19.append("\"Dragonfly\",\"action\":\"script error\",\"data\":\"WrappedRequest o");
strBuf_19.append("nerror : https://www.bing.com/rs/3w/uc/cir2,cc,nc/80d2c614/b");
strBuf_19.append("22788fd.css\",\"T\":\"CI.MapsAction\",\"FID\":\"CI\"}]]></D></E><E><T");
strBuf_19.append(">Event.ClientInst</T><IG>C24F6B7ACEF641878C7671CA607815A8</I");
strBuf_19.append("G><TS>1552440108030</TS><D><![CDATA[{\"T\":\"CI.Warning\",\"featu");
strBuf_19.append("re\":\"SDK\",\"action\":\"ERR\",\"data\":{\"httpStatus\":\"500\",\"status\"");
strBuf_19.append(":\"3\",\"cid\":\"grid\",\"url\":\"{protocol}://{subdomain}ssl.ak.dyna");
strBuf_19.append("mic.tiles.virtualearth.net/comp/ch/{quadkey}?mkt={mkt}&it=z,");
strBuf_19.append("l,la&og={og}&cb=microsoft.maps.networkcallbacks.normal&jsons");
strBuf_19.append("o={jsonso}&js=1&tj=1&lc=&c4w=1&vpt=e,p,pg&osm=1\",\"msg\":\"\"},\"");
strBuf_19.append("partner\":\"Maps\",\"horizontal\":\"MapSerp\",\"Name\":\"MapsNetwork\",");
strBuf_19.append("\"Text\":\"MapSerp;network:httpStatus:500, status:3, cid:grid, ");
strBuf_19.append("url:{protocol}://{subdomain}ssl.ak.dynamic.tiles.virtualeart");
strBuf_19.append("h.net/comp/ch/{quadkey}?mkt={mkt}&it=z,l,la&og={og}&cb=micro");
strBuf_19.append("soft.maps.networkcallbacks.normal&jsonso={jsonso}&js=1&tj=1&");
strBuf_19.append("lc=&c4w=1&vpt=e,p,pg&osm=1, \",\"Stack\":\"https://t1.ssl.ak.dyn");
strBuf_19.append("amic.tiles.virtualearth.net/comp/ch/023010221?mkt=en-us&it=z");
strBuf_19.append(",l,la&og=395&cb=microsoft.maps.networkcallbacks.normal&jsons");
strBuf_19.append("o=3d845&js=1&tj=1&lc=&c4w=1&vpt=e,p,pg&osm=1\",\"FID\":\"CI\"}]]>");
strBuf_19.append("</D></E></Events></ClientInstRequest>");
String requestData_22 = strBuf_19.toString();
			
	HTTPPostDataChunk pdc_24 = new HTTPPostDataChunk("A1E9452E6C615156DFEAE23864643438", postData, requestData_22, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_24);

	}

	public HTTPAction request_193(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C615171DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "1305", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_26(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_193 = new DataSub();
	reqAction.addDataSub(subContainer_193);

		ISubRule sub_369 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_117", null, 0, false);
	subContainer_193.addSubInstruction(sub_369);
		ISubRule sub_370 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_162", null, 0, false);
	subContainer_193.addSubInstruction(sub_370);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C615174DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_26(HTTPPostData postData) {
				StringBuffer strBuf_20 = new StringBuffer();
strBuf_20.append("<ClientInstRequest><Events><E><T>Event.ClientInst</T><IG>C24");
strBuf_20.append("F6B7ACEF641878C7671CA607815A8</IG><TS>1552440108031</TS><D><");
strBuf_20.append("![CDATA[{\"T\":\"CI.Warning\",\"feature\":\"SDK\",\"action\":\"ERR\",\"da");
strBuf_20.append("ta\":{\"httpStatus\":\"500\",\"status\":\"3\",\"cid\":\"revgeocode\",\"url");
strBuf_20.append("\":\"{protocol}://dev.virtualearth.net/rest/v1/locations/37.46");
strBuf_20.append("212959289552,-122.11133575439455?o=json&culture={culture}&js");
strBuf_20.append("onp={jsonp}&key={credentials}&includeentitytypes=neighborhoo");
strBuf_20.append("d,populatedplace,admindivision1,admindivision2,countryregion");
strBuf_20.append("&inclnb=1&incl=entityid\",\"msg\":\"\"},\"partner\":\"Maps\",\"horizon");
strBuf_20.append("tal\":\"MapSerp\",\"Name\":\"MapsNetwork\",\"Text\":\"MapSerp;network:");
strBuf_20.append("httpStatus:500, status:3, cid:revgeocode, url:{protocol}://d");
strBuf_20.append("ev.virtualearth.net/rest/v1/locations/37.46212959289552,-122");
strBuf_20.append(".11133575439455?o=json&culture={culture}&jsonp={jsonp}&key={");
strBuf_20.append("credentials}&includeentitytypes=neighborhood,populatedplace,");
strBuf_20.append("admindivision1,admindivision2,countryregion&inclnb=1&incl=en");
strBuf_20.append("tityid, \",\"Stack\":\"https://dev.virtualearth.net/rest/v1/loca");
strBuf_20.append("tions/37.46212959289552,-122.11133575439455?o=json&culture=e");
strBuf_20.append("n-us&jsonp=microsoft.maps.networkcallbacks.f7afc1&key=athg8p");
strBuf_20.append("scjmcb6pznw5ze0ytfrjvokqldgumftdrynr_m0pmlpmeoopjvloz6zwt3&i");
strBuf_20.append("ncludeentitytypes=neighborhood,populatedplace,admindivision1");
strBuf_20.append(",admindivision2,countryregion&inclnb=1&incl=entityid\",\"FID\":");
strBuf_20.append("\"CI\"}]]></D></E></Events></ClientInstRequest>");
String requestData_23 = strBuf_20.toString();
			
	HTTPPostDataChunk pdc_25 = new HTTPPostDataChunk("A1E9452E6C617841DFEAE23864643438", postData, requestData_23, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_25);

	}

	public HTTPAction request_194(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C61785CDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "1029", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_27(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_194 = new DataSub();
	reqAction.addDataSub(subContainer_194);

		ISubRule sub_371 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_116", null, 0, false);
	subContainer_194.addSubInstruction(sub_371);
		ISubRule sub_372 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_161", null, 0, false);
	subContainer_194.addSubInstruction(sub_372);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C61785FDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_27(HTTPPostData postData) {
				StringBuffer strBuf_21 = new StringBuffer();
strBuf_21.append("<ClientInstRequest><Events><E><T>Event.ClientInst</T><IG>C24");
strBuf_21.append("F6B7ACEF641878C7671CA607815A8</IG><TS>1552440108032</TS><D><");
strBuf_21.append("![CDATA[{\"T\":\"CI.Warning\",\"feature\":\"SDK\",\"action\":\"ERR\",\"da");
strBuf_21.append("ta\":{\"httpStatus\":\"500\",\"status\":\"3\",\"cid\":\"grid\",\"url\":\"{pr");
strBuf_21.append("otocol}://{subdomain}ssl.ak.dynamic.tiles.virtualearth.net/c");
strBuf_21.append("omp/ch/{quadkey}?mkt={mkt}&it=z,l,la&og={og}&cb=microsoft.ma");
strBuf_21.append("ps.networkcallbacks.normal&jsonso={jsonso}&js=1&tj=1&lc=&c4w");
strBuf_21.append("=1&vpt=e,p,pg&osm=1\",\"msg\":\"\"},\"partner\":\"Maps\",\"horizontal\"");
strBuf_21.append(":\"MapSerp\",\"Name\":\"MapsNetwork\",\"Text\":\"MapSerp;network:http");
strBuf_21.append("Status:500, status:3, cid:grid, url:{protocol}://{subdomain}");
strBuf_21.append("ssl.ak.dynamic.tiles.virtualearth.net/comp/ch/{quadkey}?mkt=");
strBuf_21.append("{mkt}&it=z,l,la&og={og}&cb=microsoft.maps.networkcallbacks.n");
strBuf_21.append("ormal&jsonso={jsonso}&js=1&tj=1&lc=&c4w=1&vpt=e,p,pg&osm=1, ");
strBuf_21.append("\",\"Stack\":\"https://t0.ssl.ak.dynamic.tiles.virtualearth.net/");
strBuf_21.append("comp/ch/023010230?mkt=en-us&it=z,l,la&og=395&cb=microsoft.ma");
strBuf_21.append("ps.networkcallbacks.normal&jsonso=3d83f&js=1&tj=1&lc=&c4w=1&");
strBuf_21.append("vpt=e,p,pg&osm=1\",\"FID\":\"CI\"}]]></D></E></Events></ClientIns");
strBuf_21.append("tRequest>");
String requestData_24 = strBuf_21.toString();
			
	HTTPPostDataChunk pdc_26 = new HTTPPostDataChunk("A1E9452E6C619F20DFEAE23864643438", postData, requestData_24, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_26);

	}

	public HTTPAction request_195(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C619F49DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "dev.virtualearth.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_195 = new DataSub();
	reqAction.addDataSub(subContainer_195);

		ISubRule sub_373 = new SubRule("req_hdr_Host_1", 0, 20, false, (IDCCoreVar)vars[47], false, "Host_160", null, 0, false);
	subContainer_195.addSubInstruction(sub_373);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C619F4CDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_196(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C61C637DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "www.bing.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/search?q=oracle+corporation&filters=ufn%3a%22oracle+corporation%22+sid%3a%22cafb5c69-0d68-2211-85a0-3067c643f408%22&qs=MB&pq=oracle&sc=6-6&cvid=82B4606677674CB69316BA598CA7F43D&FORM=QBLH&sp=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "259", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "MUID=053785F69437609637E389B19037634E;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=79EBC7291C2A46588083F983C2DF6868&dmnchg=1;SRCHUSR=DOB=20190312&T=1552394112000;MUIDB=053785F69437609637E389B19037634E;ULC=P=7A57|2:2&H=7A57|2:2&T=7A57|2:2;SRCHHPGUSR=CW=1182&CH=806&DPR=1&UTC=-240&WTS=63687990867;_RwBf=s=70&o=18;BFBUSR=BAWAS=1;BFB=ARAiyP5xyOTW8D5OJ2afklok3DGJ6oZdzDEoj0e7-AUHZWl4HWrWFqxw7mh_3I0moY1sNVku9Rn9TWVNxUbekZHHdUh0q_PLFpTQ_CGlO3lV-mbaKj1-kniwueNLrB2g1B2lUnUJ4votQh6P2BjR-2vqENk5bIlhGs-cVmwk-q1YIg;OID=ARDFLKfOUFJi9aHUxX4SLazVPDlapavNg72T4minHxPjrmk3pEwGnv5dZaDcgzxvmpBdr5-xUF3TZxVYhutYwgkv;_SS=SID=275B3DA892A061DB077830B693286016&bIm=43:&R=5&RG=200&RP=-1&RD=0&RM=0&RE=0&HV=1552440107;ipv6=hit=1552443695777&t=4", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_28(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_196 = new DataSub();
	reqAction.addDataSub(subContainer_196);

		ISubRule sub_374 = new SubRule("req_hdr_Referer_1", 0, 212, false, (IDCCoreVar)dcVars[4], false, "Referer_115", null, 0, false);
	subContainer_196.addSubInstruction(sub_374);
		ISubRule sub_375 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[46], false, "Host_159", null, 0, false);
	subContainer_196.addSubInstruction(sub_375);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C442C76DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C44A1B4DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C61C63ADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_28(HTTPPostData postData) {
				StringBuffer strBuf_22 = new StringBuffer();
strBuf_22.append("<ClientInstRequest><Events><E><T>Event.ClientInst</T><IG>ABE");
strBuf_22.append("FCF399B024C59A5650E5542EA4116</IG><TS>1552440108265</TS><D><");
strBuf_22.append("![CDATA[{id:9731,S:\"Maps_FFAIL:1\",v:1.1,T:\"CI.Perf\",FID:\"CI\"");
strBuf_22.append(",Name:\"PerfV2\"}]]></D></E></Events><STS>1552440108265</STS><");
strBuf_22.append("/ClientInstRequest>");
String requestData_25 = strBuf_22.toString();
			
	HTTPPostDataChunk pdc_27 = new HTTPPostDataChunk("A1E9452E6C61C67BDFEAE23864643438", postData, requestData_25, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_27);

	}

	public HTTPAction request_197(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C61ED4EDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.bing.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_6 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_6);

	harvestContainer_6.addHarvestInstruction ("resp_hdr_Referer-RPT-Generated (read-only)_1", dcVars[6], ".*", 1, 0, 0, 0, false, "Referer-RPT-Generated (read-only)_3", null, 0, false);
	harvestContainer_6.addHarvestInstruction ("resp_content", dcVars[7], "\\?domain=(.*?)&", 1, 1, 0, 0, false, "domain_3", null, 0, false);
	harvestContainer_6.addHarvestInstruction ("resp_content", dcVars[8], "&c=(.*?)&", 1, 1, 0, 0, false, "c_36", null, 0, false);
	harvestContainer_6.addHarvestInstruction ("resp_content", dcVars[9], "&js=(.*?)&", 1, 1, 0, 0, false, "js_9", null, 0, false);
	harvestContainer_6.addHarvestInstruction ("resp_content", dcVars[10], "&noticeType=(.*?)&", 1, 1, 0, 0, false, "noticeType_3", null, 0, false);
	harvestContainer_6.addHarvestInstruction ("resp_content", dcVars[11], "&text=(.*?)&", 1, 1, 0, 0, false, "text_3", null, 0, false);
	harvestContainer_6.addHarvestInstruction ("resp_content", dcVars[12], "&gtm=(.*?)'", 1, 1, 0, 0, false, "gtm_9", null, 0, false);
	harvestContainer_6.addHarvestInstruction ("resp_content", dcVars[13], "/assets\\.adobedtm\\.com(.*?)\"", 1, 1, 0, 0, false, "assets.adobedtm.com", null, 0, false);
	IDataSub subContainer_197 = new DataSub();
	reqAction.addDataSub(subContainer_197);

		ISubRule sub_376 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_158", null, 0, false);
	subContainer_197.addSubInstruction(sub_376);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C61ED51DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_198(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6214ADDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_198 = new DataSub();
	reqAction.addDataSub(subContainer_198);

		ISubRule sub_377 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_114", null, 0, false);
	subContainer_198.addSubInstruction(sub_377);
		ISubRule sub_378 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_157", null, 0, false);
	subContainer_198.addSubInstruction(sub_378);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6214B0DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_199(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C62B09EDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_199 = new DataSub();
	reqAction.addDataSub(subContainer_199);

		ISubRule sub_379 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_113", null, 0, false);
	subContainer_199.addSubInstruction(sub_379);
		ISubRule sub_380 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_156", null, 0, false);
	subContainer_199.addSubInstruction(sub_380);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C62B0A1DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_200(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C62D7A8DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "assets.adobedtm.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_7 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_7);

	harvestContainer_7.addHarvestInstruction ("resp_content", dcVars[14], ";guid=(.*?)&", 1, 1, 0, 0, false, "guid_7", null, 0, false);
	IDataSub subContainer_200 = new DataSub();
	reqAction.addDataSub(subContainer_200);

		ISubRule sub_381 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_112", null, 0, false);
	subContainer_200.addSubInstruction(sub_381);
		ISubRule sub_382 = new SubRule("req_uri", 0, 98, false, (IDCCoreVar)dcVars[13], false, "Oracle | Integrated _url_15", null, 0, false);
	subContainer_200.addSubInstruction(sub_382);
		ISubRule sub_383 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[29], false, "Host_155", null, 0, false);
	subContainer_200.addSubInstruction(sub_383);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C62D7ABDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_201(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C634CE1DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "consent.truste.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_201 = new DataSub();
	reqAction.addDataSub(subContainer_201);

		ISubRule sub_384 = new SubRule("req_uri", 72, 1, true, (IDCCoreVar)dcVars[12], false, "gtm", null, 0, false);
	subContainer_201.addSubInstruction(sub_384);
		ISubRule sub_385 = new SubRule("req_uri", 63, 4, true, (IDCCoreVar)dcVars[11], false, "text", null, 0, false);
	subContainer_201.addSubInstruction(sub_385);
		ISubRule sub_386 = new SubRule("req_uri", 55, 2, true, (IDCCoreVar)dcVars[10], false, "noticeType", null, 0, false);
	subContainer_201.addSubInstruction(sub_386);
		ISubRule sub_387 = new SubRule("req_uri", 41, 2, true, (IDCCoreVar)dcVars[9], false, "js", null, 0, false);
	subContainer_201.addSubInstruction(sub_387);
		ISubRule sub_388 = new SubRule("req_uri", 28, 9, true, (IDCCoreVar)dcVars[8], false, "c", null, 0, false);
	subContainer_201.addSubInstruction(sub_388);
		ISubRule sub_389 = new SubRule("req_uri", 15, 10, true, (IDCCoreVar)dcVars[7], false, "domain", null, 0, false);
	subContainer_201.addSubInstruction(sub_389);
		ISubRule sub_390 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_111", null, 0, false);
	subContainer_201.addSubInstruction(sub_390);
		ISubRule sub_391 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[40], false, "Host_154", null, 0, false);
	subContainer_201.addSubInstruction(sub_391);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C634CE4DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/javascript;charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_202(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C634D5BDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "service.maxymiser.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_202 = new DataSub();
	reqAction.addDataSub(subContainer_202);

		ISubRule sub_392 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_110", null, 0, false);
	subContainer_202.addSubInstruction(sub_392);
		ISubRule sub_393 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[45], false, "Host_153", null, 0, false);
	subContainer_202.addSubInstruction(sub_393);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C634D5EDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_203(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C637447DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "service.maxymiser.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_203 = new DataSub();
	reqAction.addDataSub(subContainer_203);

		ISubRule sub_394 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_109", null, 0, false);
	subContainer_203.addSubInstruction(sub_394);
		ISubRule sub_395 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[45], false, "Host_152", null, 0, false);
	subContainer_203.addSubInstruction(sub_395);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C63744ADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_204(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C63C202DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "service.maxymiser.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_204 = new DataSub();
	reqAction.addDataSub(subContainer_204);

		ISubRule sub_396 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_108", null, 0, false);
	subContainer_204.addSubInstruction(sub_396);
		ISubRule sub_397 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[45], false, "Host_151", null, 0, false);
	subContainer_204.addSubInstruction(sub_397);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C63C205DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_205(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C641020DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_205 = new DataSub();
	reqAction.addDataSub(subContainer_205);

		ISubRule sub_398 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_107", null, 0, false);
	subContainer_205.addSubInstruction(sub_398);
		ISubRule sub_399 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_150", null, 0, false);
	subContainer_205.addSubInstruction(sub_399);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C641023DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_206(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C645E43DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_8 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_8);

	harvestContainer_8.addHarvestInstruction ("resp_hdr_Referer-RPT-Generated (read-only)_1", dcVars[15], ".*", 1, 0, 0, 0, false, "Referer-RPT-Generated (read-only)_4", null, 0, false);
	IDataSub subContainer_206 = new DataSub();
	reqAction.addDataSub(subContainer_206);

		ISubRule sub_400 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_106", null, 0, false);
	subContainer_206.addSubInstruction(sub_400);
		ISubRule sub_401 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_149", null, 0, false);
	subContainer_206.addSubInstruction(sub_401);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C645E46DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_207(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6548A3DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_207 = new DataSub();
	reqAction.addDataSub(subContainer_207);

		ISubRule sub_402 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_148", null, 0, false);
	subContainer_207.addSubInstruction(sub_402);
		ISubRule sub_403 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_147", null, 0, false);
	subContainer_207.addSubInstruction(sub_403);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C6548A6DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_208(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6548EEDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_208 = new DataSub();
	reqAction.addDataSub(subContainer_208);

		ISubRule sub_404 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_146", null, 0, false);
	subContainer_208.addSubInstruction(sub_404);
		ISubRule sub_405 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_145", null, 0, false);
	subContainer_208.addSubInstruction(sub_405);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C6548F1DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_209(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C656FCCDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_209 = new DataSub();
	reqAction.addDataSub(subContainer_209);

		ISubRule sub_406 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_105", null, 0, false);
	subContainer_209.addSubInstruction(sub_406);
		ISubRule sub_407 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_144", null, 0, false);
	subContainer_209.addSubInstruction(sub_407);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C656FCFDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_210(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C668120DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "identity", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/asset/web/css/home-v4-base.css", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_210 = new DataSub();
	reqAction.addDataSub(subContainer_210);

		ISubRule sub_408 = new SubRule("req_hdr_Referer_1", 0, 53, false, (IDCCoreVar)dcVars[15], false, "Referer_104", null, 0, false);
	subContainer_210.addSubInstruction(sub_408);
		ISubRule sub_409 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_143", null, 0, false);
	subContainer_210.addSubInstruction(sub_409);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C645E43DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C668123DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("unknown");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_211(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C674481DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_211 = new DataSub();
	reqAction.addDataSub(subContainer_211);

		ISubRule sub_410 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_103", null, 0, false);
	subContainer_211.addSubInstruction(sub_410);
		ISubRule sub_411 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_142", null, 0, false);
	subContainer_211.addSubInstruction(sub_411);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C674484DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_212(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6792A1DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "consent.trustarc.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_212 = new DataSub();
	reqAction.addDataSub(subContainer_212);

		ISubRule sub_412 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_102", null, 0, false);
	subContainer_212.addSubInstruction(sub_412);
		ISubRule sub_413 = new SubRule("req_hdr_Host_1", 0, 20, false, (IDCCoreVar)vars[44], false, "Host_141", null, 0, false);
	subContainer_212.addSubInstruction(sub_413);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6792A4DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_213(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C67E0F1DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "www.oracleimg.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_9 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_9);

	harvestContainer_9.addHarvestInstruction ("resp_content", dcVars[16], "\\?AQB=(.*?)&", 1, 1, 0, 0, false, "AQB_3", null, 0, false);
	harvestContainer_9.addHarvestInstruction ("resp_content", dcVars[17], "&ndh=(.*?)&", 1, 1, 0, 0, false, "ndh_3", null, 0, false);
	harvestContainer_9.addHarvestInstruction ("resp_content", dcVars[18], "&pf=(.*?)&", 1, 1, 0, 0, false, "pf_4", null, 0, false);
	harvestContainer_9.addHarvestInstruction ("resp_content", dcVars[19], "&AQE=(.*?)\"", 1, 1, 0, 0, false, "AQE_3", null, 0, false);
	harvestContainer_9.addHarvestInstruction ("resp_content", dcVars[20], ";a\\.ssl=(.*?)<", 1, 1, 0, 0, false, "a.ssl", null, 0, false);
	IDataSub subContainer_213 = new DataSub();
	reqAction.addDataSub(subContainer_213);

		ISubRule sub_414 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_101", null, 0, false);
	subContainer_213.addSubInstruction(sub_414);
		ISubRule sub_415 = new SubRule("req_hdr_Host_1", 0, 17, false, (IDCCoreVar)vars[37], false, "Host_140", null, 0, false);
	subContainer_213.addSubInstruction(sub_415);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6807C1DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("Application/js; charset=");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_214(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6855F1DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "s.go-mpulse.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_10 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_10);

	harvestContainer_10.addHarvestInstruction ("resp_content", dcVars[21], "&sb=(.*?)\"", 1, 1, 0, 0, false, "sb_5", null, 0, false);
	IDataSub subContainer_214 = new DataSub();
	reqAction.addDataSub(subContainer_214);

		ISubRule sub_416 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_100", null, 0, false);
	subContainer_214.addSubInstruction(sub_416);
		ISubRule sub_417 = new SubRule("req_hdr_Host_1", 0, 15, false, (IDCCoreVar)vars[43], false, "Host_139", null, 0, false);
	subContainer_214.addSubInstruction(sub_417);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6855F4DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_215(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C68CB17DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_215 = new DataSub();
	reqAction.addDataSub(subContainer_215);

		ISubRule sub_418 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_138", null, 0, false);
	subContainer_215.addSubInstruction(sub_418);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C68CB1ADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("unknown");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_216(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C68F27FDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "assets.adobedtm.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_11 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_11);

	harvestContainer_11.addHarvestInstruction ("resp_content", dcVars[22], "/tags\\.bluekai\\.com(.*?)\"", 1, 1, 0, 0, false, "tags.bluekai.com", null, 0, false);
	harvestContainer_11.addHarvestInstruction ("resp_content", dcVars[23], "/tags\\.bluekai\\.com(.*?)\"", 1, 0, 0, 0, false, "tags.bluekai.com_2", null, 0, false);
	IDataSub subContainer_216 = new DataSub();
	reqAction.addDataSub(subContainer_216);

		ISubRule sub_419 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_99", null, 0, false);
	subContainer_216.addSubInstruction(sub_419);
		ISubRule sub_420 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[29], false, "Host_137", null, 0, false);
	subContainer_216.addSubInstruction(sub_420);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C68F282DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_217(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C691993DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_217 = new DataSub();
	reqAction.addDataSub(subContainer_217);

		ISubRule sub_421 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_98", null, 0, false);
	subContainer_217.addSubInstruction(sub_421);
		ISubRule sub_422 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_136", null, 0, false);
	subContainer_217.addSubInstruction(sub_422);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C691996DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_218(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C696753DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_218 = new DataSub();
	reqAction.addDataSub(subContainer_218);

		ISubRule sub_423 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_97", null, 0, false);
	subContainer_218.addSubInstruction(sub_423);
		ISubRule sub_424 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_135", null, 0, false);
	subContainer_218.addSubInstruction(sub_424);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C696756DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_219(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6A0393DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_219 = new DataSub();
	reqAction.addDataSub(subContainer_219);

		ISubRule sub_425 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_96", null, 0, false);
	subContainer_219.addSubInstruction(sub_425);
		ISubRule sub_426 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_134", null, 0, false);
	subContainer_219.addSubInstruction(sub_426);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6A0396DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_220(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6A51BEDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "assets.adobedtm.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_220 = new DataSub();
	reqAction.addDataSub(subContainer_220);

		ISubRule sub_427 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_95", null, 0, false);
	subContainer_220.addSubInstruction(sub_427);
		ISubRule sub_428 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[29], false, "Host_133", null, 0, false);
	subContainer_220.addSubInstruction(sub_428);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6A51C1DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_221(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6A5235DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_221 = new DataSub();
	reqAction.addDataSub(subContainer_221);

		ISubRule sub_429 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_94", null, 0, false);
	subContainer_221.addSubInstruction(sub_429);
		ISubRule sub_430 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_132", null, 0, false);
	subContainer_221.addSubInstruction(sub_430);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6A5238DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_222(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6A7920DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_222 = new DataSub();
	reqAction.addDataSub(subContainer_222);

		ISubRule sub_431 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_93", null, 0, false);
	subContainer_222.addSubInstruction(sub_431);
		ISubRule sub_432 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_131", null, 0, false);
	subContainer_222.addSubInstruction(sub_432);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6A7923DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_223(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6AA018DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_223 = new DataSub();
	reqAction.addDataSub(subContainer_223);

		ISubRule sub_433 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_92", null, 0, false);
	subContainer_223.addSubInstruction(sub_433);
		ISubRule sub_434 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_130", null, 0, false);
	subContainer_223.addSubInstruction(sub_434);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6AA01BDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_224(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6AC729DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "assets.adobedtm.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_224 = new DataSub();
	reqAction.addDataSub(subContainer_224);

		ISubRule sub_435 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_91", null, 0, false);
	subContainer_224.addSubInstruction(sub_435);
		ISubRule sub_436 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[29], false, "Host_129", null, 0, false);
	subContainer_224.addSubInstruction(sub_436);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6AC72CDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_225(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6AEE66DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "assets.adobedtm.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_225 = new DataSub();
	reqAction.addDataSub(subContainer_225);

		ISubRule sub_437 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_90", null, 0, false);
	subContainer_225.addSubInstruction(sub_437);
		ISubRule sub_438 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[29], false, "Host_128", null, 0, false);
	subContainer_225.addSubInstruction(sub_438);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6AEE69DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_226(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6B154DDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "assets.adobedtm.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_226 = new DataSub();
	reqAction.addDataSub(subContainer_226);

		ISubRule sub_439 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_89", null, 0, false);
	subContainer_226.addSubInstruction(sub_439);
		ISubRule sub_440 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[29], false, "Host_127", null, 0, false);
	subContainer_226.addSubInstruction(sub_440);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6B1550DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_227(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6B3C27DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_227 = new DataSub();
	reqAction.addDataSub(subContainer_227);

		ISubRule sub_441 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_88", null, 0, false);
	subContainer_227.addSubInstruction(sub_441);
		ISubRule sub_442 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_126", null, 0, false);
	subContainer_227.addSubInstruction(sub_442);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6B3C2ADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_228(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6B8A94DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/asset/web/css/home-v4-base.css", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_228 = new DataSub();
	reqAction.addDataSub(subContainer_228);

		ISubRule sub_443 = new SubRule("req_hdr_Referer_1", 0, 53, false, (IDCCoreVar)dcVars[15], false, "Referer_87", null, 0, false);
	subContainer_228.addSubInstruction(sub_443);
		ISubRule sub_444 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_125", null, 0, false);
	subContainer_228.addSubInstruction(sub_444);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C645E43DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6B8A97DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_229(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6BB19BDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_229 = new DataSub();
	reqAction.addDataSub(subContainer_229);

		ISubRule sub_445 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_86", null, 0, false);
	subContainer_229.addSubInstruction(sub_445);
		ISubRule sub_446 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_124", null, 0, false);
	subContainer_229.addSubInstruction(sub_446);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6BB19EDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_230(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6C4D83DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain; charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D;s_fid=0776EEBEAB84E1A0-3748B6F459572DD2;s_nr=1552440110195-New;gpw_e24=no%20value;s_cc=true", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_12 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_12);

	harvestContainer_12.addHarvestInstruction ("resp_hdr_Location_1", dcVars[24], ".*", 1, 0, 0, 0, false, "Location", null, 0, false);
	IDataSub subContainer_230 = new DataSub();
	reqAction.addDataSub(subContainer_230);

		ISubRule sub_447 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_85", null, 0, false);
	subContainer_230.addSubInstruction(sub_447);
		ISubRule sub_448 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_123", null, 0, false);
	subContainer_230.addSubInstruction(sub_448);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6C4D86DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(301);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_231(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6C7490DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain; charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D;s_fid=0776EEBEAB84E1A0-3748B6F459572DD2;s_nr=1552440110195-New;gpw_e24=no%20value;s_cc=true", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_231 = new DataSub();
	reqAction.addDataSub(subContainer_231);

		ISubRule sub_449 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_84", null, 0, false);
	subContainer_231.addSubInstruction(sub_449);
		ISubRule sub_450 = new SubRule("req_uri", 0, 16, false, (IDCCoreVar)dcVars[24], false, "Oracle | Integrated _url_14", null, 0, false);
	subContainer_231.addSubInstruction(sub_450);
		ISubRule sub_451 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_122", null, 0, false);
	subContainer_231.addSubInstruction(sub_451);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6C4D83DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6C7493DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_232(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6CC2C1DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "application/json, text/javascript, */*; q=0.01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-Requested-With", "XMLHttpRequest", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D;s_fid=0776EEBEAB84E1A0-3748B6F459572DD2;s_nr=1552440110195-New;gpw_e24=no%20value;s_cc=true", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_232 = new DataSub();
	reqAction.addDataSub(subContainer_232);

		ISubRule sub_452 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_83", null, 0, false);
	subContainer_232.addSubInstruction(sub_452);
		ISubRule sub_453 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_121", null, 0, false);
	subContainer_232.addSubInstruction(sub_453);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6CC2C4DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_233(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6CC330DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "application/json, text/javascript, */*; q=0.01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-Requested-With", "XMLHttpRequest", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D;s_fid=0776EEBEAB84E1A0-3748B6F459572DD2;s_nr=1552440110195-New;gpw_e24=no%20value;s_cc=true;ORA_COUNTRYSELECT=true", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_233 = new DataSub();
	reqAction.addDataSub(subContainer_233);

		ISubRule sub_454 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_82", null, 0, false);
	subContainer_233.addSubInstruction(sub_454);
		ISubRule sub_455 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_120", null, 0, false);
	subContainer_233.addSubInstruction(sub_455);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6CC333DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_234(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6CEA30DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "application/json, text/javascript, */*; q=0.01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-Requested-With", "XMLHttpRequest", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D;s_fid=0776EEBEAB84E1A0-3748B6F459572DD2;s_nr=1552440110195-New;gpw_e24=no%20value;s_cc=true;ORA_COUNTRYSELECT=true", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_234 = new DataSub();
	reqAction.addDataSub(subContainer_234);

		ISubRule sub_456 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_81", null, 0, false);
	subContainer_234.addSubInstruction(sub_456);
		ISubRule sub_457 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_119", null, 0, false);
	subContainer_234.addSubInstruction(sub_457);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6CEA33DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_235(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6D113ADFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "sc60032181us1.cobrowse.oraclecloud.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_235 = new DataSub();
	reqAction.addDataSub(subContainer_235);

		ISubRule sub_458 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_80", null, 0, false);
	subContainer_235.addSubInstruction(sub_458);
		ISubRule sub_459 = new SubRule("req_hdr_Host_1", 0, 38, false, (IDCCoreVar)vars[35], false, "Host_118", null, 0, false);
	subContainer_235.addSubInstruction(sub_459);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6D37E0DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_236(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6D5F01DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "img03.en25.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_13 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_13);

	harvestContainer_13.addHarvestInstruction ("resp_content", dcVars[25], "&optin=(.*?)\"", 3, 3, 0, 0, false, "optin_3", null, 0, false);
	harvestContainer_13.addHarvestInstruction ("resp_content", dcVars[26], "\\?pps=(.*?)&", 3, 1, 0, 0, false, "pps_3", null, 0, false);
	IDataSub subContainer_236 = new DataSub();
	reqAction.addDataSub(subContainer_236);

		ISubRule sub_460 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_79", null, 0, false);
	subContainer_236.addSubInstruction(sub_460);
		ISubRule sub_461 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[33], false, "Host_117", null, 0, false);
	subContainer_236.addSubInstruction(sub_461);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6D5F04DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_237(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6D5F7DDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_237 = new DataSub();
	reqAction.addDataSub(subContainer_237);

		ISubRule sub_462 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_116", null, 0, false);
	subContainer_237.addSubInstruction(sub_462);
		ISubRule sub_463 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_115", null, 0, false);
	subContainer_237.addSubInstruction(sub_463);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C6D5F80DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_238(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6D8655DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "oracle.112.2o7.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_14 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_14);

	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[27], "http.{0,1}://.*?(/.*)", 1, 0, 0, 0, false, "Location_35", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[28], "&fid=(.*?)&", 1, 1, 0, 0, false, "Location_2", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[29], "&ce=(.*?)&", 1, 1, 0, 0, false, "Location_3", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[30], "&ns=(.*?)&", 1, 1, 0, 0, false, "Location_4", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[31], "&r=(.*?)&", 1, 1, 0, 0, false, "Location_34", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[32], "&cc=(.*?)&", 1, 1, 0, 0, false, "Location_5", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[33], "&h3=(.*?)&", 1, 1, 0, 0, false, "Location_6", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[34], "&c20=(.*?)&", 1, 1, 0, 0, false, "Location_7", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[35], "&v20=(.*?)&", 1, 1, 0, 0, false, "Location_8", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[36], "&c24=(.*?)&", 1, 1, 0, 0, false, "Location_9", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[37], "&c26=(.*?)&", 1, 1, 0, 0, false, "Location_10", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[38], "&v26=(.*?)&", 1, 1, 0, 0, false, "Location_11", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[39], "&c38=(.*?)&", 1, 1, 0, 0, false, "Location_12", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[40], "&c39=(.*?)&", 1, 1, 0, 0, false, "Location_13", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[41], "&c50=(.*?)&", 1, 1, 0, 0, false, "Location_14", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[42], "&v50=(.*?)&", 1, 1, 0, 0, false, "Location_15", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[43], "&c51=(.*?)&", 1, 1, 0, 0, false, "Location_16", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[44], "&v51=(.*?)&", 1, 1, 0, 0, false, "Location_17", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[45], "&c54=(.*?)&", 1, 1, 0, 0, false, "Location_18", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[46], "&v54=(.*?)&", 1, 1, 0, 0, false, "Location_19", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[47], "&c55=(.*?)&", 1, 1, 0, 0, false, "Location_20", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[48], "&c62=(.*?)&", 1, 1, 0, 0, false, "Location_21", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[49], "&c67=(.*?)&", 1, 1, 0, 0, false, "Location_22", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[50], "&v70=(.*?)&", 1, 1, 0, 0, false, "Location_23", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[51], "&v71=(.*?)&", 1, 1, 0, 0, false, "Location_24", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[52], "&v72=(.*?)&", 1, 1, 0, 0, false, "Location_25", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[53], "&v73=(.*?)&", 1, 1, 0, 0, false, "Location_26", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[54], "&s=(.*?)&", 1, 1, 0, 0, false, "Location_27", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[55], "&c=(.*?)&", 1, 1, 0, 0, false, "Location_28", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[56], "&j=(.*?)&", 1, 1, 0, 0, false, "Location_29", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[57], "&v=(.*?)&", 1, 1, 0, 0, false, "Location_30", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[58], "&k=(.*?)&", 1, 1, 0, 0, false, "Location_31", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[59], "&bw=(.*?)&", 1, 1, 0, 0, false, "Location_32", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_hdr_Location_1", dcVars[60], "&bh=(.*?)&", 1, 1, 0, 0, false, "Location_33", null, 0, false);
	IDataSub subContainer_238 = new DataSub();
	reqAction.addDataSub(subContainer_238);

		ISubRule sub_464 = new SubRule("req_uri", 735, 1, true, (IDCCoreVar)dcVars[19], false, "AQE", null, 0, false);
	subContainer_238.addSubInstruction(sub_464);
		ISubRule sub_465 = new SubRule("req_uri", 71, 1, true, (IDCCoreVar)dcVars[18], false, "pf", null, 0, false);
	subContainer_238.addSubInstruction(sub_465);
		ISubRule sub_466 = new SubRule("req_uri", 66, 1, true, (IDCCoreVar)dcVars[17], false, "ndh", null, 0, false);
	subContainer_238.addSubInstruction(sub_466);
		ISubRule sub_467 = new SubRule("req_uri", 60, 1, true, (IDCCoreVar)dcVars[16], false, "AQB", null, 0, false);
	subContainer_238.addSubInstruction(sub_467);
		ISubRule sub_468 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_78", null, 0, false);
	subContainer_238.addSubInstruction(sub_468);
		ISubRule sub_469 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[36], false, "Host_114", null, 0, false);
	subContainer_238.addSubInstruction(sub_469);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C67E0F1DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6D8658DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(302);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/plain");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_239(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6DAD59DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "c.go-mpulse.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_15 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_15);

	harvestContainer_15.addHarvestInstruction ("resp_content", dcVars[61], "\"h\\.key\":\"(.*?)\"", 1, 1, 0, 0, false, "h.key_5", null, 0, false);
	harvestContainer_15.addHarvestInstruction ("resp_content", dcVars[62], "\"h\\.key\":\"(.*?)\"", 1, 0, 0, 0, false, "h.key_6", null, 0, false);
	harvestContainer_15.addHarvestInstruction ("resp_content", dcVars[63], "\"h\\.d\":\"(.*?)\"", 1, 1, 0, 0, false, "h.d_5", null, 0, false);
	harvestContainer_15.addHarvestInstruction ("resp_content", dcVars[64], "\"h\\.d\":\"(.*?)\"", 1, 0, 0, 0, false, "h.d_6", null, 0, false);
	harvestContainer_15.addHarvestInstruction ("resp_content", dcVars[65], "\"h\\.cr\":\"(.*?)\"", 1, 1, 0, 0, false, "h.cr_5", null, 0, false);
	harvestContainer_15.addHarvestInstruction ("resp_content", dcVars[66], "\"h\\.cr\":\"(.*?)\"", 1, 0, 0, 0, false, "h.cr_6", null, 0, false);
	IDataSub subContainer_239 = new DataSub();
	reqAction.addDataSub(subContainer_239);

		ISubRule sub_470 = new SubRule("req_uri", 95, 1, true, (IDCCoreVar)dcVars[20], false, "sl", null, 0, false);
	subContainer_239.addSubInstruction(sub_470);
		ISubRule sub_471 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_77", null, 0, false);
	subContainer_239.addSubInstruction(sub_471);
		ISubRule sub_472 = new SubRule("req_hdr_Host_1", 0, 15, false, (IDCCoreVar)vars[38], false, "Host_113", null, 0, false);
	subContainer_239.addSubInstruction(sub_472);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C67E0F1DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6DAD5CDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_240(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6DD441DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "public.cobrowse.oraclecloud.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_240 = new DataSub();
	reqAction.addDataSub(subContainer_240);

		ISubRule sub_473 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_76", null, 0, false);
	subContainer_240.addSubInstruction(sub_473);
		ISubRule sub_474 = new SubRule("req_hdr_Host_1", 0, 31, false, (IDCCoreVar)vars[30], false, "Host_112", null, 0, false);
	subContainer_240.addSubInstruction(sub_474);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6DD444DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_241(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6E2251DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "tags.bkrtx.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_241 = new DataSub();
	reqAction.addDataSub(subContainer_241);

		ISubRule sub_475 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_75", null, 0, false);
	subContainer_241.addSubInstruction(sub_475);
		ISubRule sub_476 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[42], false, "Host_111", null, 0, false);
	subContainer_241.addSubInstruction(sub_476);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6E2254DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_242(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6E7060DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "public.cobrowse.oraclecloud.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_242 = new DataSub();
	reqAction.addDataSub(subContainer_242);

		ISubRule sub_477 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_74", null, 0, false);
	subContainer_242.addSubInstruction(sub_477);
		ISubRule sub_478 = new SubRule("req_hdr_Host_1", 0, 31, false, (IDCCoreVar)vars[30], false, "Host_110", null, 0, false);
	subContainer_242.addSubInstruction(sub_478);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6E7063DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_243(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6EBE91DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "tags.bluekai.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "bkdc=phx;bku=Whz99/Z7CNhB83yl", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_243 = new DataSub();
	reqAction.addDataSub(subContainer_243);

		ISubRule sub_479 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_73", null, 0, false);
	subContainer_243.addSubInstruction(sub_479);
		ISubRule sub_480 = new SubRule("req_uri", 0, 18, false, (IDCCoreVar)dcVars[23], false, "Oracle | Integrated _url_13", null, 0, false);
	subContainer_243.addSubInstruction(sub_480);
		ISubRule sub_481 = new SubRule("req_hdr_Host_1", 0, 16, false, (IDCCoreVar)vars[34], false, "Host_109", null, 0, false);
	subContainer_243.addSubInstruction(sub_481);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C68F27FDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6EBE94DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_244(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6EE59EDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "s1973398186.t.eloqua.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "ELOQUA=GUID=7C4027BB7E5E43E69317D065A3A647EC;ELQSTATUS=OK", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_16 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_16);

	harvestContainer_16.addHarvestInstruction ("resp_hdr_Location_1", dcVars[67], "http.{0,1}://.*?(/.*)", 1, 0, 0, 0, false, "Location_38", null, 0, false);
	harvestContainer_16.addHarvestInstruction ("resp_hdr_Location_1", dcVars[68], "&siteid=(.*?)&", 1, 1, 0, 0, false, "Location_36", null, 0, false);
	harvestContainer_16.addHarvestInstruction ("resp_hdr_Location_1", dcVars[69], "&tzo=(.*?)&", 1, 1, 0, 0, false, "Location_37", null, 0, false);
	IDataSub subContainer_244 = new DataSub();
	reqAction.addDataSub(subContainer_244);

		ISubRule sub_482 = new SubRule("req_uri", 100, 8, true, (IDCCoreVar)dcVars[25], false, "optin", null, 0, false);
	subContainer_244.addSubInstruction(sub_482);
		ISubRule sub_483 = new SubRule("req_uri", 24, 1, true, (IDCCoreVar)dcVars[26], false, "pps", null, 0, false);
	subContainer_244.addSubInstruction(sub_483);
		ISubRule sub_484 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_72", null, 0, false);
	subContainer_244.addSubInstruction(sub_484);
		ISubRule sub_485 = new SubRule("req_hdr_Host_1", 0, 24, false, (IDCCoreVar)vars[32], false, "Host_108", null, 0, false);
	subContainer_244.addSubInstruction(sub_485);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6D5F01DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6EE5A1DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(302);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_245(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6EE60ADFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "oracle.112.2o7.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_245 = new DataSub();
	reqAction.addDataSub(subContainer_245);

		ISubRule sub_486 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_71", null, 0, false);
	subContainer_245.addSubInstruction(sub_486);
		ISubRule sub_487 = new SubRule("req_uri", 0, 786, false, (IDCCoreVar)dcVars[27], false, "Oracle | Integrated _url_12", null, 0, false);
	subContainer_245.addSubInstruction(sub_487);
		ISubRule sub_488 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[36], false, "Host_107", null, 0, false);
	subContainer_245.addSubInstruction(sub_488);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6D8655DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6EE60DDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_246(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6F0D07DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_246 = new DataSub();
	reqAction.addDataSub(subContainer_246);

		ISubRule sub_489 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_106", null, 0, false);
	subContainer_246.addSubInstruction(sub_489);
		ISubRule sub_490 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_105", null, 0, false);
	subContainer_246.addSubInstruction(sub_490);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C6F0D0ADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_247(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6F33C1DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "stags.bluekai.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "bkdc=phx", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_247 = new DataSub();
	reqAction.addDataSub(subContainer_247);

		ISubRule sub_491 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_70", null, 0, false);
	subContainer_247.addSubInstruction(sub_491);
		ISubRule sub_492 = new SubRule("req_hdr_Host_1", 0, 17, false, (IDCCoreVar)vars[31], false, "Host_104", null, 0, false);
	subContainer_247.addSubInstruction(sub_492);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6EBE91DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6F33C4DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_248(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6F3443DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "go.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D;s_fid=0776EEBEAB84E1A0-3748B6F459572DD2;s_nr=1552440110195-New;gpw_e24=no%20value;s_cc=true", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_248 = new DataSub();
	reqAction.addDataSub(subContainer_248);

		ISubRule sub_493 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_69", null, 0, false);
	subContainer_248.addSubInstruction(sub_493);
		ISubRule sub_494 = new SubRule("req_uri", 0, 155, false, (IDCCoreVar)dcVars[67], false, "Oracle | Integrated _url_11", null, 0, false);
	subContainer_248.addSubInstruction(sub_494);
		ISubRule sub_495 = new SubRule("req_hdr_Host_1", 0, 13, false, (IDCCoreVar)vars[41], false, "Host_103", null, 0, false);
	subContainer_248.addSubInstruction(sub_495);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6EE59EDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6EE59EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6F3446DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_249(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6F5B21DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_249 = new DataSub();
	reqAction.addDataSub(subContainer_249);

		ISubRule sub_496 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_102", null, 0, false);
	subContainer_249.addSubInstruction(sub_496);
		ISubRule sub_497 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_101", null, 0, false);
	subContainer_249.addSubInstruction(sub_497);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C6F5B24DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_250(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6F81E1DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "36a3fec2.akstat.io", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "application/x-www-form-urlencoded", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "7082", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_29(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_251 = new DataSub();
	reqAction.addDataSub(subContainer_251);

		ISubRule sub_503 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_68", null, 0, false);
	subContainer_251.addSubInstruction(sub_503);
		ISubRule sub_504 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[0], false, "Host_100", null, 0, false);
	subContainer_251.addSubInstruction(sub_504);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6855F1DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6D8655DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6DAD59DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6F81E4DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_29(HTTPPostData postData) {
					String requestData_26 = MetaString.encode(ZipEntryProxy.asXMLFragment(
	                                   "A1E9452E6BF91950DFEAE23864643438.testdata",
	                                   "A1E9452E6C6F8226DFEAE23864643438",
	                                   7082));
			
	HTTPPostDataChunk pdc_28 = new HTTPPostDataChunk("A1E9452E6C6F8226DFEAE23864643438", postData, requestData_26, "UTF-8", 109, 7082);
	postData.addDataChunk(pdc_28);

	IDataSub subContainer_250 = new DataSub();
	pdc_28.addDataSub(subContainer_250);

		ISubRule sub_498 = new SubRule("req_content", 7081, 1, true, (IDCCoreVar)dcVars[21], false, "sb", null, 0, false);
	subContainer_250.addSubInstruction(sub_498);
		ISubRule sub_499 = new SubRule("req_content", 7037, 40, true, (IDCCoreVar)dcVars[66], false, "h.cr", null, 0, false);
	subContainer_250.addSubInstruction(sub_499);
		ISubRule sub_500 = new SubRule("req_content", 6259, 29, false, (IDCCoreVar)dcVars[31], false, "r", null, 0, false);
	subContainer_250.addSubInstruction(sub_500);
		ISubRule sub_501 = new SubRule("req_content", 21, 29, true, (IDCCoreVar)dcVars[62], false, "h.key", null, 0, false);
	subContainer_250.addSubInstruction(sub_501);
		ISubRule sub_502 = new SubRule("req_content", 4, 10, true, (IDCCoreVar)dcVars[64], false, "h.d", null, 0, false);
	subContainer_250.addSubInstruction(sub_502);
	



	}

	public HTTPAction request_251(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6F825EDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_252 = new DataSub();
	reqAction.addDataSub(subContainer_252);

		ISubRule sub_505 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_99", null, 0, false);
	subContainer_252.addSubInstruction(sub_505);
		ISubRule sub_506 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_98", null, 0, false);
	subContainer_252.addSubInstruction(sub_506);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C6FA8E0DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_252(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6FA928DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_253 = new DataSub();
	reqAction.addDataSub(subContainer_253);

		ISubRule sub_507 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_97", null, 0, false);
	subContainer_253.addSubInstruction(sub_507);
		ISubRule sub_508 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_96", null, 0, false);
	subContainer_253.addSubInstruction(sub_508);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C6FA92BDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_253(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6FA973DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "36a3fec2.akstat.io", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "application/x-www-form-urlencoded", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "1096", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_30(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_255 = new DataSub();
	reqAction.addDataSub(subContainer_255);

		ISubRule sub_514 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_67", null, 0, false);
	subContainer_255.addSubInstruction(sub_514);
		ISubRule sub_515 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[0], false, "Host_95", null, 0, false);
	subContainer_255.addSubInstruction(sub_515);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6855F1DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6D8655DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6DAD59DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6FA976DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_30(HTTPPostData postData) {
				StringBuffer strBuf_23 = new StringBuffer();
strBuf_23.append("h.d=oracle.com&h.key=DXNLE-YBWWY-AR74T-WMD99-77VRA&h.t=15524");
strBuf_23.append("40111467&c.e=jt6ir9n6&c.tti.m=raf&cdim.subDomain=www.oracle.");
strBuf_23.append("com&cdim.Language=en-us&rt.blstart=1552440109503&u=https%3A%");
strBuf_23.append("2F%2Fwww.oracle.com%2Findex.html&r=https%3A%2F%2Fwww.bing.co");
strBuf_23.append("m%2F&v=1.571.0&rt.si=0a8ed298-88bb-4c32-8e29-3e61c3a5ab58-po");
strBuf_23.append("a6gc&vis.st=visible&ua.plt=Linux%20x86_64&ua.vnd=&pid=mybpqq");
strBuf_23.append("nt&if=&ak.v=19&ak.cp=82485&ak.ai=165266&ak.rid=1c2a38b8&ak.a");
strBuf_23.append("2=0&ak.feo=0&dom.doms=14&scr.xy=1920x1080&scr.bpp=24%2F24&sc");
strBuf_23.append("r.orn=0%2Flandscape-primary&cpu.cnc=4&dom.ln=1973&dom.sz=172");
strBuf_23.append("074&dom.img=12&dom.img.ext=9&dom.script=23&dom.script.ext=16");
strBuf_23.append("&dom.iframe=3&dom.iframe.ext=1&dom.link=38&dom.link.css=2&nu");
strBuf_23.append("=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&rt.tstart=15524");
strBuf_23.append("40107922&rt.bstart=1552440110218&rt.end=1552440111698&t_done");
strBuf_23.append("=3776&rt.tt=3776&rt.obo=0&rt.quit=&rt.ss=1552440107922&rt.sl");
strBuf_23.append("=1&ak.ol=0&ak.cr=20&ak.ipv=4&ak.proto=&ak.r=32986&ak.m=dscx&");
strBuf_23.append("ak.n=essl&ak.bpcip=192.8.18.0&ak.cport=54400&ak.gh=23.198.10");
strBuf_23.append(".159&ak.quicv=&ak.tlsv=tls1.2&ak.0rtt=&ak.csrc=-&ak.acc=reno");
strBuf_23.append("&dom.res=42&c.lb=jt6ircli&h.cr=0df3756357b8d27660ed32e63b800");
strBuf_23.append("3efdf697929&sb=1");
String requestData_27 = strBuf_23.toString();
			
	HTTPPostDataChunk pdc_29 = new HTTPPostDataChunk("A1E9452E6C6FD02ADFEAE23864643438", postData, requestData_27, "UTF-8", 109, 1096);
	postData.addDataChunk(pdc_29);

	IDataSub subContainer_254 = new DataSub();
	pdc_29.addDataSub(subContainer_254);

		ISubRule sub_509 = new SubRule("req_content", 1095, 1, true, (IDCCoreVar)dcVars[21], false, "sb", null, 0, false);
	subContainer_254.addSubInstruction(sub_509);
		ISubRule sub_510 = new SubRule("req_content", 1051, 40, true, (IDCCoreVar)dcVars[65], false, "h.cr", null, 0, false);
	subContainer_254.addSubInstruction(sub_510);
		ISubRule sub_511 = new SubRule("req_content", 215, 29, false, (IDCCoreVar)dcVars[31], false, "r", null, 0, false);
	subContainer_254.addSubInstruction(sub_511);
		ISubRule sub_512 = new SubRule("req_content", 21, 29, true, (IDCCoreVar)dcVars[61], false, "h.key", null, 0, false);
	subContainer_254.addSubInstruction(sub_512);
		ISubRule sub_513 = new SubRule("req_content", 4, 10, true, (IDCCoreVar)dcVars[63], false, "h.d", null, 0, false);
	subContainer_254.addSubInstruction(sub_513);
	



	}

	public HTTPAction request_254(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C6FF700DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/index.html", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D;s_fid=0776EEBEAB84E1A0-3748B6F459572DD2;s_nr=1552440117148-New;gpw_e24=https%3A%2F%2Fwww.oracle.com%2Findex.html;s_cc=true;ORA_COUNTRYSELECT=true;ORA_WWW_ABMDATA={\"loaded\":\"NotSet\",\"data\":[],\"bkId\":\"NoValue\"};RT=\"sl=1&ss=1552440107922&tt=3776&obo=0&bcn=%2F%2F36a3fec2.akstat.io%2F&sh=1552440111708%3D1%3A0%3A3776&dm=oracle.com&si=0a8ed298-88bb-4c32-8e29-3e61c3a5ab58&ld=1552440111709&nu=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&cl=1552440117118&r=https%3A%2F%2Fwww.oracle.com%2Findex.html&ul=1552440117153\";s_sq=%5B%5BB%5D%5D", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_17 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_17);

	harvestContainer_17.addHarvestInstruction ("resp_hdr_Referer-RPT-Generated (read-only)_1", dcVars[70], ".*", 1, 0, 0, 0, false, "Referer-RPT-Generated (read-only)_5", null, 0, false);
	harvestContainer_17.addHarvestInstruction ("resp_content", dcVars[71], "\\?domain=(.*?)&", 1, 1, 0, 0, false, "domain_4", null, 0, false);
	harvestContainer_17.addHarvestInstruction ("resp_content", dcVars[72], "&c=(.*?)&", 1, 1, 0, 0, false, "c_37", null, 0, false);
	harvestContainer_17.addHarvestInstruction ("resp_content", dcVars[73], "&js=(.*?)&", 1, 1, 0, 0, false, "js_10", null, 0, false);
	harvestContainer_17.addHarvestInstruction ("resp_content", dcVars[74], "&noticeType=(.*?)&", 1, 1, 0, 0, false, "noticeType_4", null, 0, false);
	harvestContainer_17.addHarvestInstruction ("resp_content", dcVars[75], "&text=(.*?)&", 1, 1, 0, 0, false, "text_4", null, 0, false);
	harvestContainer_17.addHarvestInstruction ("resp_content", dcVars[76], "&gtm=(.*?)'", 1, 1, 0, 0, false, "gtm_10", null, 0, false);
	IDataSub subContainer_256 = new DataSub();
	reqAction.addDataSub(subContainer_256);

		ISubRule sub_516 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[6], false, "Referer_66", null, 0, false);
	subContainer_256.addSubInstruction(sub_516);
		ISubRule sub_517 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_94", null, 0, false);
	subContainer_256.addSubInstruction(sub_517);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6F3443DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C6FF703DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_255(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C701E79DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "www.oracleimg.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_257 = new DataSub();
	reqAction.addDataSub(subContainer_257);

		ISubRule sub_518 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_65", null, 0, false);
	subContainer_257.addSubInstruction(sub_518);
		ISubRule sub_519 = new SubRule("req_hdr_Host_1", 0, 17, false, (IDCCoreVar)vars[37], false, "Host_93", null, 0, false);
	subContainer_257.addSubInstruction(sub_519);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C701E7CDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("Application/js; charset=");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_256(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C704567DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "consent.truste.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_258 = new DataSub();
	reqAction.addDataSub(subContainer_258);

		ISubRule sub_520 = new SubRule("req_uri", 72, 1, true, (IDCCoreVar)dcVars[76], false, "gtm", null, 0, false);
	subContainer_258.addSubInstruction(sub_520);
		ISubRule sub_521 = new SubRule("req_uri", 63, 4, true, (IDCCoreVar)dcVars[75], false, "text", null, 0, false);
	subContainer_258.addSubInstruction(sub_521);
		ISubRule sub_522 = new SubRule("req_uri", 55, 2, true, (IDCCoreVar)dcVars[74], false, "noticeType", null, 0, false);
	subContainer_258.addSubInstruction(sub_522);
		ISubRule sub_523 = new SubRule("req_uri", 41, 2, true, (IDCCoreVar)dcVars[73], false, "js", null, 0, false);
	subContainer_258.addSubInstruction(sub_523);
		ISubRule sub_524 = new SubRule("req_uri", 28, 9, true, (IDCCoreVar)dcVars[72], false, "c", null, 0, false);
	subContainer_258.addSubInstruction(sub_524);
		ISubRule sub_525 = new SubRule("req_uri", 15, 10, true, (IDCCoreVar)dcVars[71], false, "domain", null, 0, false);
	subContainer_258.addSubInstruction(sub_525);
		ISubRule sub_526 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_64", null, 0, false);
	subContainer_258.addSubInstruction(sub_526);
		ISubRule sub_527 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[40], false, "Host_92", null, 0, false);
	subContainer_258.addSubInstruction(sub_527);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C70456ADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/javascript;charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_257(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C706C33DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D;s_fid=0776EEBEAB84E1A0-3748B6F459572DD2;s_nr=1552440117148-New;gpw_e24=https%3A%2F%2Fwww.oracle.com%2Findex.html;s_cc=true;ORA_COUNTRYSELECT=true;ORA_WWW_ABMDATA={\"loaded\":\"NotSet\",\"data\":[],\"bkId\":\"NoValue\"};RT=\"sl=1&ss=1552440107922&tt=3776&obo=0&bcn=%2F%2F36a3fec2.akstat.io%2F&sh=1552440111708%3D1%3A0%3A3776&dm=oracle.com&si=0a8ed298-88bb-4c32-8e29-3e61c3a5ab58&ld=1552440111709&nu=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&cl=1552440117118&r=https%3A%2F%2Fwww.oracle.com%2Findex.html&ul=1552440117153&hd=1552440117226\";s_sq=%5B%5BB%5D%5D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_259 = new DataSub();
	reqAction.addDataSub(subContainer_259);

		ISubRule sub_528 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_63", null, 0, false);
	subContainer_259.addSubInstruction(sub_528);
		ISubRule sub_529 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_91", null, 0, false);
	subContainer_259.addSubInstruction(sub_529);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6F3443DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C706C36DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_258(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C715697DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D;s_fid=0776EEBEAB84E1A0-3748B6F459572DD2;s_nr=1552440117148-New;gpw_e24=https%3A%2F%2Fwww.oracle.com%2Findex.html;s_cc=true;ORA_COUNTRYSELECT=true;ORA_WWW_ABMDATA={\"loaded\":\"NotSet\",\"data\":[],\"bkId\":\"NoValue\"};RT=\"sl=1&ss=1552440107922&tt=3776&obo=0&bcn=%2F%2F36a3fec2.akstat.io%2F&sh=1552440111708%3D1%3A0%3A3776&dm=oracle.com&si=0a8ed298-88bb-4c32-8e29-3e61c3a5ab58&ld=1552440111709&nu=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&cl=1552440117118&r=https%3A%2F%2Fwww.oracle.com%2Findex.html&ul=1552440117153&hd=1552440117226\";s_sq=%5B%5BB%5D%5D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_18 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_18);

	harvestContainer_18.addHarvestInstruction ("resp_content", dcVars[77], "/attributes=(.*?)/", 1, 1, 0, 0, false, "attributes", null, 0, false);
	IDataSub subContainer_260 = new DataSub();
	reqAction.addDataSub(subContainer_260);

		ISubRule sub_530 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_62", null, 0, false);
	subContainer_260.addSubInstruction(sub_530);
		ISubRule sub_531 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_90", null, 0, false);
	subContainer_260.addSubInstruction(sub_531);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6F3443DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C71569ADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_259(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C71F2D0DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D;s_fid=0776EEBEAB84E1A0-3748B6F459572DD2;s_nr=1552440117148-New;gpw_e24=https%3A%2F%2Fwww.oracle.com%2Findex.html;s_cc=true;ORA_COUNTRYSELECT=true;ORA_WWW_ABMDATA={\"loaded\":\"NotSet\",\"data\":[],\"bkId\":\"NoValue\"};RT=\"sl=1&ss=1552440107922&tt=3776&obo=0&bcn=%2F%2F36a3fec2.akstat.io%2F&sh=1552440111708%3D1%3A0%3A3776&dm=oracle.com&si=0a8ed298-88bb-4c32-8e29-3e61c3a5ab58&ld=1552440111709&nu=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&cl=1552440117118&r=https%3A%2F%2Fwww.oracle.com%2Findex.html&ul=1552440117153&hd=1552440117226\";s_sq=%5B%5BB%5D%5D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_261 = new DataSub();
	reqAction.addDataSub(subContainer_261);

		ISubRule sub_532 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_61", null, 0, false);
	subContainer_261.addSubInstruction(sub_532);
		ISubRule sub_533 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_89", null, 0, false);
	subContainer_261.addSubInstruction(sub_533);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6F3443DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C71F2D3DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_260(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C72DD37DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D;s_fid=0776EEBEAB84E1A0-3748B6F459572DD2;s_nr=1552440117148-New;gpw_e24=https%3A%2F%2Fwww.oracle.com%2Findex.html;s_cc=true;ORA_COUNTRYSELECT=true;ORA_WWW_ABMDATA={\"loaded\":\"NotSet\",\"data\":[],\"bkId\":\"NoValue\"};RT=\"sl=1&ss=1552440107922&tt=3776&obo=0&bcn=%2F%2F36a3fec2.akstat.io%2F&sh=1552440111708%3D1%3A0%3A3776&dm=oracle.com&si=0a8ed298-88bb-4c32-8e29-3e61c3a5ab58&ld=1552440111709&nu=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&cl=1552440117118&r=https%3A%2F%2Fwww.oracle.com%2Findex.html&ul=1552440117153&hd=1552440117226\";s_sq=%5B%5BB%5D%5D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_262 = new DataSub();
	reqAction.addDataSub(subContainer_262);

		ISubRule sub_534 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_60", null, 0, false);
	subContainer_262.addSubInstruction(sub_534);
		ISubRule sub_535 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_88", null, 0, false);
	subContainer_262.addSubInstruction(sub_535);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6F3443DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C72DD3ADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_261(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C73047FDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D;s_fid=0776EEBEAB84E1A0-3748B6F459572DD2;s_nr=1552440117148-New;gpw_e24=https%3A%2F%2Fwww.oracle.com%2Findex.html;s_cc=true;ORA_COUNTRYSELECT=true;ORA_WWW_ABMDATA={\"loaded\":\"NotSet\",\"data\":[],\"bkId\":\"NoValue\"};RT=\"sl=1&ss=1552440107922&tt=3776&obo=0&bcn=%2F%2F36a3fec2.akstat.io%2F&sh=1552440111708%3D1%3A0%3A3776&dm=oracle.com&si=0a8ed298-88bb-4c32-8e29-3e61c3a5ab58&ld=1552440111709&nu=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&cl=1552440117118&r=https%3A%2F%2Fwww.oracle.com%2Findex.html&ul=1552440117153&hd=1552440117226\";s_sq=%5B%5BB%5D%5D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_263 = new DataSub();
	reqAction.addDataSub(subContainer_263);

		ISubRule sub_536 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_59", null, 0, false);
	subContainer_263.addSubInstruction(sub_536);
		ISubRule sub_537 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_87", null, 0, false);
	subContainer_263.addSubInstruction(sub_537);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6F3443DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"iso-8859-1",
			"A1E9452E6C730482DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/svg+xml");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_262(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C732B5BDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "www.oracleimg.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_264 = new DataSub();
	reqAction.addDataSub(subContainer_264);

		ISubRule sub_538 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_58", null, 0, false);
	subContainer_264.addSubInstruction(sub_538);
		ISubRule sub_539 = new SubRule("req_hdr_Host_1", 0, 17, false, (IDCCoreVar)vars[37], false, "Host_86", null, 0, false);
	subContainer_264.addSubInstruction(sub_539);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C732B5EDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("Application/js; charset=");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_263(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C735263DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mmapi.store.p.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%22pd%22%3A%221583976109422%7C%5C%22-276634882%7CAQAAAApVAwBH4zeUZhHfggABEQABQujvMHIBAKJLl0RSp9ZIokuXRFKn1kgAAAAA2QAAAP%2F%2F%2F%2F8ADHd3dy5iaW5nLmNvbQRmEQEAAAAAAAABAAD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BAD30AAAEOc67ZGYRAP%2F%2F%2F%2F8BZhFmEf%2F%2FAQAAAQAAAAABFzMCAAtSAwAAAAAAAAABRQ%3D%3D%5C%22%22%2C%22srv%22%3A%221583976109423%7C%5C%22nycvwcgus10%5C%22%22%7D%7D;mmapi.store.s.0=%7B%22mmparams.d%22%3A%7B%7D%2C%22mmparams.p%22%3A%7B%7D%7D;s_fid=0776EEBEAB84E1A0-3748B6F459572DD2;s_nr=1552440117148-New;gpw_e24=https%3A%2F%2Fwww.oracle.com%2Findex.html;s_cc=true;ORA_COUNTRYSELECT=true;ORA_WWW_ABMDATA={\"loaded\":\"NotSet\",\"data\":[],\"bkId\":\"NoValue\"};RT=\"sl=1&ss=1552440107922&tt=3776&obo=0&bcn=%2F%2F36a3fec2.akstat.io%2F&sh=1552440111708%3D1%3A0%3A3776&dm=oracle.com&si=0a8ed298-88bb-4c32-8e29-3e61c3a5ab58&ld=1552440111709&nu=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&cl=1552440117118&r=https%3A%2F%2Fwww.oracle.com%2Findex.html&ul=1552440117153&hd=1552440117226\";s_sq=%5B%5BB%5D%5D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_265 = new DataSub();
	reqAction.addDataSub(subContainer_265);

		ISubRule sub_540 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_57", null, 0, false);
	subContainer_265.addSubInstruction(sub_540);
		ISubRule sub_541 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[39], false, "Host_85", null, 0, false);
	subContainer_265.addSubInstruction(sub_541);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6F3443DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C735266DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_264(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C743CC3DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_266 = new DataSub();
	reqAction.addDataSub(subContainer_266);

		ISubRule sub_542 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_84", null, 0, false);
	subContainer_266.addSubInstruction(sub_542);
		ISubRule sub_543 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_83", null, 0, false);
	subContainer_266.addSubInstruction(sub_543);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C743CC6DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_265(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C743D0EDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "c.go-mpulse.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_19 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_19);

	harvestContainer_19.addHarvestInstruction ("resp_content", dcVars[78], "\"h\\.key\":\"(.*?)\"", 1, 1, 0, 0, false, "h.key_7", null, 0, false);
	harvestContainer_19.addHarvestInstruction ("resp_content", dcVars[79], "\"h\\.key\":\"(.*?)\"", 1, 0, 0, 0, false, "h.key_8", null, 0, false);
	harvestContainer_19.addHarvestInstruction ("resp_content", dcVars[80], "\"h\\.d\":\"(.*?)\"", 1, 1, 0, 0, false, "h.d_7", null, 0, false);
	harvestContainer_19.addHarvestInstruction ("resp_content", dcVars[81], "\"h\\.d\":\"(.*?)\"", 1, 0, 0, 0, false, "h.d_8", null, 0, false);
	harvestContainer_19.addHarvestInstruction ("resp_content", dcVars[82], "\"h\\.cr\":\"(.*?)\"", 1, 1, 0, 0, false, "h.cr_7", null, 0, false);
	harvestContainer_19.addHarvestInstruction ("resp_content", dcVars[83], "\"h\\.cr\":\"(.*?)\"", 1, 0, 0, 0, false, "h.cr_8", null, 0, false);
	IDataSub subContainer_267 = new DataSub();
	reqAction.addDataSub(subContainer_267);

		ISubRule sub_544 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_56", null, 0, false);
	subContainer_267.addSubInstruction(sub_544);
		ISubRule sub_545 = new SubRule("req_hdr_Host_1", 0, 15, false, (IDCCoreVar)vars[38], false, "Host_82", null, 0, false);
	subContainer_267.addSubInstruction(sub_545);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C743D11DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_266(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C746409DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "www.oracleimg.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_20 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_20);

	harvestContainer_20.addHarvestInstruction ("resp_content", dcVars[84], "\\?AQB=(.*?)&", 1, 1, 0, 0, false, "AQB_4", null, 0, false);
	harvestContainer_20.addHarvestInstruction ("resp_content", dcVars[85], "&ndh=(.*?)&", 1, 1, 0, 0, false, "ndh_4", null, 0, false);
	harvestContainer_20.addHarvestInstruction ("resp_content", dcVars[86], "&pf=(.*?)&", 1, 1, 0, 0, false, "pf_5", null, 0, false);
	harvestContainer_20.addHarvestInstruction ("resp_content", dcVars[87], "&AQE=(.*?)\"", 1, 1, 0, 0, false, "AQE_4", null, 0, false);
	IDataSub subContainer_268 = new DataSub();
	reqAction.addDataSub(subContainer_268);

		ISubRule sub_546 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_55", null, 0, false);
	subContainer_268.addSubInstruction(sub_546);
		ISubRule sub_547 = new SubRule("req_hdr_Host_1", 0, 17, false, (IDCCoreVar)vars[37], false, "Host_81", null, 0, false);
	subContainer_268.addSubInstruction(sub_547);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C74640CDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("Application/js; charset=");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_267(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C74B1F3DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_269 = new DataSub();
	reqAction.addDataSub(subContainer_269);

		ISubRule sub_548 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_80", null, 0, false);
	subContainer_269.addSubInstruction(sub_548);
		ISubRule sub_549 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_79", null, 0, false);
	subContainer_269.addSubInstruction(sub_549);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C74B1F6DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_268(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C74B24EDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "ds-aksb-a.akamaihd.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_270 = new DataSub();
	reqAction.addDataSub(subContainer_270);

		ISubRule sub_550 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_54", null, 0, false);
	subContainer_270.addSubInstruction(sub_550);
		ISubRule sub_551 = new SubRule("req_hdr_Host_1", 0, 22, false, (IDCCoreVar)vars[28], false, "Host_78", null, 0, false);
	subContainer_270.addSubInstruction(sub_551);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C74B251DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_269(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C74D94CDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "oracle.112.2o7.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_271 = new DataSub();
	reqAction.addDataSub(subContainer_271);

		ISubRule sub_552 = new SubRule("req_uri", 855, 1, true, (IDCCoreVar)dcVars[87], false, "AQE", null, 0, false);
	subContainer_271.addSubInstruction(sub_552);
		ISubRule sub_553 = new SubRule("req_uri", 847, 3, true, (IDCCoreVar)dcVars[60], false, "bh", null, 0, false);
	subContainer_271.addSubInstruction(sub_553);
		ISubRule sub_554 = new SubRule("req_uri", 839, 4, true, (IDCCoreVar)dcVars[59], false, "bw", null, 0, false);
	subContainer_271.addSubInstruction(sub_554);
		ISubRule sub_555 = new SubRule("req_uri", 834, 1, true, (IDCCoreVar)dcVars[58], false, "k", null, 0, false);
	subContainer_271.addSubInstruction(sub_555);
		ISubRule sub_556 = new SubRule("req_uri", 830, 1, true, (IDCCoreVar)dcVars[57], false, "v", null, 0, false);
	subContainer_271.addSubInstruction(sub_556);
		ISubRule sub_557 = new SubRule("req_uri", 824, 3, true, (IDCCoreVar)dcVars[56], false, "j", null, 0, false);
	subContainer_271.addSubInstruction(sub_557);
		ISubRule sub_558 = new SubRule("req_uri", 819, 2, true, (IDCCoreVar)dcVars[55], false, "c", null, 0, false);
	subContainer_271.addSubInstruction(sub_558);
		ISubRule sub_559 = new SubRule("req_uri", 807, 9, true, (IDCCoreVar)dcVars[54], false, "s", null, 0, false);
	subContainer_271.addSubInstruction(sub_559);
		ISubRule sub_560 = new SubRule("req_uri", 798, 6, true, (IDCCoreVar)dcVars[53], false, "v73", null, 0, false);
	subContainer_271.addSubInstruction(sub_560);
		ISubRule sub_561 = new SubRule("req_uri", 787, 6, true, (IDCCoreVar)dcVars[52], false, "v72", null, 0, false);
	subContainer_271.addSubInstruction(sub_561);
		ISubRule sub_562 = new SubRule("req_uri", 776, 6, true, (IDCCoreVar)dcVars[51], false, "v71", null, 0, false);
	subContainer_271.addSubInstruction(sub_562);
		ISubRule sub_563 = new SubRule("req_uri", 765, 6, true, (IDCCoreVar)dcVars[50], false, "v70", null, 0, false);
	subContainer_271.addSubInstruction(sub_563);
		ISubRule sub_564 = new SubRule("req_uri", 738, 22, false, (IDCCoreVar)dcVars[49], false, "c67", null, 0, false);
	subContainer_271.addSubInstruction(sub_564);
		ISubRule sub_565 = new SubRule("req_uri", 678, 6, true, (IDCCoreVar)dcVars[48], false, "c62", null, 0, false);
	subContainer_271.addSubInstruction(sub_565);
		ISubRule sub_566 = new SubRule("req_uri", 672, 1, true, (IDCCoreVar)dcVars[47], false, "c55", null, 0, false);
	subContainer_271.addSubInstruction(sub_566);
		ISubRule sub_567 = new SubRule("req_uri", 650, 17, false, (IDCCoreVar)dcVars[46], false, "v54", null, 0, false);
	subContainer_271.addSubInstruction(sub_567);
		ISubRule sub_568 = new SubRule("req_uri", 638, 7, false, (IDCCoreVar)dcVars[45], false, "c54", null, 0, false);
	subContainer_271.addSubInstruction(sub_568);
		ISubRule sub_569 = new SubRule("req_uri", 573, 12, false, (IDCCoreVar)dcVars[44], false, "v51", null, 0, false);
	subContainer_271.addSubInstruction(sub_569);
		ISubRule sub_570 = new SubRule("req_uri", 526, 42, false, (IDCCoreVar)dcVars[43], false, "c51", null, 0, false);
	subContainer_271.addSubInstruction(sub_570);
		ISubRule sub_571 = new SubRule("req_uri", 513, 8, false, (IDCCoreVar)dcVars[42], false, "v50", null, 0, false);
	subContainer_271.addSubInstruction(sub_571);
		ISubRule sub_572 = new SubRule("req_uri", 500, 8, false, (IDCCoreVar)dcVars[41], false, "c50", null, 0, false);
	subContainer_271.addSubInstruction(sub_572);
		ISubRule sub_573 = new SubRule("req_uri", 483, 12, false, (IDCCoreVar)dcVars[40], false, "c39", null, 0, false);
	subContainer_271.addSubInstruction(sub_573);
		ISubRule sub_574 = new SubRule("req_uri", 466, 12, false, (IDCCoreVar)dcVars[39], false, "c38", null, 0, false);
	subContainer_271.addSubInstruction(sub_574);
		ISubRule sub_575 = new SubRule("req_uri", 452, 9, false, (IDCCoreVar)dcVars[38], false, "v26", null, 0, false);
	subContainer_271.addSubInstruction(sub_575);
		ISubRule sub_576 = new SubRule("req_uri", 440, 7, false, (IDCCoreVar)dcVars[37], false, "c26", null, 0, false);
	subContainer_271.addSubInstruction(sub_576);
		ISubRule sub_577 = new SubRule("req_uri", 382, 7, false, (IDCCoreVar)dcVars[36], false, "c24", null, 0, false);
	subContainer_271.addSubInstruction(sub_577);
		ISubRule sub_578 = new SubRule("req_uri", 374, 3, true, (IDCCoreVar)dcVars[35], false, "v20", null, 0, false);
	subContainer_271.addSubInstruction(sub_578);
		ISubRule sub_579 = new SubRule("req_uri", 362, 7, false, (IDCCoreVar)dcVars[34], false, "c20", null, 0, false);
	subContainer_271.addSubInstruction(sub_579);
		ISubRule sub_580 = new SubRule("req_uri", 345, 12, false, (IDCCoreVar)dcVars[33], false, "h3", null, 0, false);
	subContainer_271.addSubInstruction(sub_580);
		ISubRule sub_581 = new SubRule("req_uri", 304, 3, true, (IDCCoreVar)dcVars[32], false, "cc", null, 0, false);
	subContainer_271.addSubInstruction(sub_581);
		ISubRule sub_582 = new SubRule("req_uri", 164, 6, true, (IDCCoreVar)dcVars[30], false, "ns", null, 0, false);
	subContainer_271.addSubInstruction(sub_582);
		ISubRule sub_583 = new SubRule("req_uri", 155, 5, true, (IDCCoreVar)dcVars[29], false, "ce", null, 0, false);
	subContainer_271.addSubInstruction(sub_583);
		ISubRule sub_584 = new SubRule("req_uri", 118, 33, true, (IDCCoreVar)dcVars[28], false, "fid", null, 0, false);
	subContainer_271.addSubInstruction(sub_584);
		ISubRule sub_585 = new SubRule("req_uri", 71, 1, true, (IDCCoreVar)dcVars[86], false, "pf", null, 0, false);
	subContainer_271.addSubInstruction(sub_585);
		ISubRule sub_586 = new SubRule("req_uri", 66, 1, true, (IDCCoreVar)dcVars[85], false, "ndh", null, 0, false);
	subContainer_271.addSubInstruction(sub_586);
		ISubRule sub_587 = new SubRule("req_uri", 60, 1, true, (IDCCoreVar)dcVars[84], false, "AQB", null, 0, false);
	subContainer_271.addSubInstruction(sub_587);
		ISubRule sub_588 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_53", null, 0, false);
	subContainer_271.addSubInstruction(sub_588);
		ISubRule sub_589 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[36], false, "Host_77", null, 0, false);
	subContainer_271.addSubInstruction(sub_589);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6D8655DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C746409DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6EE60ADFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C74D94FDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_270(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C75006BDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "sc60032181us1.cobrowse.oraclecloud.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_272 = new DataSub();
	reqAction.addDataSub(subContainer_272);

		ISubRule sub_590 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_52", null, 0, false);
	subContainer_272.addSubInstruction(sub_590);
		ISubRule sub_591 = new SubRule("req_hdr_Host_1", 0, 38, false, (IDCCoreVar)vars[35], false, "Host_76", null, 0, false);
	subContainer_272.addSubInstruction(sub_591);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C75006EDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_271(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C752723DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "tags.bluekai.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "bkdc=phx", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_273 = new DataSub();
	reqAction.addDataSub(subContainer_273);

		ISubRule sub_592 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_51", null, 0, false);
	subContainer_273.addSubInstruction(sub_592);
		ISubRule sub_593 = new SubRule("req_uri", 0, 18, false, (IDCCoreVar)dcVars[22], false, "Oracle | Integrated _url_10", null, 0, false);
	subContainer_273.addSubInstruction(sub_593);
		ISubRule sub_594 = new SubRule("req_hdr_Host_1", 0, 16, false, (IDCCoreVar)vars[34], false, "Host_75", null, 0, false);
	subContainer_273.addSubInstruction(sub_594);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C68F27FDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6F33C1DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C752726DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_272(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C754E5FDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "img03.en25.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_21 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_21);

	harvestContainer_21.addHarvestInstruction ("resp_content", dcVars[88], "&optin=(.*?)\"", 3, 3, 0, 0, false, "optin_4", null, 0, false);
	harvestContainer_21.addHarvestInstruction ("resp_content", dcVars[89], "\\?pps=(.*?)&", 3, 1, 0, 0, false, "pps_4", null, 0, false);
	IDataSub subContainer_274 = new DataSub();
	reqAction.addDataSub(subContainer_274);

		ISubRule sub_595 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_50", null, 0, false);
	subContainer_274.addSubInstruction(sub_595);
		ISubRule sub_596 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[33], false, "Host_74", null, 0, false);
	subContainer_274.addSubInstruction(sub_596);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C754E62DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_273(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C757547DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "s1973398186.t.eloqua.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "ELOQUA=GUID=7C4027BB7E5E43E69317D065A3A647EC;ELQSTATUS=OK", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_275 = new DataSub();
	reqAction.addDataSub(subContainer_275);

		ISubRule sub_597 = new SubRule("req_uri", 112, 8, true, (IDCCoreVar)dcVars[88], false, "optin", null, 0, false);
	subContainer_275.addSubInstruction(sub_597);
		ISubRule sub_598 = new SubRule("req_uri", 95, 3, true, (IDCCoreVar)dcVars[69], false, "tzo", null, 0, false);
	subContainer_275.addSubInstruction(sub_598);
		ISubRule sub_599 = new SubRule("req_uri", 33, 10, true, (IDCCoreVar)dcVars[68], false, "siteid", null, 0, false);
	subContainer_275.addSubInstruction(sub_599);
		ISubRule sub_600 = new SubRule("req_uri", 24, 1, true, (IDCCoreVar)dcVars[89], false, "pps", null, 0, false);
	subContainer_275.addSubInstruction(sub_600);
		ISubRule sub_601 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_49", null, 0, false);
	subContainer_275.addSubInstruction(sub_601);
		ISubRule sub_602 = new SubRule("req_hdr_Host_1", 0, 24, false, (IDCCoreVar)vars[32], false, "Host_73", null, 0, false);
	subContainer_275.addSubInstruction(sub_602);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C754E5FDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6EE59EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C75754ADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_274(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7575AADFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "stags.bluekai.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "bkdc=phx", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_276 = new DataSub();
	reqAction.addDataSub(subContainer_276);

		ISubRule sub_603 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_48", null, 0, false);
	subContainer_276.addSubInstruction(sub_603);
		ISubRule sub_604 = new SubRule("req_hdr_Host_1", 0, 17, false, (IDCCoreVar)vars[31], false, "Host_72", null, 0, false);
	subContainer_276.addSubInstruction(sub_604);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C752723DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7575ADDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_275(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C759C83DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "public.cobrowse.oraclecloud.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_22 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_22);

	harvestContainer_22.addHarvestInstruction ("resp_hdr_Referer-RPT-Generated (read-only)_1", dcVars[90], ".*", 1, 0, 0, 0, false, "Referer-RPT-Generated (read-only)_6", null, 0, false);
	IDataSub subContainer_277 = new DataSub();
	reqAction.addDataSub(subContainer_277);

		ISubRule sub_605 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_47", null, 0, false);
	subContainer_277.addSubInstruction(sub_605);
		ISubRule sub_606 = new SubRule("req_hdr_Host_1", 0, 31, false, (IDCCoreVar)vars[30], false, "Host_71", null, 0, false);
	subContainer_277.addSubInstruction(sub_606);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C759C86DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_276(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C75EAA1DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_278 = new DataSub();
	reqAction.addDataSub(subContainer_278);

		ISubRule sub_607 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_70", null, 0, false);
	subContainer_278.addSubInstruction(sub_607);
		ISubRule sub_608 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_69", null, 0, false);
	subContainer_278.addSubInstruction(sub_608);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C75EAA4DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_277(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C761183DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_279 = new DataSub();
	reqAction.addDataSub(subContainer_279);

		ISubRule sub_609 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_68", null, 0, false);
	subContainer_279.addSubInstruction(sub_609);
		ISubRule sub_610 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_67", null, 0, false);
	subContainer_279.addSubInstruction(sub_610);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C761186DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_278(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7611CEDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "assets.adobedtm.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_280 = new DataSub();
	reqAction.addDataSub(subContainer_280);

		ISubRule sub_611 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_46", null, 0, false);
	subContainer_280.addSubInstruction(sub_611);
		ISubRule sub_612 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[29], false, "Host_66", null, 0, false);
	subContainer_280.addSubInstruction(sub_612);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7611D1DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_279(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7638C4DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "assets.adobedtm.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_23 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_23);

	harvestContainer_23.addHarvestInstruction ("resp_content", dcVars[91], "/www\\.googletagmanager\\.com(.*?)'", 1, 1, 0, 0, false, "www.googletagmanager.com", null, 0, false);
	IDataSub subContainer_281 = new DataSub();
	reqAction.addDataSub(subContainer_281);

		ISubRule sub_613 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_45", null, 0, false);
	subContainer_281.addSubInstruction(sub_613);
		ISubRule sub_614 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[29], false, "Host_65", null, 0, false);
	subContainer_281.addSubInstruction(sub_614);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7638C7DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_280(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C763937DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "assets.adobedtm.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_282 = new DataSub();
	reqAction.addDataSub(subContainer_282);

		ISubRule sub_615 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_44", null, 0, false);
	subContainer_282.addSubInstruction(sub_615);
		ISubRule sub_616 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[29], false, "Host_64", null, 0, false);
	subContainer_282.addSubInstruction(sub_616);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C76393ADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_281(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C765FF8DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "36a3fec2.akstat.io", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "application/x-www-form-urlencoded", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "5397", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_31(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_284 = new DataSub();
	reqAction.addDataSub(subContainer_284);

		ISubRule sub_621 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_43", null, 0, false);
	subContainer_284.addSubInstruction(sub_621);
		ISubRule sub_622 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[0], false, "Host_63", null, 0, false);
	subContainer_284.addSubInstruction(sub_622);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C743D0EDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6855F1DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C765FFBDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_31(HTTPPostData postData) {
					String requestData_28 = MetaString.encode(ZipEntryProxy.asXMLFragment(
	                                   "A1E9452E6BF91950DFEAE23864643438.testdata",
	                                   "A1E9452E6C7686BCDFEAE23864643438",
	                                   5397));
			
	HTTPPostDataChunk pdc_30 = new HTTPPostDataChunk("A1E9452E6C7686BCDFEAE23864643438", postData, requestData_28, "UTF-8", 80, 5397);
	postData.addDataChunk(pdc_30);

	IDataSub subContainer_283 = new DataSub();
	pdc_30.addDataSub(subContainer_283);

		ISubRule sub_617 = new SubRule("req_content", 5396, 1, true, (IDCCoreVar)dcVars[21], false, "sb", null, 0, false);
	subContainer_283.addSubInstruction(sub_617);
		ISubRule sub_618 = new SubRule("req_content", 5352, 40, true, (IDCCoreVar)dcVars[83], false, "h.cr", null, 0, false);
	subContainer_283.addSubInstruction(sub_618);
		ISubRule sub_619 = new SubRule("req_content", 21, 29, true, (IDCCoreVar)dcVars[79], false, "h.key", null, 0, false);
	subContainer_283.addSubInstruction(sub_619);
		ISubRule sub_620 = new SubRule("req_content", 4, 10, true, (IDCCoreVar)dcVars[81], false, "h.d", null, 0, false);
	subContainer_283.addSubInstruction(sub_620);
	



	}

	public HTTPAction request_282(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C76ADC0DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "ds-aksb-a.akamaihd.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://public.cobrowse.oraclecloud.com/rely/storage/ll_storage_html5.html?context=b1ju0vgzeo9&version=20190111", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_285 = new DataSub();
	reqAction.addDataSub(subContainer_285);

		ISubRule sub_623 = new SubRule("req_hdr_Referer_1", 0, 111, false, (IDCCoreVar)dcVars[90], false, "Referer_42", null, 0, false);
	subContainer_285.addSubInstruction(sub_623);
		ISubRule sub_624 = new SubRule("req_hdr_Host_1", 0, 22, false, (IDCCoreVar)vars[28], false, "Host_62", null, 0, false);
	subContainer_285.addSubInstruction(sub_624);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C759C83DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C76ADC3DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_283(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C76AE1BDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "ds-aksb-a.akamaihd.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_286 = new DataSub();
	reqAction.addDataSub(subContainer_286);

		ISubRule sub_625 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_41", null, 0, false);
	subContainer_286.addSubInstruction(sub_625);
		ISubRule sub_626 = new SubRule("req_hdr_Host_1", 0, 22, false, (IDCCoreVar)vars[28], false, "Host_61", null, 0, false);
	subContainer_286.addSubInstruction(sub_626);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C76AE1EDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_284(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C76D530DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "www.googletagmanager.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_287 = new DataSub();
	reqAction.addDataSub(subContainer_287);

		ISubRule sub_627 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_40", null, 0, false);
	subContainer_287.addSubInstruction(sub_627);
		ISubRule sub_628 = new SubRule("req_uri", 0, 22, false, (IDCCoreVar)dcVars[91], false, "Oracle | Integrated _url_9", null, 0, false);
	subContainer_287.addSubInstruction(sub_628);
		ISubRule sub_629 = new SubRule("req_hdr_Host_1", 0, 24, false, (IDCCoreVar)vars[24], false, "Host_60", null, 0, false);
	subContainer_287.addSubInstruction(sub_629);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C7638C4DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C76D533DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_285(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C774A11DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.googleadservices.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("If-None-Match", "5852626113465376229", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_288 = new DataSub();
	reqAction.addDataSub(subContainer_288);

		ISubRule sub_630 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_39", null, 0, false);
	subContainer_288.addSubInstruction(sub_630);
		ISubRule sub_631 = new SubRule("req_hdr_Host_1", 0, 24, false, (IDCCoreVar)vars[27], false, "Host_59", null, 0, false);
	subContainer_288.addSubInstruction(sub_631);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C774A14DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/javascript; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_286(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C779835DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "googleads.g.doubleclick.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "IDE=AHWqTUkAt4oXwwhQSTUigB7JLLHSoHWoVmfMGFHCCZIUJH443hrJFBrV-KDuXVbn", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_24 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_24);

	harvestContainer_24.addHarvestInstruction ("resp_content", dcVars[92], "/www\\.google\\.com(.*?)\\?", 1, 1, 0, 0, false, "www.google.com", null, 0, false);
	harvestContainer_24.addHarvestInstruction ("resp_content", dcVars[93], "/www\\.google\\.com(.*?)\\?", 1, 0, 0, 0, false, "www.google.com_2", null, 0, false);
	IDataSub subContainer_289 = new DataSub();
	reqAction.addDataSub(subContainer_289);

		ISubRule sub_632 = new SubRule("req_uri", 106, 2, true, (IDCCoreVar)dcVars[14], false, "guid", null, 0, false);
	subContainer_289.addSubInstruction(sub_632);
		ISubRule sub_633 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_38", null, 0, false);
	subContainer_289.addSubInstruction(sub_633);
		ISubRule sub_634 = new SubRule("req_hdr_Host_1", 0, 27, false, (IDCCoreVar)vars[23], false, "Host_58", null, 0, false);
	subContainer_289.addSubInstruction(sub_634);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C62D7A8DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C779838DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/javascript; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_287(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C77BF37DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_290 = new DataSub();
	reqAction.addDataSub(subContainer_290);

		ISubRule sub_635 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_57", null, 0, false);
	subContainer_290.addSubInstruction(sub_635);
		ISubRule sub_636 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_56", null, 0, false);
	subContainer_290.addSubInstruction(sub_636);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C77BF3ADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_288(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C77BF90DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.google.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "NID=158=e7Nbxu2bR1Qwx2ri6ZK7CLVrVdkMFwW7iz_TvNCzlCYNTr_Vxm3G9x2Q3FEW1_rK6CxBxsjMKCwiCDdveVl0O7ROHTFfRJ5oDkgw2DSqXD34cI07MIn_c7t_BPM2GUDiGthB1znxZu3v9S5sJPGjD1sJE22jCT2PNxADTNGMyHU;_gcl_au=1.1.819336124.1549418777", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_291 = new DataSub();
	reqAction.addDataSub(subContainer_291);

		ISubRule sub_637 = new SubRule("req_uri", 97, 2, true, (IDCCoreVar)dcVars[14], false, "guid", null, 0, false);
	subContainer_291.addSubInstruction(sub_637);
		ISubRule sub_638 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_37", null, 0, false);
	subContainer_291.addSubInstruction(sub_638);
		ISubRule sub_639 = new SubRule("req_uri", 0, 31, false, (IDCCoreVar)dcVars[93], false, "/pagead/1p-user-list/995449196/_4", null, 0, false);
	subContainer_291.addSubInstruction(sub_639);
		ISubRule sub_640 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[22], false, "Host_55", null, 0, false);
	subContainer_291.addSubInstruction(sub_640);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C779835DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C62D7A8DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C77BF93DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_289(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C77E695DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "3573281.fls.doubleclick.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "IDE=AHWqTUkAt4oXwwhQSTUigB7JLLHSoHWoVmfMGFHCCZIUJH443hrJFBrV-KDuXVbn", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_25 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_25);

	harvestContainer_25.addHarvestInstruction ("resp_hdr_Referer-RPT-Generated (read-only)_1", dcVars[94], ".*", 1, 0, 0, 0, false, "Referer-RPT-Generated (read-only)_7", null, 0, false);
	harvestContainer_25.addHarvestInstruction ("resp_content", dcVars[95], "/www\\.googletagmanager\\.com(.*?)\"", 1, 1, 0, 0, false, "www.googletagmanager.com_2", null, 0, false);
	harvestContainer_25.addHarvestInstruction ("resp_content", dcVars[96], "\\?id=(.*?)&", 1, 1, 0, 0, false, "id_34", null, 0, false);
	harvestContainer_25.addHarvestInstruction ("resp_content", dcVars[97], "&ev=(.*?)&", 1, 1, 0, 0, false, "ev_3", null, 0, false);
	harvestContainer_25.addHarvestInstruction ("resp_content", dcVars[98], "\\?rb=(.*?)&", 1, 1, 0, 0, false, "rb_2", null, 0, false);
	harvestContainer_25.addHarvestInstruction ("resp_content", dcVars[99], "&ca=(.*?)&", 1, 1, 0, 0, false, "ca_2", null, 0, false);
	harvestContainer_25.addHarvestInstruction ("resp_content", dcVars[100], "&_o=(.*?)&", 1, 1, 0, 0, false, "_o_2", null, 0, false);
	harvestContainer_25.addHarvestInstruction ("resp_content", dcVars[101], "&_t=(.*?)&", 1, 1, 0, 0, false, "_t_2", null, 0, false);
	harvestContainer_25.addHarvestInstruction ("resp_content", dcVars[102], ";num=(.*?)\\?", 2, 2, 0, 0, false, "num_7", null, 0, false);
	harvestContainer_25.addHarvestInstruction ("resp_content", dcVars[103], "\\?pid=(.*?)&", 1, 1, 0, 0, false, "pid_37", null, 0, false);
	harvestContainer_25.addHarvestInstruction ("resp_content", dcVars[104], "/adservice\\.google\\.com(.*?)\"", 1, 1, 0, 0, false, "adservice.google.com", null, 0, false);
	harvestContainer_25.addHarvestInstruction ("resp_content", dcVars[105], ";gtm=(.*?);", 1, 0, 0, 0, false, "gtm_11", null, 0, false);
	harvestContainer_25.addHarvestInstruction ("resp_content", dcVars[106], ";~oref=(.*?)\"", 1, 1, 0, 0, false, "~oref", null, 0, false);
	IDataSub subContainer_292 = new DataSub();
	reqAction.addDataSub(subContainer_292);

		ISubRule sub_641 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_36", null, 0, false);
	subContainer_292.addSubInstruction(sub_641);
		ISubRule sub_642 = new SubRule("req_hdr_Host_1", 0, 27, false, (IDCCoreVar)vars[26], false, "Host_54", null, 0, false);
	subContainer_292.addSubInstruction(sub_642);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C77E698DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_290(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C780D9BDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "www.google.com.my", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_293 = new DataSub();
	reqAction.addDataSub(subContainer_293);

		ISubRule sub_643 = new SubRule("req_uri", 201, 6, true, (IDCCoreVar)dcVars[105], false, "gtm", null, 0, false);
	subContainer_293.addSubInstruction(sub_643);
		ISubRule sub_644 = new SubRule("req_uri", 97, 2, true, (IDCCoreVar)dcVars[14], false, "guid", null, 0, false);
	subContainer_293.addSubInstruction(sub_644);
		ISubRule sub_645 = new SubRule("req_uri", 80, 1, true, (IDCCoreVar)dcVars[102], false, "num", null, 0, false);
	subContainer_293.addSubInstruction(sub_645);
		ISubRule sub_646 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer_35", null, 0, false);
	subContainer_293.addSubInstruction(sub_646);
		ISubRule sub_647 = new SubRule("req_uri", 0, 31, false, (IDCCoreVar)dcVars[92], false, "/pagead/1p-user-list/995449196/_3", null, 0, false);
	subContainer_293.addSubInstruction(sub_647);
		ISubRule sub_648 = new SubRule("req_hdr_Host_1", 0, 17, false, (IDCCoreVar)vars[21], false, "Host_53", null, 0, false);
	subContainer_293.addSubInstruction(sub_648);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C779835DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C62D7A8DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C780D9EDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_291(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C783470DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "js.adsrvr.org", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "TDID=059982b3-d951-4f89-8134-a401c6fc1987;TDCPM=CAESFgoHc2VtYXNpbxILCKbv-8envJM3EAUSFAoFdGFwYWQSCwjU_O7Cp7yTNxAFGAEgASgCMgsIpuf-9L28kzcQBTgBWgdzZW1hc2lvYAI.", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_294 = new DataSub();
	reqAction.addDataSub(subContainer_294);

		ISubRule sub_649 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_34", null, 0, false);
	subContainer_294.addSubInstruction(sub_649);
		ISubRule sub_650 = new SubRule("req_hdr_Host_1", 0, 13, false, (IDCCoreVar)vars[6], false, "Host_52", null, 0, false);
	subContainer_294.addSubInstruction(sub_650);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C783473DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_292(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7834F6DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "cti.w55c.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "wfivefivec=D1HuTbik1FvKuT5", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_295 = new DataSub();
	reqAction.addDataSub(subContainer_295);

		ISubRule sub_651 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_33", null, 0, false);
	subContainer_295.addSubInstruction(sub_651);
		ISubRule sub_652 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[25], false, "Host_51", null, 0, false);
	subContainer_295.addSubInstruction(sub_652);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7834F9DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_293(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7882BFDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "www.googletagmanager.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_296 = new DataSub();
	reqAction.addDataSub(subContainer_296);

		ISubRule sub_653 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_32", null, 0, false);
	subContainer_296.addSubInstruction(sub_653);
		ISubRule sub_654 = new SubRule("req_uri", 0, 24, false, (IDCCoreVar)dcVars[95], false, "Oracle | Integrated _url_8", null, 0, false);
	subContainer_296.addSubInstruction(sub_654);
		ISubRule sub_655 = new SubRule("req_hdr_Host_1", 0, 24, false, (IDCCoreVar)vars[24], false, "Host_50", null, 0, false);
	subContainer_296.addSubInstruction(sub_655);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7882C2DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_294(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C78A993DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_297 = new DataSub();
	reqAction.addDataSub(subContainer_297);

		ISubRule sub_656 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_49", null, 0, false);
	subContainer_297.addSubInstruction(sub_656);
		ISubRule sub_657 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_48", null, 0, false);
	subContainer_297.addSubInstruction(sub_657);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C78A996DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_295(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C78D0ABDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "googleads.g.doubleclick.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "IDE=AHWqTUkAt4oXwwhQSTUigB7JLLHSoHWoVmfMGFHCCZIUJH443hrJFBrV-KDuXVbn", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_26 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_26);

	harvestContainer_26.addHarvestInstruction ("resp_content", dcVars[107], "/www\\.google\\.com(.*?)\\?", 1, 1, 0, 0, false, "www.google.com_3", null, 0, false);
	harvestContainer_26.addHarvestInstruction ("resp_content", dcVars[108], "/www\\.google\\.com(.*?)\\?", 1, 0, 0, 0, false, "www.google.com_4", null, 0, false);
	IDataSub subContainer_298 = new DataSub();
	reqAction.addDataSub(subContainer_298);

		ISubRule sub_658 = new SubRule("req_uri", 965, 43, false, (IDCCoreVar)dcVars[106], false, "ref", null, 0, false);
	subContainer_298.addSubInstruction(sub_658);
		ISubRule sub_659 = new SubRule("req_uri", 106, 2, true, (IDCCoreVar)dcVars[14], false, "guid", null, 0, false);
	subContainer_298.addSubInstruction(sub_659);
		ISubRule sub_660 = new SubRule("req_uri", 89, 1, true, (IDCCoreVar)dcVars[102], false, "num", null, 0, false);
	subContainer_298.addSubInstruction(sub_660);
		ISubRule sub_661 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_31", null, 0, false);
	subContainer_298.addSubInstruction(sub_661);
		ISubRule sub_662 = new SubRule("req_hdr_Host_1", 0, 27, false, (IDCCoreVar)vars[23], false, "Host_47", null, 0, false);
	subContainer_298.addSubInstruction(sub_662);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C62D7A8DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C78D0AEDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/javascript; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_296(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C78F7B3DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.google.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "NID=158=e7Nbxu2bR1Qwx2ri6ZK7CLVrVdkMFwW7iz_TvNCzlCYNTr_Vxm3G9x2Q3FEW1_rK6CxBxsjMKCwiCDdveVl0O7ROHTFfRJ5oDkgw2DSqXD34cI07MIn_c7t_BPM2GUDiGthB1znxZu3v9S5sJPGjD1sJE22jCT2PNxADTNGMyHU;_gcl_au=1.1.819336124.1549418777", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_299 = new DataSub();
	reqAction.addDataSub(subContainer_299);

		ISubRule sub_663 = new SubRule("req_uri", 934, 43, false, (IDCCoreVar)dcVars[106], false, "ref", null, 0, false);
	subContainer_299.addSubInstruction(sub_663);
		ISubRule sub_664 = new SubRule("req_uri", 97, 2, true, (IDCCoreVar)dcVars[14], false, "guid", null, 0, false);
	subContainer_299.addSubInstruction(sub_664);
		ISubRule sub_665 = new SubRule("req_uri", 80, 1, true, (IDCCoreVar)dcVars[102], false, "num", null, 0, false);
	subContainer_299.addSubInstruction(sub_665);
		ISubRule sub_666 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_30", null, 0, false);
	subContainer_299.addSubInstruction(sub_666);
		ISubRule sub_667 = new SubRule("req_uri", 0, 31, false, (IDCCoreVar)dcVars[108], false, "/pagead/1p-user-list/995449196/_2", null, 0, false);
	subContainer_299.addSubInstruction(sub_667);
		ISubRule sub_668 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[22], false, "Host_46", null, 0, false);
	subContainer_299.addSubInstruction(sub_668);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C78D0ABDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C62D7A8DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C78F7B6DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_297(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C78F822DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "www.google.com.my", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_300 = new DataSub();
	reqAction.addDataSub(subContainer_300);

		ISubRule sub_669 = new SubRule("req_uri", 934, 43, false, (IDCCoreVar)dcVars[106], false, "ref", null, 0, false);
	subContainer_300.addSubInstruction(sub_669);
		ISubRule sub_670 = new SubRule("req_uri", 97, 2, true, (IDCCoreVar)dcVars[14], false, "guid", null, 0, false);
	subContainer_300.addSubInstruction(sub_670);
		ISubRule sub_671 = new SubRule("req_uri", 80, 1, true, (IDCCoreVar)dcVars[102], false, "num", null, 0, false);
	subContainer_300.addSubInstruction(sub_671);
		ISubRule sub_672 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_29", null, 0, false);
	subContainer_300.addSubInstruction(sub_672);
		ISubRule sub_673 = new SubRule("req_uri", 0, 31, false, (IDCCoreVar)dcVars[107], false, "/pagead/1p-user-list/995449196/", null, 0, false);
	subContainer_300.addSubInstruction(sub_673);
		ISubRule sub_674 = new SubRule("req_hdr_Host_1", 0, 17, false, (IDCCoreVar)vars[21], false, "Host_45", null, 0, false);
	subContainer_300.addSubInstruction(sub_674);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C78D0ABDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C62D7A8DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C78F825DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_298(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C791F2ADFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "3573286.fls.doubleclick.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "IDE=AHWqTUkAt4oXwwhQSTUigB7JLLHSoHWoVmfMGFHCCZIUJH443hrJFBrV-KDuXVbn", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_27 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_27);

	harvestContainer_27.addHarvestInstruction ("resp_hdr_Referer-RPT-Generated (read-only)_1", dcVars[109], ".*", 1, 0, 0, 0, false, "Referer-RPT-Generated (read-only)_8", null, 0, false);
	harvestContainer_27.addHarvestInstruction ("resp_content", dcVars[110], "/adservice\\.google\\.com(.*?)\"", 1, 1, 0, 0, false, "adservice.google.com_2", null, 0, false);
	IDataSub subContainer_301 = new DataSub();
	reqAction.addDataSub(subContainer_301);

		ISubRule sub_675 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_28", null, 0, false);
	subContainer_301.addSubInstruction(sub_675);
		ISubRule sub_676 = new SubRule("req_hdr_Host_1", 0, 27, false, (IDCCoreVar)vars[20], false, "Host_44", null, 0, false);
	subContainer_301.addSubInstruction(sub_676);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C791F2DDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_299(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C794624DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "3573292.fls.doubleclick.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "IDE=AHWqTUkAt4oXwwhQSTUigB7JLLHSoHWoVmfMGFHCCZIUJH443hrJFBrV-KDuXVbn", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_28 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_28);

	harvestContainer_28.addHarvestInstruction ("resp_hdr_Referer-RPT-Generated (read-only)_1", dcVars[111], ".*", 1, 0, 0, 0, false, "Referer-RPT-Generated (read-only)_9", null, 0, false);
	harvestContainer_28.addHarvestInstruction ("resp_content", dcVars[112], "/adservice\\.google\\.com(.*?)\"", 1, 1, 0, 0, false, "adservice.google.com_3", null, 0, false);
	IDataSub subContainer_302 = new DataSub();
	reqAction.addDataSub(subContainer_302);

		ISubRule sub_677 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_27", null, 0, false);
	subContainer_302.addSubInstruction(sub_677);
		ISubRule sub_678 = new SubRule("req_hdr_Host_1", 0, 27, false, (IDCCoreVar)vars[19], false, "Host_43", null, 0, false);
	subContainer_302.addSubInstruction(sub_678);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C794627DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_300(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C796D1CDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_303 = new DataSub();
	reqAction.addDataSub(subContainer_303);

		ISubRule sub_679 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_42", null, 0, false);
	subContainer_303.addSubInstruction(sub_679);
		ISubRule sub_680 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_41", null, 0, false);
	subContainer_303.addSubInstruction(sub_680);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C796D1FDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_301(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C796D75DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "1106306.fls.doubleclick.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "IDE=AHWqTUkAt4oXwwhQSTUigB7JLLHSoHWoVmfMGFHCCZIUJH443hrJFBrV-KDuXVbn", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_29 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_29);

	harvestContainer_29.addHarvestInstruction ("resp_hdr_Referer-RPT-Generated (read-only)_1", dcVars[113], ".*", 1, 0, 0, 0, false, "Referer-RPT-Generated (read-only)_10", null, 0, false);
	harvestContainer_29.addHarvestInstruction ("resp_content", dcVars[114], "/adservice\\.google\\.com(.*?)\"", 1, 1, 0, 0, false, "adservice.google.com_4", null, 0, false);
	IDataSub subContainer_304 = new DataSub();
	reqAction.addDataSub(subContainer_304);

		ISubRule sub_681 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_26", null, 0, false);
	subContainer_304.addSubInstruction(sub_681);
		ISubRule sub_682 = new SubRule("req_hdr_Host_1", 0, 27, false, (IDCCoreVar)vars[18], false, "Host_40", null, 0, false);
	subContainer_304.addSubInstruction(sub_682);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C796D78DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_302(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C79BB49DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "adservice.google.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "NID=158=e7Nbxu2bR1Qwx2ri6ZK7CLVrVdkMFwW7iz_TvNCzlCYNTr_Vxm3G9x2Q3FEW1_rK6CxBxsjMKCwiCDdveVl0O7ROHTFfRJ5oDkgw2DSqXD34cI07MIn_c7t_BPM2GUDiGthB1znxZu3v9S5sJPGjD1sJE22jCT2PNxADTNGMyHU", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_305 = new DataSub();
	reqAction.addDataSub(subContainer_305);

		ISubRule sub_683 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_25", null, 0, false);
	subContainer_305.addSubInstruction(sub_683);
		ISubRule sub_684 = new SubRule("req_uri", 0, 546, false, (IDCCoreVar)dcVars[104], false, "Oracle | Integrated _url_7", null, 0, false);
	subContainer_305.addSubInstruction(sub_684);
		ISubRule sub_685 = new SubRule("req_hdr_Host_1", 0, 20, false, (IDCCoreVar)vars[14], false, "Host_39", null, 0, false);
	subContainer_305.addSubInstruction(sub_685);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C79BB4CDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_303(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C79E255DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "tags.w55c.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "wfivefivec=D1HuTbik1FvKuT5", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_306 = new DataSub();
	reqAction.addDataSub(subContainer_306);

		ISubRule sub_686 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_24", null, 0, false);
	subContainer_306.addSubInstruction(sub_686);
		ISubRule sub_687 = new SubRule("req_hdr_Host_1", 0, 13, false, (IDCCoreVar)vars[17], false, "Host_38", null, 0, false);
	subContainer_306.addSubInstruction(sub_687);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C79E258DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_304(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7A0921DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_307 = new DataSub();
	reqAction.addDataSub(subContainer_307);

		ISubRule sub_688 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_37", null, 0, false);
	subContainer_307.addSubInstruction(sub_688);
		ISubRule sub_689 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_36", null, 0, false);
	subContainer_307.addSubInstruction(sub_689);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C7A0924DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_305(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7A097ADFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "adservice.google.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573286.fls.doubleclick.net/activityi;src=3573286;type=ubert0;cat=awarn0;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;ord=1;num=5126589863649.993?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "NID=158=e7Nbxu2bR1Qwx2ri6ZK7CLVrVdkMFwW7iz_TvNCzlCYNTr_Vxm3G9x2Q3FEW1_rK6CxBxsjMKCwiCDdveVl0O7ROHTFfRJ5oDkgw2DSqXD34cI07MIn_c7t_BPM2GUDiGthB1znxZu3v9S5sJPGjD1sJE22jCT2PNxADTNGMyHU", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_308 = new DataSub();
	reqAction.addDataSub(subContainer_308);

		ISubRule sub_690 = new SubRule("req_hdr_Referer_1", 0, 567, false, (IDCCoreVar)dcVars[109], false, "Referer_23", null, 0, false);
	subContainer_308.addSubInstruction(sub_690);
		ISubRule sub_691 = new SubRule("req_uri", 0, 531, false, (IDCCoreVar)dcVars[110], false, "Oracle | Integrated _url_6", null, 0, false);
	subContainer_308.addSubInstruction(sub_691);
		ISubRule sub_692 = new SubRule("req_hdr_Host_1", 0, 20, false, (IDCCoreVar)vars[14], false, "Host_35", null, 0, false);
	subContainer_308.addSubInstruction(sub_692);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C791F2ADFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C791F2ADFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7A097DDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_306(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7A306EDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "static.ads-twitter.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_30 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_30);

	harvestContainer_30.addHarvestInstruction ("resp_content", dcVars[115], "\\?p_id=(.*?)&", 1, 1, 0, 0, false, "p_id_3", null, 0, false);
	harvestContainer_30.addHarvestInstruction ("resp_content", dcVars[116], "&p_user_id=(.*?)\"", 1, 1, 0, 0, false, "p_user_id_3", null, 0, false);
	harvestContainer_30.addHarvestInstruction ("resp_content", dcVars[117], " n\\|\\|\\(n\\.tw_sale_amount=(.*?)\\)", 1, 1, 0, 0, false, "n||(n.tw_sale_amount", null, 0, false);
	harvestContainer_30.addHarvestInstruction ("resp_content", dcVars[118], " n\\|\\|\\(n\\.tw_order_quantity=(.*?)\\)", 1, 1, 0, 0, false, "n||(n.tw_order_quantity", null, 0, false);
	harvestContainer_30.addHarvestInstruction ("resp_content", dcVars[119], "&tpx_cb=(.*?)\"", 1, 1, 0, 0, false, "tpx_cb_2", null, 0, false);
	IDataSub subContainer_309 = new DataSub();
	reqAction.addDataSub(subContainer_309);

		ISubRule sub_693 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_22", null, 0, false);
	subContainer_309.addSubInstruction(sub_693);
		ISubRule sub_694 = new SubRule("req_hdr_Host_1", 0, 22, false, (IDCCoreVar)vars[16], false, "Host_34", null, 0, false);
	subContainer_309.addSubInstruction(sub_694);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7A3071DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_307(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7A5751DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "snap.licdn.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_310 = new DataSub();
	reqAction.addDataSub(subContainer_310);

		ISubRule sub_695 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_21", null, 0, false);
	subContainer_310.addSubInstruction(sub_695);
		ISubRule sub_696 = new SubRule("req_hdr_Host_1", 0, 14, false, (IDCCoreVar)vars[15], false, "Host_33", null, 0, false);
	subContainer_310.addSubInstruction(sub_696);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7A5754DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript;charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_308(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7A7E61DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "adservice.google.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573292.fls.doubleclick.net/activityi;src=3573292;type=ubert0;cat=awarn0;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;ord=1;num=9076606494270.16?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "NID=158=e7Nbxu2bR1Qwx2ri6ZK7CLVrVdkMFwW7iz_TvNCzlCYNTr_Vxm3G9x2Q3FEW1_rK6CxBxsjMKCwiCDdveVl0O7ROHTFfRJ5oDkgw2DSqXD34cI07MIn_c7t_BPM2GUDiGthB1znxZu3v9S5sJPGjD1sJE22jCT2PNxADTNGMyHU", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_311 = new DataSub();
	reqAction.addDataSub(subContainer_311);

		ISubRule sub_697 = new SubRule("req_hdr_Referer_1", 0, 566, false, (IDCCoreVar)dcVars[111], false, "Referer_20", null, 0, false);
	subContainer_311.addSubInstruction(sub_697);
		ISubRule sub_698 = new SubRule("req_uri", 0, 530, false, (IDCCoreVar)dcVars[112], false, "Oracle | Integrated _url_5", null, 0, false);
	subContainer_311.addSubInstruction(sub_698);
		ISubRule sub_699 = new SubRule("req_hdr_Host_1", 0, 20, false, (IDCCoreVar)vars[14], false, "Host_32", null, 0, false);
	subContainer_311.addSubInstruction(sub_699);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C794624DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C794624DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7A7E64DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_309(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7A7ED0DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "adservice.google.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://1106306.fls.doubleclick.net/activityi;src=1106306;type=ubert0;cat=awarn0;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;ord=1;num=602786471398.179?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "NID=158=e7Nbxu2bR1Qwx2ri6ZK7CLVrVdkMFwW7iz_TvNCzlCYNTr_Vxm3G9x2Q3FEW1_rK6CxBxsjMKCwiCDdveVl0O7ROHTFfRJ5oDkgw2DSqXD34cI07MIn_c7t_BPM2GUDiGthB1znxZu3v9S5sJPGjD1sJE22jCT2PNxADTNGMyHU", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_312 = new DataSub();
	reqAction.addDataSub(subContainer_312);

		ISubRule sub_700 = new SubRule("req_hdr_Referer_1", 0, 566, false, (IDCCoreVar)dcVars[113], false, "Referer_19", null, 0, false);
	subContainer_312.addSubInstruction(sub_700);
		ISubRule sub_701 = new SubRule("req_uri", 0, 530, false, (IDCCoreVar)dcVars[114], false, "Oracle | Integrated _url_4", null, 0, false);
	subContainer_312.addSubInstruction(sub_701);
		ISubRule sub_702 = new SubRule("req_hdr_Host_1", 0, 20, false, (IDCCoreVar)vars[14], false, "Host_31", null, 0, false);
	subContainer_312.addSubInstruction(sub_702);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C796D75DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C796D75DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7A7ED3DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_310(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7AA5B4DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_313 = new DataSub();
	reqAction.addDataSub(subContainer_313);

		ISubRule sub_703 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_30", null, 0, false);
	subContainer_313.addSubInstruction(sub_703);
		ISubRule sub_704 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_29", null, 0, false);
	subContainer_313.addSubInstruction(sub_704);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C7AA5B7DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_311(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7ACC7EDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "c1.rfihub.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_314 = new DataSub();
	reqAction.addDataSub(subContainer_314);

		ISubRule sub_705 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_18", null, 0, false);
	subContainer_314.addSubInstruction(sub_705);
		ISubRule sub_706 = new SubRule("req_hdr_Host_1", 0, 13, false, (IDCCoreVar)vars[13], false, "Host_28", null, 0, false);
	subContainer_314.addSubInstruction(sub_706);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7ACC81DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_312(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7AF3A1DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "connect.facebook.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_315 = new DataSub();
	reqAction.addDataSub(subContainer_315);

		ISubRule sub_707 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_17", null, 0, false);
	subContainer_315.addSubInstruction(sub_707);
		ISubRule sub_708 = new SubRule("req_hdr_Host_1", 0, 20, false, (IDCCoreVar)vars[12], false, "Host_27", null, 0, false);
	subContainer_315.addSubInstruction(sub_708);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7AF3A4DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_313(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7B1A93DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "connect.facebook.net", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_316 = new DataSub();
	reqAction.addDataSub(subContainer_316);

		ISubRule sub_709 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_16", null, 0, false);
	subContainer_316.addSubInstruction(sub_709);
		ISubRule sub_710 = new SubRule("req_hdr_Host_1", 0, 20, false, (IDCCoreVar)vars[12], false, "Host_26", null, 0, false);
	subContainer_316.addSubInstruction(sub_710);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7B1A96DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_314(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7B8FD1DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "t.co", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_317 = new DataSub();
	reqAction.addDataSub(subContainer_317);

		ISubRule sub_711 = new SubRule("req_uri", 123, 1, true, (IDCCoreVar)dcVars[118], false, "tw_order_quantity", null, 0, false);
	subContainer_317.addSubInstruction(sub_711);
		ISubRule sub_712 = new SubRule("req_uri", 103, 1, true, (IDCCoreVar)dcVars[117], false, "tw_sale_amount", null, 0, false);
	subContainer_317.addSubInstruction(sub_712);
		ISubRule sub_713 = new SubRule("req_uri", 32, 1, true, (IDCCoreVar)dcVars[116], false, "p_user_id", null, 0, false);
	subContainer_317.addSubInstruction(sub_713);
		ISubRule sub_714 = new SubRule("req_uri", 14, 7, true, (IDCCoreVar)dcVars[115], false, "p_id", null, 0, false);
	subContainer_317.addSubInstruction(sub_714);
		ISubRule sub_715 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_15", null, 0, false);
	subContainer_317.addSubInstruction(sub_715);
		ISubRule sub_716 = new SubRule("req_hdr_Host_1", 0, 4, false, (IDCCoreVar)vars[11], false, "Host_25", null, 0, false);
	subContainer_317.addSubInstruction(sub_716);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C7A306EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7B8FD4DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif;charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_315(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7BB75FDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.facebook.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "fr=0ho1FlX4G6suSurPR..Bch6eL...1.0.Bch6eL.", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_318 = new DataSub();
	reqAction.addDataSub(subContainer_318);

		ISubRule sub_717 = new SubRule("req_uri", 28, 8, true, (IDCCoreVar)dcVars[97], false, "ev", null, 0, false);
	subContainer_318.addSubInstruction(sub_717);
		ISubRule sub_718 = new SubRule("req_uri", 8, 16, true, (IDCCoreVar)dcVars[96], false, "id", null, 0, false);
	subContainer_318.addSubInstruction(sub_718);
		ISubRule sub_719 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_14", null, 0, false);
	subContainer_318.addSubInstruction(sub_719);
		ISubRule sub_720 = new SubRule("req_hdr_Host_1", 0, 16, false, (IDCCoreVar)vars[7], false, "Host_24", null, 0, false);
	subContainer_318.addSubInstruction(sub_720);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7BB762DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_316(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7BDE42DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "a.rfihub.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "eud=H4sIAAAAAAAAALvFwmtoampkbGkCpIxNDADLR6rZEAAAAA;rud=H4sIAAAAAAAAAOMSsjS3MDe1sDAzMTC1tLAwMLIwFuIz1C31y82Oz_ENzSvKTJbiNTQ1NTK2NAFSxsaWADLRMYwzAAAA", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_319 = new DataSub();
	reqAction.addDataSub(subContainer_319);

		ISubRule sub_721 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_13", null, 0, false);
	subContainer_319.addSubInstruction(sub_721);
		ISubRule sub_722 = new SubRule("req_hdr_Host_1", 0, 12, false, (IDCCoreVar)vars[10], false, "Host_23", null, 0, false);
	subContainer_319.addSubInstruction(sub_722);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7BDE45DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_317(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7C0535DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "20797417p.rfihub.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_320 = new DataSub();
	reqAction.addDataSub(subContainer_320);

		ISubRule sub_723 = new SubRule("req_uri", 114, 8, true, (IDCCoreVar)dcVars[101], false, "_t", null, 0, false);
	subContainer_320.addSubInstruction(sub_723);
		ISubRule sub_724 = new SubRule("req_uri", 105, 5, true, (IDCCoreVar)dcVars[100], false, "_o", null, 0, false);
	subContainer_320.addSubInstruction(sub_724);
		ISubRule sub_725 = new SubRule("req_uri", 93, 8, true, (IDCCoreVar)dcVars[99], false, "ca", null, 0, false);
	subContainer_320.addSubInstruction(sub_725);
		ISubRule sub_726 = new SubRule("req_uri", 84, 5, true, (IDCCoreVar)dcVars[98], false, "rb", null, 0, false);
	subContainer_320.addSubInstruction(sub_726);
		ISubRule sub_727 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_12", null, 0, false);
	subContainer_320.addSubInstruction(sub_727);
		ISubRule sub_728 = new SubRule("req_hdr_Host_1", 0, 20, false, (IDCCoreVar)vars[9], false, "Host_22", null, 0, false);
	subContainer_320.addSubInstruction(sub_728);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C7BDE42DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7C0538DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_318(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7C2C37DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_321 = new DataSub();
	reqAction.addDataSub(subContainer_321);

		ISubRule sub_729 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_21", null, 0, false);
	subContainer_321.addSubInstruction(sub_729);
		ISubRule sub_730 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_20", null, 0, false);
	subContainer_321.addSubInstruction(sub_730);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C7C2C3ADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_319(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7C5311DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_322 = new DataSub();
	reqAction.addDataSub(subContainer_322);

		ISubRule sub_731 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_19", null, 0, false);
	subContainer_322.addSubInstruction(sub_731);
		ISubRule sub_732 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_18", null, 0, false);
	subContainer_322.addSubInstruction(sub_732);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C7C5314DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_320(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7C536ADFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "insight.adsrvr.org", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "TDID=059982b3-d951-4f89-8134-a401c6fc1987;TDCPM=CAESFgoHc2VtYXNpbxILCKbv-8envJM3EAUSFAoFdGFwYWQSCwjU_O7Cp7yTNxAFGAEgASgCMgsIpuf-9L28kzcQBTgBWgdzZW1hc2lvYAI.", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_31 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_31);

	harvestContainer_31.addHarvestInstruction ("resp_hdr_Referer-RPT-Generated (read-only)_1", dcVars[120], ".*", 1, 0, 0, 0, false, "Referer-RPT-Generated (read-only)_11", null, 0, false);
	IDataSub subContainer_323 = new DataSub();
	reqAction.addDataSub(subContainer_323);

		ISubRule sub_733 = new SubRule("req_uri", 26, 43, false, (IDCCoreVar)dcVars[106], false, "ref", null, 0, false);
	subContainer_323.addSubInstruction(sub_733);
		ISubRule sub_734 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_11", null, 0, false);
	subContainer_323.addSubInstruction(sub_734);
		ISubRule sub_735 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[8], false, "Host_17", null, 0, false);
	subContainer_323.addSubInstruction(sub_735);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7C536DDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_321(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7C7A5FDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "insight.adsrvr.org", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "TDCPM=CAESFgoHc2VtYXNpbxILCKbv-8envJM3EAUSFAoFdGFwYWQSCwjU_O7Cp7yTNxAFGAEgASgCMgsIpuf-9L28kzcQBTgBWgdzZW1hc2lvYAI.", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_324 = new DataSub();
	reqAction.addDataSub(subContainer_324);

		ISubRule sub_736 = new SubRule("req_uri", 26, 43, false, (IDCCoreVar)dcVars[106], false, "ref", null, 0, false);
	subContainer_324.addSubInstruction(sub_736);
		ISubRule sub_737 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_10", null, 0, false);
	subContainer_324.addSubInstruction(sub_737);
		ISubRule sub_738 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[8], false, "Host_16", null, 0, false);
	subContainer_324.addSubInstruction(sub_738);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C7C536ADFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7C7A62DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_322(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7CA13EDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "insight.adsrvr.org", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "TDCPM=CAESFgoHc2VtYXNpbxILCKbv-8envJM3EAUSFAoFdGFwYWQSCwjU_O7Cp7yTNxAFGAEgASgCMgsIpuf-9L28kzcQBTgBWgdzZW1hc2lvYAI.", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_325 = new DataSub();
	reqAction.addDataSub(subContainer_325);

		ISubRule sub_739 = new SubRule("req_uri", 26, 43, false, (IDCCoreVar)dcVars[106], false, "ref", null, 0, false);
	subContainer_325.addSubInstruction(sub_739);
		ISubRule sub_740 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_9", null, 0, false);
	subContainer_325.addSubInstruction(sub_740);
		ISubRule sub_741 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[8], false, "Host_15", null, 0, false);
	subContainer_325.addSubInstruction(sub_741);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C7C7A5FDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7CA141DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_323(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7CA1B1DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.facebook.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/webp,*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "fr=0ho1FlX4G6suSurPR..Bch6eL...1.0.Bch6eL.", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_326 = new DataSub();
	reqAction.addDataSub(subContainer_326);

		ISubRule sub_742 = new SubRule("req_uri", 8, 16, true, (IDCCoreVar)dcVars[96], false, "id", null, 0, false);
	subContainer_326.addSubInstruction(sub_742);
		ISubRule sub_743 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_8", null, 0, false);
	subContainer_326.addSubInstruction(sub_743);
		ISubRule sub_744 = new SubRule("req_hdr_Host_1", 0, 16, false, (IDCCoreVar)vars[7], false, "Host_14", null, 0, false);
	subContainer_326.addSubInstruction(sub_744);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7CA1B4DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_324(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7CC87FDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "js.adsrvr.org", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://insight.adsrvr.org/track/up?adv=lg9m31y&ref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F&upid=dl74g8x&osi=cef30ec0939895449f1090f82bf48fea&osv=1.1&upv=1.1.3", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_327 = new DataSub();
	reqAction.addDataSub(subContainer_327);

		ISubRule sub_745 = new SubRule("req_hdr_Referer_1", 0, 163, false, (IDCCoreVar)dcVars[120], false, "Referer_7", null, 0, false);
	subContainer_327.addSubInstruction(sub_745);
		ISubRule sub_746 = new SubRule("req_hdr_Host_1", 0, 13, false, (IDCCoreVar)vars[6], false, "Host_13", null, 0, false);
	subContainer_327.addSubInstruction(sub_746);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C7CA13EDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C7C7A5FDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C7C536ADFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7CC882DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_325(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7CEF87DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_328 = new DataSub();
	reqAction.addDataSub(subContainer_328);

		ISubRule sub_747 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_12", null, 0, false);
	subContainer_328.addSubInstruction(sub_747);
		ISubRule sub_748 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_11", null, 0, false);
	subContainer_328.addSubInstruction(sub_748);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C7CEF8ADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_326(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7CEFD2DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_329 = new DataSub();
	reqAction.addDataSub(subContainer_329);

		ISubRule sub_749 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_10", null, 0, false);
	subContainer_329.addSubInstruction(sub_749);
		ISubRule sub_750 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_9", null, 0, false);
	subContainer_329.addSubInstruction(sub_750);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C7CEFD5DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_327(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7D1683DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "127.0.0.1:7878", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("cache-control", "no-cache", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_330 = new DataSub();
	reqAction.addDataSub(subContainer_330);

		ISubRule sub_751 = new SubRule("req_hdr_Host_1", 10, 4, false, (IDCCoreVar)vars[5], false, "Host_8", null, 0, false);
	subContainer_330.addSubInstruction(sub_751);
		ISubRule sub_752 = new SubRule("req_hdr_Host_1", 0, 9, false, (IDCCoreVar)vars[4], false, "Host_7", null, 0, false);
	subContainer_330.addSubInstruction(sub_752);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1E9452E6C7D1686DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html;charset=iso-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_328(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7D16DCDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "px.ads.linkedin.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "bcookie=\"v=2&545a19af-f909-4deb-802a-e766b58259ce\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_32 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_32);

	harvestContainer_32.addHarvestInstruction ("resp_hdr_Location_1", dcVars[121], ".*", 1, 0, 0, 0, false, "Location_39", null, 0, false);
	IDataSub subContainer_331 = new DataSub();
	reqAction.addDataSub(subContainer_331);

		ISubRule sub_753 = new SubRule("req_uri", 96, 1, true, (IDCCoreVar)dcVars[77], false, "s", null, 0, false);
	subContainer_331.addSubInstruction(sub_753);
		ISubRule sub_754 = new SubRule("req_uri", 33, 5, true, (IDCCoreVar)dcVars[103], false, "pid", null, 0, false);
	subContainer_331.addSubInstruction(sub_754);
		ISubRule sub_755 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_6", null, 0, false);
	subContainer_331.addSubInstruction(sub_755);
		ISubRule sub_756 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_6", null, 0, false);
	subContainer_331.addSubInstruction(sub_756);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C715697DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7D16DFDFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(302);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_329(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7D3DD1DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "analytics.twitter.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "personalization_id=\"v1_jZh+71txeyhMOrs60mcitw==\";guest_id=v1%3A151501885713409701", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_332 = new DataSub();
	reqAction.addDataSub(subContainer_332);

		ISubRule sub_757 = new SubRule("req_uri", 216, 27, true, (IDCCoreVar)dcVars[119], false, "tpx_cb", null, 0, false);
	subContainer_332.addSubInstruction(sub_757);
		ISubRule sub_758 = new SubRule("req_uri", 123, 1, true, (IDCCoreVar)dcVars[118], false, "tw_order_quantity", null, 0, false);
	subContainer_332.addSubInstruction(sub_758);
		ISubRule sub_759 = new SubRule("req_uri", 103, 1, true, (IDCCoreVar)dcVars[117], false, "tw_sale_amount", null, 0, false);
	subContainer_332.addSubInstruction(sub_759);
		ISubRule sub_760 = new SubRule("req_uri", 32, 1, true, (IDCCoreVar)dcVars[116], false, "p_user_id", null, 0, false);
	subContainer_332.addSubInstruction(sub_760);
		ISubRule sub_761 = new SubRule("req_uri", 14, 7, true, (IDCCoreVar)dcVars[115], false, "p_id", null, 0, false);
	subContainer_332.addSubInstruction(sub_761);
		ISubRule sub_762 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_5", null, 0, false);
	subContainer_332.addSubInstruction(sub_762);
		ISubRule sub_763 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[3], false, "Host_5", null, 0, false);
	subContainer_332.addSubInstruction(sub_763);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C7A306EDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7D3DD4DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript;charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_330(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7D64D7DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "px.ads.linkedin.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "bcookie=\"v=2&545a19af-f909-4deb-802a-e766b58259ce\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_33 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_33);

	harvestContainer_33.addHarvestInstruction ("resp_hdr_Location_1", dcVars[122], "http.{0,1}://.*?(/.*)", 1, 0, 0, 0, false, "Location_40", null, 0, false);
	IDataSub subContainer_333 = new DataSub();
	reqAction.addDataSub(subContainer_333);

		ISubRule sub_764 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_4", null, 0, false);
	subContainer_333.addSubInstruction(sub_764);
		ISubRule sub_765 = new SubRule("req_uri", 0, 114, false, (IDCCoreVar)dcVars[121], false, "Oracle | Integrated _url_3", null, 0, false);
	subContainer_333.addSubInstruction(sub_765);
		ISubRule sub_766 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_4", null, 0, false);
	subContainer_333.addSubInstruction(sub_766);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C61ED4EDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C7D16DCDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7D64DADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(302);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_331(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7D8BCEDFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "www.linkedin.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "bcookie=\"v=2&545a19af-f909-4deb-802a-e766b58259ce\";bscookie=\"v=1&201801032234149b492c79-ce90-4ee4-8a7c-382c2925ab95AQHNlo4b6YPefoPbelGIulOGdHqXs8oF\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_34 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_34);

	harvestContainer_34.addHarvestInstruction ("resp_hdr_Location_1", dcVars[123], "http.{0,1}://.*?(/.*)", 1, 0, 0, 0, false, "Location_41", null, 0, false);
	IDataSub subContainer_334 = new DataSub();
	reqAction.addDataSub(subContainer_334);

		ISubRule sub_767 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_3", null, 0, false);
	subContainer_334.addSubInstruction(sub_767);
		ISubRule sub_768 = new SubRule("req_uri", 0, 222, false, (IDCCoreVar)dcVars[122], false, "Oracle | Integrated _url_2", null, 0, false);
	subContainer_334.addSubInstruction(sub_768);
		ISubRule sub_769 = new SubRule("req_hdr_Host_1", 0, 16, false, (IDCCoreVar)vars[2], false, "Host_3", null, 0, false);
	subContainer_334.addSubInstruction(sub_769);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C7D64D7DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C7D16DCDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C7D64D7DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7D8BD1DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(302);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_332(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7DB2D7DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(8);
					
		headers.add(new RequestHeaderData("Host", "px.ads.linkedin.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://3573281.fls.doubleclick.net/activityi;src=3573281;type=ubert0;cat=awarn0;ord=1;num=7627745778999;gtm=2od2q1;auiddc=1161273925.1552440119;u1=ocom%3Aen-us%3A%2Fdownloads%2F;u2=ocom%3Aen;u3=New;u4=Downloads%2C%20java%20downloads;u5=not%20logged%20in;u6=%5BCOMPANY%5D;u7=%5BJOB%20TITLE%5D;u8=%5BCITY%5D;u9=%5BSTATE%5D;u10=%5BZIP%5D;u11=https%3A%2F%2Fwww.oracle.com%2Findex.html;u12=7C4027BB7E5E43E69317D065A3A647EC;u13=%5BCOMPANY%20SIZE%5D;u14=Not%20Available;u15=Not%20Available;u16=Not%20Available;u17=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F;~oref=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2F?", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "bcookie=\"v=2&545a19af-f909-4deb-802a-e766b58259ce\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_335 = new DataSub();
	reqAction.addDataSub(subContainer_335);

		ISubRule sub_770 = new SubRule("req_hdr_Referer_1", 0, 602, false, (IDCCoreVar)dcVars[94], false, "Referer_2", null, 0, false);
	subContainer_335.addSubInstruction(sub_770);
		ISubRule sub_771 = new SubRule("req_uri", 0, 126, false, (IDCCoreVar)dcVars[123], false, "Oracle | Integrated _url", null, 0, false);
	subContainer_335.addSubInstruction(sub_771);
		ISubRule sub_772 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_2", null, 0, false);
	subContainer_335.addSubInstruction(sub_772);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C7D8BCEDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C77E695DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C7D16DCDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C7D64D7DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C7D8BCEDFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7DB2DADFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_333(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1E9452E6C7DD9C4DFEAE23864643438", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(10);
					
		headers.add(new RequestHeaderData("Host", "36a3fec2.akstat.io", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-US,en;q=0.5", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.oracle.com/downloads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "application/x-www-form-urlencoded", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "1084", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.oracle.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_32(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_337 = new DataSub();
	reqAction.addDataSub(subContainer_337);

		ISubRule sub_777 = new SubRule("req_hdr_Referer_1", 0, 33, false, (IDCCoreVar)dcVars[70], false, "Referer", null, 0, false);
	subContainer_337.addSubInstruction(sub_777);
		ISubRule sub_778 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[0], false, "Host", null, 0, false);
	subContainer_337.addSubInstruction(sub_778);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C743D0EDFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6855F1DFEAE23864643438"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1E9452E6C6FF700DFEAE23864643438"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1E9452E6C7DD9C7DFEAE23864643438",
			true,
			false
		);
		
		req.setExpectedResponseCode(204);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_32(HTTPPostData postData) {
				StringBuffer strBuf_24 = new StringBuffer();
strBuf_24.append("h.d=oracle.com&h.key=DXNLE-YBWWY-AR74T-WMD99-77VRA&h.t=15524");
strBuf_24.append("40118067&c.e=jt6irgrj&c.tti.m=raf&cdim.subDomain=www.oracle.");
strBuf_24.append("com&cdim.Language=en-us&rt.blstart=1552440117729&u=https%3A%");
strBuf_24.append("2F%2Fwww.oracle.com%2Fdownloads%2F&r=https%3A%2F%2Fwww.oracl");
strBuf_24.append("e.com%2Findex.html&v=1.571.0&rt.si=0a8ed298-88bb-4c32-8e29-3");
strBuf_24.append("e61c3a5ab58-poa6gc&vis.st=visible&ua.plt=Linux%20x86_64&ua.v");
strBuf_24.append("nd=&pid=1ivattx1&if=&ak.v=19&ak.cp=82485&ak.ai=165266&ak.rid");
strBuf_24.append("=1c2a41b8&ak.a2=0&ak.feo=0&dom.doms=20&scr.xy=1920x1080&scr.");
strBuf_24.append("bpp=24%2F24&scr.orn=0%2Flandscape-primary&cpu.cnc=4&dom.ln=2");
strBuf_24.append("139&dom.sz=175548&dom.img=2&dom.script=29&dom.script.ext=23&");
strBuf_24.append("dom.iframe=4&dom.iframe.ext=2&dom.link=39&dom.link.css=2&rt.");
strBuf_24.append("tstart=1552440117151&rt.cstart=1552440117153&rt.bstart=15524");
strBuf_24.append("40117757&rt.end=1552440118790&t_done=1639&rt.tt=5415&rt.obo=");
strBuf_24.append("0&rt.quit=&rt.ss=1552440107922&rt.sl=2&ak.ol=0&ak.cr=9&ak.ip");
strBuf_24.append("v=4&ak.proto=&ak.r=32986&ak.m=dscx&ak.n=essl&ak.bpcip=192.8.");
strBuf_24.append("18.0&ak.cport=54400&ak.gh=23.198.10.159&ak.quicv=&ak.tlsv=tl");
strBuf_24.append("s1.2&ak.0rtt=&ak.csrc=-&ak.acc=reno&dom.res=40&c.tti.vr=770&");
strBuf_24.append("c.lb=jt6iri2t&h.cr=e0a39d2897a21cf4f61c35ef6ed88488990114ae&");
strBuf_24.append("sb=1");
String requestData_29 = strBuf_24.toString();
			
	HTTPPostDataChunk pdc_31 = new HTTPPostDataChunk("A1E9452E6C7DDA04DFEAE23864643438", postData, requestData_29, "UTF-8", 80, 1084);
	postData.addDataChunk(pdc_31);

	IDataSub subContainer_336 = new DataSub();
	pdc_31.addDataSub(subContainer_336);

		ISubRule sub_773 = new SubRule("req_content", 1083, 1, true, (IDCCoreVar)dcVars[21], false, "sb", null, 0, false);
	subContainer_336.addSubInstruction(sub_773);
		ISubRule sub_774 = new SubRule("req_content", 1039, 40, true, (IDCCoreVar)dcVars[82], false, "h.cr", null, 0, false);
	subContainer_336.addSubInstruction(sub_774);
		ISubRule sub_775 = new SubRule("req_content", 21, 29, true, (IDCCoreVar)dcVars[78], false, "h.key", null, 0, false);
	subContainer_336.addSubInstruction(sub_775);
		ISubRule sub_776 = new SubRule("req_content", 4, 10, true, (IDCCoreVar)dcVars[80], false, "h.d", null, 0, false);
	subContainer_336.addSubInstruction(sub_776);
	



	}
	public WebSocketRequestCloseAction websocketRequestClose_1(IContainer parent) {
		byte[] binaryData = new byte[0];
		String textData = "";
		WebSocketRequestCloseAction websocketAction = new WebSocketRequestCloseAction(parent, "Close from client on connection Conn_6", "A1E9452E6C7DDA3CDFEAE23864643438", "A1E9452E6C39A4E4DFEAE23864643438", false, false, false, false, true, textData, binaryData, false, "");
		/* no children */
		/* no substitutors */
		return websocketAction;
	}
	
}
